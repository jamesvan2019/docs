[
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getbestblockhash/",
	"title": "getBestBlockHash",
	"tags": [],
	"description": "",
	"content": "getBestBlocktHash 函数名：getBestBlockHash 说明：无参数，获取当前最大区块Order的区块hash 实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBestBlockHash\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: \u0026quot;000044c83486609eee3c5bb46cd539eb022ea05ed86c40ef4e6710357f225ea3\u0026quot; } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblock/",
	"title": "getBlock",
	"tags": [],
	"description": "",
	"content": "getBlock 函数名：getBlock {blockhash} {verbose} {inclTx} {fullTx} 说明：根据区块hash获取区块  blockhash : 256位区块hash verbose: 是否显示详细信息，默认为false inclTx: 是否包含交易信息，默认为true fullTx：是否显示完整交易信息，默认为true  实例: curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlock\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;98294db0634d5afed36554a60d4565a6507e3a78dfb8cc66cc08ba29f328c682\u0026quot;,true,true,false],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: { \u0026quot;hash\u0026quot;: \u0026quot;98294db0634d5afed36554a60d4565a6507e3a78dfb8cc66cc08ba29f328c682\u0026quot;, \u0026quot;txsvalid\u0026quot;: true, \u0026quot;confirmations\u0026quot;: 338, \u0026quot;version\u0026quot;: 12, \u0026quot;weight\u0026quot;: 682, \u0026quot;height\u0026quot;: 20831, \u0026quot;txRoot\u0026quot;: \u0026quot;040807f45457c94ed905bf72ed923154a5e951278e80a5c0eb2de0d7b269c5c1\u0026quot;, \u0026quot;order\u0026quot;: 21300, \u0026quot;transactions\u0026quot;: [ \u0026quot;5844ca2e091f8c2a770f4a0ff23318ae780b9e3a9b2076cc27b8c493dce30c03\u0026quot;, \u0026quot;c259a4dfb7eaaae92ab246f14762541581671135cd6030ac29d8c34cf77e9f32\u0026quot; ], \u0026quot;stateRoot\u0026quot;: \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;bits\u0026quot;: \u0026quot;1a1c60ed\u0026quot;, \u0026quot;difficulty\u0026quot;: 438067437, \u0026quot;pow\u0026quot;: { \u0026quot;pow_name\u0026quot;: \u0026quot;qitmeer_keccak256\u0026quot;, \u0026quot;pow_type\u0026quot;: 6, \u0026quot;nonce\u0026quot;: 1457503796 }, \u0026quot;timestamp\u0026quot;: \u0026quot;2020-07-01T12:48:52+08:00\u0026quot;, \u0026quot;parentroot\u0026quot;: \u0026quot;000073e5c2787d1d2a04358c8b2fad422a602a38a6070570c2d8b724c054987f\u0026quot;, \u0026quot;parents\u0026quot;: [ \u0026quot;000073e5c2787d1d2a04358c8b2fad422a602a38a6070570c2d8b724c054987f\u0026quot; ], \u0026quot;children\u0026quot;: [ \u0026quot;00018c75188cc658705af615684b095bbc85a2dde6772e4bf3929b5d5505f5fb\u0026quot; ] } } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblockbynum/",
	"title": "getBlockByNum",
	"tags": [],
	"description": "",
	"content": "getBlockByNum 函数名：getBlockByNum {number} {verbose} {inclTx} {fullTx} 说明：  number：number指按照当前节点所观察到的区块所构造的本地DAG图的区块序号，是一个从0开始，按顺序递增的连续整数值。该序号（Num）与全网其他节点无关，即并非BlockDAG共识结果的Block排序，请注意该方法和getBlockByOder的区别。该方法只用于帮助二级应用构造特殊业务场景而存在，返回结构并非BlockDAG共识结果，使用时请注意。 verbose: 是否显示详细信息，默认为false inclTx: 是否包含交易信息，默认为true fullTx：是否显示完整交易信息，默认为true  实例: $ curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockByNum\u0026quot;,\u0026quot;params\u0026quot;:[1,true],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出：\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: { \u0026quot;hash\u0026quot;: \u0026quot;83d98f64ff6517e5899a1c392d91c334ae77a8c7705cd3ca0b147a6470d8eb08\u0026quot;, \u0026quot;txsvalid\u0026quot;: false, \u0026quot;confirmations\u0026quot;: 0, \u0026quot;version\u0026quot;: 12, \u0026quot;weight\u0026quot;: 443, \u0026quot;height\u0026quot;: 1, \u0026quot;txRoot\u0026quot;: \u0026quot;0cda5bc3744da7fcdd4a6dbbd72b24a58b9dcd927a171021646af87aa926315d\u0026quot;, \u0026quot;transactions\u0026quot;: [ { \u0026quot;hex\u0026quot;: \u0026quot;010000000114898f3cc6b4de34ca419365fee41fd78d74d71a70a98caa88e1260efb876a79ffffffffffffffff01007841cb020000001976a914499896c7814a6f49fa256bc5feaa5882a665339188ac000000000000000000000000012151080300009030da6dd9162f7777772e6d656572706f6f6c2e636f6d2f32303230\u0026quot;, \u0026quot;txid\u0026quot;: \u0026quot;0cda5bc3744da7fcdd4a6dbbd72b24a58b9dcd927a171021646af87aa926315d\u0026quot;, \u0026quot;txhash\u0026quot;: \u0026quot;0ac294d88ec9ab3f9cdfff2775d3c881a44cf4b73a1aaa2c2b57e58f055e3168\u0026quot;, \u0026quot;size\u0026quot;: 127, \u0026quot;version\u0026quot;: 1, \u0026quot;locktime\u0026quot;: 0, \u0026quot;expire\u0026quot;: 0, \u0026quot;vin\u0026quot;: [ { \u0026quot;coinbase\u0026quot;: \u0026quot;51080300009030da6dd9162f7777772e6d656572706f6f6c2e636f6d2f32303230\u0026quot;, \u0026quot;sequence\u0026quot;: 4294967295 } ], \u0026quot;vout\u0026quot;: [ { \u0026quot;amount\u0026quot;: 12000000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 499896c7814a6f49fa256bc5feaa5882a6653391 OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a914499896c7814a6f49fa256bc5feaa5882a665339188ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot;, \u0026quot;addresses\u0026quot;: [ \u0026quot;TmVfDq18VqSg735ko9aAo36tFwYww4PBGMC\u0026quot; ] } } ], \u0026quot;blockhash\u0026quot;: \u0026quot;83d98f64ff6517e5899a1c392d91c334ae77a8c7705cd3ca0b147a6470d8eb08\u0026quot;, \u0026quot;confirmations\u0026quot;: 0 } ], \u0026quot;stateRoot\u0026quot;: \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;bits\u0026quot;: \u0026quot;1b00ffff\u0026quot;, \u0026quot;difficulty\u0026quot;: 453050367, \u0026quot;pow\u0026quot;: { \u0026quot;pow_name\u0026quot;: \u0026quot;qitmeer_keccak256\u0026quot;, \u0026quot;pow_type\u0026quot;: 6, \u0026quot;nonce\u0026quot;: 1067495060 }, \u0026quot;timestamp\u0026quot;: \u0026quot;2020-06-24T10:06:46+08:00\u0026quot;, \u0026quot;parentroot\u0026quot;: \u0026quot;36988b21b970fe3cbc7381dec7760eea50bc869e3bfbc44856a402fac94d3a8a\u0026quot;, \u0026quot;parents\u0026quot;: [ \u0026quot;36988b21b970fe3cbc7381dec7760eea50bc869e3bfbc44856a402fac94d3a8a\u0026quot; ], \u0026quot;children\u0026quot;: [ \u0026quot;null\u0026quot; ] } } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblockbyorder/",
	"title": "getBlockByOrder",
	"tags": [],
	"description": "",
	"content": "getBlockByOrder 函数名：getBlockByOrder {order} {verbose} {inclTx} {fullTx} 说明：返回指定Order的Block  order:区块order，qitmeer采用BlockDAG算法进行共识，对区块的先后顺序进行排序。order指区块序列的序号，是一个从0开始，按顺序连续递增的整数值。请注意order不是区块的高度。 verbose: 是否显示详细信息，默认为false inclTx: 是否包含交易信息，默认为true fullTx：是否显示完整交易信息，默认为true  实例1: curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockByOrder\u0026quot;,\u0026quot;params\u0026quot;:[1,true],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 实例1输出:\n{ \u0026quot;hash\u0026quot;: \u0026quot;0012c535ed43311b0670341fad3a489642c0bc6e6796f836aa6d235826fc9c66\u0026quot;, \u0026quot;txsvalid\u0026quot;: true, \u0026quot;confirmations\u0026quot;: 20651, \u0026quot;version\u0026quot;: 12, \u0026quot;weight\u0026quot;: 433, \u0026quot;height\u0026quot;: 1, \u0026quot;txRoot\u0026quot;: \u0026quot;845738befb45db6872e37295b39837cd8dc98e77417754fd4ddab5ff169317be\u0026quot;, \u0026quot;order\u0026quot;: 1, \u0026quot;transactions\u0026quot;: [ { \u0026quot;hex\u0026quot;: \u0026quot;0c000000010a7ebb3e65b3be8a2e3425407e8e649c4bde818b7db70bdb3d4b8c3256745f37ffffffffffffffff01007841cb020000001976a91409eb5fc744c14c8cdd5a05b552c58c1fb6e7ebd088ac000000000000000072b6f25e01175108461004cbac974daf0c2f363636706f6f6c2e636e2f\u0026quot;, \u0026quot;txid\u0026quot;: \u0026quot;845738befb45db6872e37295b39837cd8dc98e77417754fd4ddab5ff169317be\u0026quot;, \u0026quot;txhash\u0026quot;: \u0026quot;93772af2957ecd066841fda4606bfa5e001ac151062c0b3ca7cfea60ec35e8b3\u0026quot;, \u0026quot;size\u0026quot;: 117, \u0026quot;version\u0026quot;: 12, \u0026quot;locktime\u0026quot;: 0, \u0026quot;timestamp\u0026quot;: \u0026quot;2020-06-24T10:12:02+08:00\u0026quot;, \u0026quot;expire\u0026quot;: 0, \u0026quot;vin\u0026quot;: [ { \u0026quot;coinbase\u0026quot;: \u0026quot;5108461004cbac974daf0c2f363636706f6f6c2e636e2f\u0026quot;, \u0026quot;sequence\u0026quot;: 4294967295 } ], \u0026quot;vout\u0026quot;: [ { \u0026quot;amount\u0026quot;: 12000000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 09eb5fc744c14c8cdd5a05b552c58c1fb6e7ebd0 OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a91409eb5fc744c14c8cdd5a05b552c58c1fb6e7ebd088ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot;, \u0026quot;addresses\u0026quot;: [ \u0026quot;TmPrXkjpjSUBiFG9RZKPjfdsAPbiaar94Ta\u0026quot; ] } } ], \u0026quot;blockhash\u0026quot;: \u0026quot;0012c535ed43311b0670341fad3a489642c0bc6e6796f836aa6d235826fc9c66\u0026quot;, \u0026quot;confirmations\u0026quot;: 20651 } ], \u0026quot;stateRoot\u0026quot;: \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;bits\u0026quot;: \u0026quot;34ad1ec\u0026quot;, \u0026quot;difficulty\u0026quot;: 55235052, \u0026quot;pow\u0026quot;: { \u0026quot;pow_name\u0026quot;: \u0026quot;cuckaroom\u0026quot;, \u0026quot;pow_type\u0026quot;: 3, \u0026quot;nonce\u0026quot;: 5, \u0026quot;proof_data\u0026quot;: { \u0026quot;edge_bits\u0026quot;: 29, \u0026quot;circle_nonces\u0026quot;: \u0026quot;fa50c20086aef40090ebab01295d5102697fcb0229e83b04b0ac4604fd9a6505118a6f05deb21206e88f9c07184fae075e218408884ed90bdfca630cf9e2a60c12fae80f909b831084669a109390e6105aa9c611aea1e71288408713c670641405f9a714abfcf81557ded81665b20f17a17370170628de17d4ccfb1755515618f5456918efd27918d4f4d218f91bb71954e3b11cb648ca1c9779541d51ee6b1ee12a711e0679131f\u0026quot; } }, \u0026quot;timestamp\u0026quot;: \u0026quot;2020-06-24T10:05:33+08:00\u0026quot;, \u0026quot;parentroot\u0026quot;: \u0026quot;36988b21b970fe3cbc7381dec7760eea50bc869e3bfbc44856a402fac94d3a8a\u0026quot;, \u0026quot;parents\u0026quot;: [ \u0026quot;36988b21b970fe3cbc7381dec7760eea50bc869e3bfbc44856a402fac94d3a8a\u0026quot; ], \u0026quot;children\u0026quot;: [ \u0026quot;000de974590581de8294866535b3af182041a4cb29b71a7680b024e3bd7d12da\u0026quot; ] } 实例2: curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockByOrder\u0026quot;,\u0026quot;params\u0026quot;:[1,false],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 实例2输出:\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: \u0026quot;0c0000008a3a4dc9fa02a45648c4fb3b9e86bc50ea0e76c7de8173bc3cfe70b9218b9836be179316ffb5da4dfd547741778ec98dcd3798b39572e37268db45fbbe3857840000000000000000000000000000000000000000000000000000000000000000ecd14a03edb4f25e05000000031dfa50c20086aef40090ebab01295d5102697fcb0229e83b04b0ac4604fd9a6505118a6f05deb21206e88f9c07184fae075e218408884ed90bdfca630cf9e2a60c12fae80f909b831084669a109390e6105aa9c611aea1e71288408713c670641405f9a714abfcf81557ded81665b20f17a17370170628de17d4ccfb1755515618f5456918efd27918d4f4d218f91bb71954e3b11cb648ca1c9779541d51ee6b1ee12a711e0679131f018a3a4dc9fa02a45648c4fb3b9e86bc50ea0e76c7de8173bc3cfe70b9218b9836010c000000010a7ebb3e65b3be8a2e3425407e8e649c4bde818b7db70bdb3d4b8c3256745f37ffffffffffffffff01007841cb020000001976a91409eb5fc744c14c8cdd5a05b552c58c1fb6e7ebd088ac000000000000000072b6f25e01175108461004cbac974daf0c2f363636706f6f6c2e636e2f\u0026quot; } 实例3: curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockByOrder\u0026quot;,\u0026quot;params\u0026quot;:[1,true,false],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 实例3输出:\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: { \u0026quot;hash\u0026quot;: \u0026quot;0012c535ed43311b0670341fad3a489642c0bc6e6796f836aa6d235826fc9c66\u0026quot;, \u0026quot;txsvalid\u0026quot;: true, \u0026quot;confirmations\u0026quot;: 20686, \u0026quot;version\u0026quot;: 12, \u0026quot;weight\u0026quot;: 433, \u0026quot;height\u0026quot;: 1, \u0026quot;txRoot\u0026quot;: \u0026quot;845738befb45db6872e37295b39837cd8dc98e77417754fd4ddab5ff169317be\u0026quot;, \u0026quot;order\u0026quot;: 1, \u0026quot;stateRoot\u0026quot;: \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;bits\u0026quot;: \u0026quot;34ad1ec\u0026quot;, \u0026quot;difficulty\u0026quot;: 55235052, \u0026quot;pow\u0026quot;: { \u0026quot;pow_name\u0026quot;: \u0026quot;cuckaroom\u0026quot;, \u0026quot;pow_type\u0026quot;: 3, \u0026quot;nonce\u0026quot;: 5, \u0026quot;proof_data\u0026quot;: { \u0026quot;edge_bits\u0026quot;: 29, \u0026quot;circle_nonces\u0026quot;: \u0026quot;fa50c20086aef40090ebab01295d5102697fcb0229e83b04b0ac4604fd9a6505118a6f05deb21206e88f9c07184fae075e218408884ed90bdfca630cf9e2a60c12fae80f909b831084669a109390e6105aa9c611aea1e71288408713c670641405f9a714abfcf81557ded81665b20f17a17370170628de17d4ccfb1755515618f5456918efd27918d4f4d218f91bb71954e3b11cb648ca1c9779541d51ee6b1ee12a711e0679131f\u0026quot; } }, \u0026quot;timestamp\u0026quot;: \u0026quot;2020-06-24T10:05:33+08:00\u0026quot;, \u0026quot;parentroot\u0026quot;: \u0026quot;36988b21b970fe3cbc7381dec7760eea50bc869e3bfbc44856a402fac94d3a8a\u0026quot;, \u0026quot;parents\u0026quot;: [ \u0026quot;36988b21b970fe3cbc7381dec7760eea50bc869e3bfbc44856a402fac94d3a8a\u0026quot; ], \u0026quot;children\u0026quot;: [ \u0026quot;000de974590581de8294866535b3af182041a4cb29b71a7680b024e3bd7d12da\u0026quot; ] } } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblockcount/",
	"title": "getBlockCount",
	"tags": [],
	"description": "",
	"content": "getBlockCount 函数名：getBlockCount 说明：无参数，当前已定序的区块数量。 该数量-1即为当前最大的Block order\n实例 $ curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockCount\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: 21177 } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblockhashbyrange/",
	"title": "getBlockhashByRange",
	"tags": [],
	"description": "",
	"content": "getBlockhashByRange 函数名 getBlockhashByRange {start} {end} 说明：获取在某区间order范围的一组Blockhash  start 开始区块order end 结束区块order  实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockhashByRange\u0026quot;,\u0026quot;params\u0026quot;:[100,125],\u0026quot;id\u0026quot;:null}' https://127.0.0.1:18131 输出：\n[ \u0026quot;000c018b33589f2f731d9cfc26d5d329fefce1045b9d1e5b22e3e8e71760e0e7\u0026quot;, \u0026quot;68d1170256afeae9591bcb49c99734e582f59860d0917e449c03f08c269957a3\u0026quot;, \u0026quot;0010b1aef1910f1c5662e0991d8ba1d564e3df360c6235f6890486a35a4ca000\u0026quot;, \u0026quot;0013a4646accf2f11c96e59d51f07be4a510a0e9e12174fd569ae3744a38de24\u0026quot;, \u0026quot;0016242fcaf6effecf083aa2b7716f8825addb31530ce3141da7d50293f3dce2\u0026quot;, \u0026quot;00173736aba73591a7ce051c0a4e4605edcbafe48149849880d9b8c7781b538e\u0026quot;, \u0026quot;0007ae2245017244e3ca355bcbe2947f69ab1ab5c52112bff003842363298395\u0026quot;, \u0026quot;0016b7148e99c60cf74c96cdeffc8a966817f163013dc3fb89684946d7cbb7bc\u0026quot;, \u0026quot;000edcf8a5dad7cfdf25461359678421e51930614d73a965b8532bb608c00025\u0026quot;, \u0026quot;000ea156ad8ef5c90d0c5855a5352a9e156d8d778ee53daa5bb9145268b17693\u0026quot;, \u0026quot;2fa46ac8fa234ee5950d74fdaf0fd60d6fed406f1208d10ecff11026eaa45c86\u0026quot;, \u0026quot;000c5816df76fd7b6662cf2c9c57c87f050c1b101c5466a1fa6bbe5eebebbd22\u0026quot;, \u0026quot;178fc77f4af15e977861510c81f957b6518215ea483f847caa67e0daeb8ac0ce\u0026quot;, \u0026quot;0014fa7d8499812b5a7f404efa82b4959db5542bae55e60035cc0d5ae0ef29fa\u0026quot;, \u0026quot;0014c1c5b794c7fa91271841b6c4f63f6216529d7c9076e2e2f861e47bd31290\u0026quot;, \u0026quot;000207d33febab535405082c9bd78cd463048143429b404a120faa95b139d9b8\u0026quot;, \u0026quot;0628f63bf041cab884e55192a6bf6615c198390821542a1c3b53ad3fafc9bbd1\u0026quot;, \u0026quot;000cff170cde98b09f80c76109843d178f67dc7c64d25f6886f93ce0cd25fd7a\u0026quot;, \u0026quot;000b4c1f4a87f97b5ef7727f2fc4ffb9f5cf34b9c759e12dfb4954cfeb6f65fb\u0026quot;, \u0026quot;5d138960ca76057f379d8d6cb82bf6a93b7b2c63d1a4950d15305d12124f3b89\u0026quot;, \u0026quot;7d6d9140f516d9a12ca2109a89a17c777425b73596b9b4a7a4a4d4013da6ddec\u0026quot;, \u0026quot;2f3817197e885e805229c4be3cf94b9b7581b4e6975068e5583b8295b648d690\u0026quot;, \u0026quot;46e97b2fda23be092abd8c163c3d2f0a60018904484fd688918b7c5f257686e0\u0026quot;, \u0026quot;00015f28637b8442e2399924d0db703efebd33ab3176d4ccb7b762a28529087e\u0026quot;, \u0026quot;0011cc2a9cea757a2aaa235f27f41f00e3e2ed87282175fe76767c4f50b3aa05\u0026quot; ] "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblockheader/",
	"title": "getBlockHeader",
	"tags": [],
	"description": "",
	"content": "getBlockHeader 函数名：getBlockHeader {blockhash} {verbose} 说明：无参数，当前已定序的区块数量。  blockhash ： 256位区块hash verbose ：是否显示详细信息，默认为false 注：该数量-1即为当前最大的Block order  实例 $ curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockHeader\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0011cc2a9cea757a2aaa235f27f41f00e3e2ed87282175fe76767c4f50b3aa05\u0026quot;,true],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: { \u0026quot;hash\u0026quot;: \u0026quot;0011cc2a9cea757a2aaa235f27f41f00e3e2ed87282175fe76767c4f50b3aa05\u0026quot;, \u0026quot;confirmations\u0026quot;: 21145, \u0026quot;version\u0026quot;: 12, \u0026quot;parentroot\u0026quot;: \u0026quot;00015f28637b8442e2399924d0db703efebd33ab3176d4ccb7b762a28529087e\u0026quot;, \u0026quot;txRoot\u0026quot;: \u0026quot;c564f2c2e6fd7b7db1d09272a607388861f2bfe34550d5f7176ed4652459bbd7\u0026quot;, \u0026quot;stateRoot\u0026quot;: \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;difficulty\u0026quot;: 55235052, \u0026quot;layer\u0026quot;: 116, \u0026quot;time\u0026quot;: 1592967313, \u0026quot;pow\u0026quot;: { \u0026quot;pow_name\u0026quot;: \u0026quot;cuckaroom\u0026quot;, \u0026quot;pow_type\u0026quot;: 3, \u0026quot;nonce\u0026quot;: 19, \u0026quot;proof_data\u0026quot;: { \u0026quot;edge_bits\u0026quot;: 29, \u0026quot;circle_nonces\u0026quot;: \u0026quot;2b1c9b002544650140638b036dd04804cbd65304c5963305f3184d055dca110674761d0646e81d0639683d06718d1007c85c150744b960089a99a40878dff708e06320097e0d67098fa51d0a4e7c5f0acc8ad30b1e2e4e0ce5c0990cd0fcb80e1013ba0e3b614d0f5ba19c0f4904b90f0c190f12d5869012f45b621415193315ec0727160314e417b51938185314c218281ce318ca84ec18dd1b001941b7d619a571881e6f4f831f\u0026quot; } } } } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblocktotal/",
	"title": "getBlockTotal",
	"tags": [],
	"description": "",
	"content": "getBlockTotal 函数名：getBlockTotal 说明：无参数，该节点所有已知的区块总数量。 该数量包含可能存在的当前还未被BlockDAG共识定序的区块\n实例 $ curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockTotal\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: 21177 } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getblockv2/",
	"title": "getBlockV2",
	"tags": [],
	"description": "",
	"content": "getBlockV2 函数名：getBlocKV2 {blockhash} {verbose} {inclTx} {fullTx} 说明：根据区块hash获取区块（版本2）  blockhash : 256位区块hash verbose: 是否显示详细信息，默认为false inclTx: 是否包含交易信息，默认为true fullTx：是否显示完整交易信息，默认为true  V2版本RPC将交易手续费显示在单独的transactionfee属性中。而之前版本的交易手续费体现在coinbase的Amount中，和挖矿奖励合并显示。请注意，不论使用V1或者V2版本的API，只影响JSON数据的显示。内部的数据模型和共识模型是完全是一致的。\n实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getBlockV2\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;98294db0634d5afed36554a60d4565a6507e3a78dfb8cc66cc08ba29f328c682\u0026quot;,true,true,false],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出：\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: { \u0026quot;hash\u0026quot;: \u0026quot;98294db0634d5afed36554a60d4565a6507e3a78dfb8cc66cc08ba29f328c682\u0026quot;, \u0026quot;txsvalid\u0026quot;: true, \u0026quot;confirmations\u0026quot;: 304, \u0026quot;version\u0026quot;: 12, \u0026quot;weight\u0026quot;: 682, \u0026quot;height\u0026quot;: 20831, \u0026quot;txRoot\u0026quot;: \u0026quot;040807f45457c94ed905bf72ed923154a5e951278e80a5c0eb2de0d7b269c5c1\u0026quot;, \u0026quot;order\u0026quot;: 21300, \u0026quot;transactions\u0026quot;: [ \u0026quot;5844ca2e091f8c2a770f4a0ff23318ae780b9e3a9b2076cc27b8c493dce30c03\u0026quot;, \u0026quot;c259a4dfb7eaaae92ab246f14762541581671135cd6030ac29d8c34cf77e9f32\u0026quot; ], \u0026quot;transactionfee\u0026quot;: 32000, \u0026quot;stateRoot\u0026quot;: \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;bits\u0026quot;: \u0026quot;1a1c60ed\u0026quot;, \u0026quot;difficulty\u0026quot;: 438067437, \u0026quot;pow\u0026quot;: { \u0026quot;pow_name\u0026quot;: \u0026quot;qitmeer_keccak256\u0026quot;, \u0026quot;pow_type\u0026quot;: 6, \u0026quot;nonce\u0026quot;: 1457503796 }, \u0026quot;timestamp\u0026quot;: \u0026quot;2020-07-01T12:48:52+08:00\u0026quot;, \u0026quot;parentroot\u0026quot;: \u0026quot;000073e5c2787d1d2a04358c8b2fad422a602a38a6070570c2d8b724c054987f\u0026quot;, \u0026quot;parents\u0026quot;: [ \u0026quot;000073e5c2787d1d2a04358c8b2fad422a602a38a6070570c2d8b724c054987f\u0026quot; ], \u0026quot;children\u0026quot;: [ \u0026quot;00018c75188cc658705af615684b095bbc85a2dde6772e4bf3929b5d5505f5fb\u0026quot; ] } } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getfees/",
	"title": "getFees",
	"tags": [],
	"description": "",
	"content": "getFees 函数名：getFees {blockhash} 说明：得到区块的交易手续费  blockhash : 256位区块hash  实例1 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getFees\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;00001ae85f5c90cc2f1f9ae5b1ac148145555d884f2c7d986cb3df250c8c3ecc\u0026quot;],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: 0 } 实例2 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getFees\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0001e69751e25747286d905964ed3c838b63e185074405eb2a7121cf0a72e259\u0026quot;],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: 49000 } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getmainchainheight/",
	"title": "getMainChainHeight",
	"tags": [],
	"description": "",
	"content": "getMainChainHeight 函数名 getMainChainHeight 说明：无参数，得到当前的主链高度。 实例 $ curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getMainChainHeight\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: \u0026quot;21275\u0026quot; } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getmempool/",
	"title": "getMempool",
	"tags": [],
	"description": "",
	"content": "getMempool 函数名：getMempool {txtype} {verbose} 说明：  txType: 交易类型，目前只支持regular。 verbose：显示详细信息，目前只支持false。  实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getMempool\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;regular\u0026quot;,false],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: [ \u0026quot;8df1c9019dd7110e9c3a421f62973ff245cbad435452808363ac291bf2265613\u0026quot; ] } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getnodeinfo/",
	"title": "getNodeInfo",
	"tags": [],
	"description": "",
	"content": "getNodeInfo 函数名：getNodeInfo 说明：无参数，获取该节点信息 实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getNodeInfo\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:null}' https://127.0.0.1:18131 输出：\n{ \u0026quot;UUID\u0026quot;: \u0026quot;dc4dffc6-9c0c-417f-9cb2-a1fdc4877915\u0026quot;, \u0026quot;version\u0026quot;: 90100, \u0026quot;buildversion\u0026quot;: \u0026quot;0.9.1+dev-7ae8c17\u0026quot;, \u0026quot;protocolversion\u0026quot;: 21, \u0026quot;totalsubsidy\u0026quot;: 254484000000000, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;00006869b1f1e29db24cc528a86370b4355f1dc6a618ac0549495679f0bc484b main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21207, \u0026quot;mainheight\u0026quot;: 20738, \u0026quot;layer\u0026quot;: 20738 }, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;connections\u0026quot;: 8, \u0026quot;pow_diff\u0026quot;: { \u0026quot;blake2bd_diff\u0026quot;: 1, \u0026quot;cuckaroo_diff\u0026quot;: 1, \u0026quot;cuckatoo_diff\u0026quot;: 1 }, \u0026quot;testnet\u0026quot;: true, \u0026quot;mixnet\u0026quot;: false, \u0026quot;confirmations\u0026quot;: 10, \u0026quot;coinbasematurity\u0026quot;: 720, \u0026quot;errors\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;modules\u0026quot;: [ \u0026quot;qitmeer\u0026quot;, \u0026quot;miner\u0026quot;, \u0026quot;test\u0026quot; ] } 结果说明：  confirmations：代表非coinbase交易的UXTO可以被花费的最小确认数，当前的共识的最小确认数为10个确认。 coinbasematurity：代表coinbase交易的UXTO可以被花费的最小确认数，当前的共识是720个确认。 注：不论coinbase交易还是非coinbase交易，除了满足各自的最小确认条件外，还需要包含该交易的区块满足如下条件，才能满足该该交易的UTXO可花费：  1.）BlockDAG共识约束，即该区块为蓝色区块，详见见rpc isBule 2.）该区块为交易合法区块，即区块的txsvalid属性为true。详见rpc getBlockByOrder    "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getorphanstotal/",
	"title": "getOrphansTotal",
	"tags": [],
	"description": "",
	"content": "getOrphansTotal 函数名 getOrphansTotal 说明：无参数，得到当前节点的孤儿区块的数量。 孤儿区块指当前未关联到DAG中的区块。\n实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getOrphansTotal\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:null}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: null, \u0026quot;result\u0026quot;: 0 } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getpeerinfo/",
	"title": "getPeerInfo",
	"tags": [],
	"description": "",
	"content": "getPeerInfo 函数名：getPeerInfo 说明：无参数，取邻近节点信息 实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getPeerInfo\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:null}' https://127.0.0.1:18131 输出:\n[ { \u0026quot;uuid\u0026quot;: \u0026quot;f280f357-ee4a-4958-90bf-685d24129703\u0026quot;, \u0026quot;id\u0026quot;: 5, \u0026quot;addr\u0026quot;: \u0026quot;103.1.154.227:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56261\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576243, \u0026quot;lastrecv\u0026quot;: 1593576298, \u0026quot;bytessent\u0026quot;: 5029, \u0026quot;bytesrecv\u0026quot;: 7315, \u0026quot;conntime\u0026quot;: 1593575403, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;pingtime\u0026quot;: 371602, \u0026quot;version\u0026quot;: 20, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.0\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: false, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;0002cf49681506f5b9915c4fa199e76abc8a7d7ade9cafbe1cd1f84ec89e0704 main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21199, \u0026quot;mainheight\u0026quot;: 20730, \u0026quot;layer\u0026quot;: 20730 } }, { \u0026quot;uuid\u0026quot;: \u0026quot;b0c3462f-328d-45ba-8e3f-490c205eec85\u0026quot;, \u0026quot;id\u0026quot;: 6, \u0026quot;addr\u0026quot;: \u0026quot;47.103.61.128:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56262\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576298, \u0026quot;lastrecv\u0026quot;: 1593576299, \u0026quot;bytessent\u0026quot;: 2941, \u0026quot;bytesrecv\u0026quot;: 16892, \u0026quot;conntime\u0026quot;: 1593575403, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;pingtime\u0026quot;: 871878, \u0026quot;version\u0026quot;: 20, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.0\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: false, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;0002cf49681506f5b9915c4fa199e76abc8a7d7ade9cafbe1cd1f84ec89e0704 main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21199, \u0026quot;mainheight\u0026quot;: 20730, \u0026quot;layer\u0026quot;: 20730 } }, { \u0026quot;uuid\u0026quot;: \u0026quot;349a58ee-3537-4576-ba8a-925a27725070\u0026quot;, \u0026quot;id\u0026quot;: 7, \u0026quot;addr\u0026quot;: \u0026quot;106.15.102.183:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56284\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576254, \u0026quot;lastrecv\u0026quot;: 1593576298, \u0026quot;bytessent\u0026quot;: 1471, \u0026quot;bytesrecv\u0026quot;: 7965, \u0026quot;conntime\u0026quot;: 1593575414, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;pingtime\u0026quot;: 485255, \u0026quot;version\u0026quot;: 20, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.0\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: false, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;0002cf49681506f5b9915c4fa199e76abc8a7d7ade9cafbe1cd1f84ec89e0704 main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21199, \u0026quot;mainheight\u0026quot;: 20730, \u0026quot;layer\u0026quot;: 20730 } }, { \u0026quot;uuid\u0026quot;: \u0026quot;400176fd-8155-405c-ae4f-032948581558\u0026quot;, \u0026quot;id\u0026quot;: 8, \u0026quot;addr\u0026quot;: \u0026quot;148.70.34.136:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56413\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576307, \u0026quot;lastrecv\u0026quot;: 1593576308, \u0026quot;bytessent\u0026quot;: 1757, \u0026quot;bytesrecv\u0026quot;: 11162, \u0026quot;conntime\u0026quot;: 1593575465, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;pingtime\u0026quot;: 830143, \u0026quot;version\u0026quot;: 20, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.0\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: false, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;0002cf49681506f5b9915c4fa199e76abc8a7d7ade9cafbe1cd1f84ec89e0704 main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21199, \u0026quot;mainheight\u0026quot;: 20730, \u0026quot;layer\u0026quot;: 20730 } }, { \u0026quot;uuid\u0026quot;: \u0026quot;1df6c4ca-dae0-4632-bdb2-d9ef916b7580\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;addr\u0026quot;: \u0026quot;104.224.174.141:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56182\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576333, \u0026quot;lastrecv\u0026quot;: 1593576333, \u0026quot;bytessent\u0026quot;: 4259, \u0026quot;bytesrecv\u0026quot;: 1214, \u0026quot;conntime\u0026quot;: 1593575373, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;pingtime\u0026quot;: 244235, \u0026quot;version\u0026quot;: 20, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.0\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: false, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;3b3b4e71e7ab837635da8442afb98ba4092a2df62cf25e59a58bda518ce81fca main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21065, \u0026quot;mainheight\u0026quot;: 20597, \u0026quot;layer\u0026quot;: 20597 } }, { \u0026quot;uuid\u0026quot;: \u0026quot;a8383106-45dc-4028-ae04-74d25ad09f7d\u0026quot;, \u0026quot;id\u0026quot;: 2, \u0026quot;addr\u0026quot;: \u0026quot;144.202.90.65:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56177\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576333, \u0026quot;lastrecv\u0026quot;: 1593576333, \u0026quot;bytessent\u0026quot;: 5178, \u0026quot;bytesrecv\u0026quot;: 8411, \u0026quot;conntime\u0026quot;: 1593575373, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;pingtime\u0026quot;: 259579, \u0026quot;version\u0026quot;: 20, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.0\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: true, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;0002cf49681506f5b9915c4fa199e76abc8a7d7ade9cafbe1cd1f84ec89e0704 main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21199, \u0026quot;mainheight\u0026quot;: 20730, \u0026quot;layer\u0026quot;: 20730 } }, { \u0026quot;uuid\u0026quot;: \u0026quot;277d5f3f-3af3-486e-92ca-8da59eaa6db9\u0026quot;, \u0026quot;id\u0026quot;: 4, \u0026quot;addr\u0026quot;: \u0026quot;122.112.245.133:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56180\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576333, \u0026quot;lastrecv\u0026quot;: 1593576334, \u0026quot;bytessent\u0026quot;: 1692, \u0026quot;bytesrecv\u0026quot;: 9459, \u0026quot;conntime\u0026quot;: 1593575373, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;pingtime\u0026quot;: 414095, \u0026quot;version\u0026quot;: 20, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.0\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: false, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;0002cf49681506f5b9915c4fa199e76abc8a7d7ade9cafbe1cd1f84ec89e0704 main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21199, \u0026quot;mainheight\u0026quot;: 20730, \u0026quot;layer\u0026quot;: 20730 } }, { \u0026quot;uuid\u0026quot;: \u0026quot;38d8647f-371d-47c6-924b-ddfe32391a83\u0026quot;, \u0026quot;id\u0026quot;: 3, \u0026quot;addr\u0026quot;: \u0026quot;103.29.70.78:18130\u0026quot;, \u0026quot;addrlocal\u0026quot;: \u0026quot;10.198.1.66:56175\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;00000009\u0026quot;, \u0026quot;relaytxes\u0026quot;: true, \u0026quot;lastsend\u0026quot;: 1593576333, \u0026quot;lastrecv\u0026quot;: 1593576334, \u0026quot;bytessent\u0026quot;: 2421, \u0026quot;bytesrecv\u0026quot;: 6656, \u0026quot;conntime\u0026quot;: 1593575373, \u0026quot;timeoffset\u0026quot;: -1, \u0026quot;pingtime\u0026quot;: 345824, \u0026quot;version\u0026quot;: 21, \u0026quot;subver\u0026quot;: \u0026quot;qitmeer:0.9.1\u0026quot;, \u0026quot;inbound\u0026quot;: false, \u0026quot;banscore\u0026quot;: 0, \u0026quot;syncnode\u0026quot;: false, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;0002cf49681506f5b9915c4fa199e76abc8a7d7ade9cafbe1cd1f84ec89e0704 main\u0026quot; ], \u0026quot;mainorder\u0026quot;: 21199, \u0026quot;mainheight\u0026quot;: 20730, \u0026quot;layer\u0026quot;: 20730 } } ] "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/gettips/",
	"title": "getTips",
	"tags": [],
	"description": "",
	"content": "getTips 函数名 getTips 说明：得到Tip Block列表 Tips列表是当前节点的DAG图的Tips Block的hash列表\n实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;tips\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:null}' https://127.0.0.1:18131 { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: null, \u0026quot;result\u0026quot;: [ \u0026quot;83d98f64ff6517e5899a1c392d91c334ae77a8c7705cd3ca0b147a6470d8eb08\u0026quot;, \u0026quot;00001ae85f5c90cc2f1f9ae5b1ac148145555d884f2c7d986cb3df250c8c3ecc\u0026quot; ] } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/isblue/",
	"title": "isBlue",
	"tags": [],
	"description": "",
	"content": "isBlue 函数名：isBlue {blockhash} 说明：通过节点判断该块是否为蓝色区块  blockhash：区块hash  结果说明：  0:为红色区块，该块coinbase不能交易 1:为蓝色区块，该块的coinbase可以交易 2:还不能确定是蓝色或红色，待确认  实例1 $ curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;isBlue\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0003409cc9bcfc328630982797326e62135d6fc2431db7b85c2a0fe38ff5749c\u0026quot;],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: 2 } 实例2 可以观察到对于是否蓝色区块的判断结果，由2变为1。即由不能确认变为蓝色区块。\n$ date Wed Jul 1 12:23:39 CST 2020 $ curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;isBlue\u0026quot;,\u0026quot;params\u0026quot;: [\u0026quot;0003409cc9bcfc328630982797326e62135d6fc2431db7b85c2a0fe38ff5749c\u0026quot;],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: 1 } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/isonmainchain/",
	"title": "isOnMainChain",
	"tags": [],
	"description": "",
	"content": "isOnMainChain 函数名 isOnMainChain {blockhash} 说明：判断该block是否在主链上 实例 curl -s -k -u test:test -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;isOnMainChain\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0011cc2a9cea757a2aaa235f27f41f00e3e2ed87282175fe76767c4f50b3aa05\u0026quot;],\u0026quot;id\u0026quot;:1}' https://127.0.0.1:18131 输出\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: \u0026quot;true\u0026quot; } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/wallet-json-rpc-api/wallet/dumpprivkey/",
	"title": "dumpPrivKey",
	"tags": [],
	"description": "",
	"content": "wallet_dumpPrivKey 导出地址的私钥\nParameters  addr: (string) 地址  Returns Example Request {\u0026#34;id\u0026#34;:1574829854509,\u0026#34;method\u0026#34;:\u0026#34;wallet_dumpPrivKey\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;Tmh3je9zbnHAvPfwwHhQsFSJmKkeRTtKqmV\u0026#34;]} Response "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/sendrawtransaction/",
	"title": "sendRawTransaction",
	"tags": [],
	"description": "",
	"content": "sendRawTransaction 发送交易\n参数  hexTx: (hex string) 已签名的交易十进制数据 allowHighFees: (bool, default=false) 是否允许高额交易费  返回 (hex string) 错误  签名错误  示例    { \u0026#34;code\u0026#34;: -32000, \u0026#34;message\u0026#34;: \u0026#34;Rule Error : Rejected transaction c69ea9d7457379984d5a0af0568f296289ec791bbd522d2f6057924ed12b8089: failed to validate input c69ea9d7457379984d5a0af0568f296289ec791bbd522d2f6057924ed12b8089:0 which references output {cfd933e4590a3cfbcf94e9220c77834fe8a869414c51e3bd0ce5af23592e80f9 0} - verify failed (input script bytes 47304402203aa2f8bcfac55e76b84320a119dcd73955e2c644abe590b8ce99abaf7bf51f5902205e973da66669d80009d6f5d848dd0bed50abf1b69acd43eda02bdb6cfdd0157f012102e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92, prev output script bytes 76a914844d0a82845bccd469afc5cb78d8ffaa3142edea88ac)\u0026#34; } exceed high fee  示例    { \u0026#34;code\u0026#34;: -32000, \u0026#34;message\u0026#34;: \u0026#34;Deserialization Error : rejected: failed to process transaction 0766b6dfd578952f52842cc4fb72f95f40258ee8aadff41897567a82c2b92e71: transaction 0766b6dfd578952f52842cc4fb72f95f40258ee8aadff41897567a82c2b92e71 has 420995400 fee which is above the allowHighFee check threshold amount of 20100000 (= 201 byte * 10000 AtomMEER/kB * 10000)\u0026#34; } 示例 请求 curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;sendRawTransaction\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;0100000001f9802e5923afe50cbde3514c4169a8e84f83770c22e994cffb3c0a59e433d9cf01000000ffffffff01804a5d05000000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac00000000000000001141cb5f016b483045022100b8ab0acf7f282e167669e3f20920c81b06554bc1fd5b41c4dd44ab4f3319a92f02200b664f920c77a7d8ac695380c22ec3131e2bd8f27617f84883fe9cf6d6bea0a1012102e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92\u0026#34;, true],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:18131 | jq 返回 { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;0766b6dfd578952f52842cc4fb72f95f40258ee8aadff41897567a82c2b92e71\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/reference/qxtools/",
	"title": "Qx 工具集",
	"tags": [],
	"description": "",
	"content": "qx user guide qx是一个命令行工具，它是bx命令的超集，为密钥管理和事务构造提供了各种命令。\nPrerequisites Update Go to version at least 1.12 (required \u0026gt;= 1.12)\nCheck your golang version\n~ go version go version go1.12 darwin/amd64 How to build ~ mkdir -p /tmp/work ~ cd /tmp/work ~ git clone https://github.com/Qitmeer/qx.git ~ cd qx ~ go build ~ ./qx --version Qx Version : \u0026#34;0.0.1\u0026#34; qx Commands ~ qx Usage: qx [--version] [--help] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] encode and decode : base58-encode encode a base16 string to a base58 string base58-decode decode a base58 string to a base16 string base58check-encode encode a base58check string base58check-decode decode a base58check string base64-encode encode a base16 string to a base64 string base64-encode encode a base64 string to a base16 string rlp-encode encode a string to a rlp encoded base16 string rlp-decode decode a rlp base16 string to a human-readble representation hash : blake2b256 calculate Blake2b 256 hash of a base16 data. blake2b512 calculate Blake2b 512 hash of a base16 data. sha256 calculate SHA256 hash of a base16 data. sha3-256 calculate SHA3 256 hash of a base16 data. keccak-256 calculate legacy keccak 256 hash of a bash16 data. blake256 calculate blake256 hash of a base16 data. ripemd160 calculate ripemd160 hash of a base16 data. bitcion160 calculate ripemd160(sha256(data)) hash160 calculate ripemd160(blake2b256(data)) entropy (seed) \u0026amp; mnemoic \u0026amp; hd \u0026amp; ec entropy generate a cryptographically secure pseudorandom entropy (seed) hd-new create a new HD(BIP32) private key from an entropy (seed) hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key hd-to-public derive the HD (BIP32) public key from a HD private key hd-decode decode a HD (BIP32) private/public key serialization format hd-derive Derive a child HD (BIP32) key from another HD public or private key. mnemonic-new create a mnemonic world-list (BIP39) from an entropy mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39) mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed ec-new create a new EC private key from an entropy (seed). ec-to-public derive the EC public key from an EC private key (the compressed format by default ) ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default. wif-to-ec convert a WIF private key to an EC private key. wif-to-public derive the EC public key from a WIF private key. addr \u0026amp; tx \u0026amp; sign ec-to-addr convert an EC public key to a paymant address. default is nox address tx-encode encode a unsigned transaction. tx-decode decode a transaction in base16 to json format. tx-sign sign a transactions using a private key. msg-sign create a message signature msg-verify validate a message signature signature-decode decode a ECDSA signature Encoding Commands Encode/Decocde Qitmeer address \u0026amp; private/pubkey\nbase58-encode  encode a base16 string to a base58 string  Example ~ qx base58-decode RmCYoUMqKZopUkai2YhUFHR9UeqjeyjTAgW # base16 string 0df144d959afb6db4ad730a6e2c0daf46ceeb98c53a059cd6527  base58-decode  decode a base58 string to a base16 string  Example ~ qx base58-decode 1234567890abcdef # base58 string 43c9JGZmRvE  base58check-encode  base16 string into Qitmeer or BTC address.  ~ qx base58check-encode Usage: qx base58check-encode [-v \u0026lt;ver\u0026gt;] [hexstring] -a string base58check hasher -c int base58check checksum size (default 4) -v version base58check version [mainnet|testnet|privnet|btcmainnet|btctestnet|btcregressionnet] (default privnet) Example # create qitmeer privnet address by base16 ~ qx base58check-encode c1c3092d17c917c2799c041aeaeac18822772149 # base58 string RmPwHCuC2m6gvz9TnVLapHySk1ZU72FTSru # create btc testnet address by base16 ~ qx base58check-encode -v btctestnet c1c3092d17c917c2799c041aeaeac18822772149 # base58 string myBUMQTmZGK8yKLDranjSQEHbCYCaaywQD "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/reference/",
	"title": "命令行参考",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/",
	"title": "Qitmeer JSON RPC 说明",
	"tags": [],
	"description": "",
	"content": "Qitmeer JSON RPC 命令列表  getBlockByOrder getBlockByNum getBlock getBlockV2 getBlockHeader getBlockCount getBlockTotal getBlockBestHash getBlockhashByRange isOnMainChain getMainChainHeight getOrphansTotal getTips getMempool getPeerInfo getNodeInfo isBlue getFees getRawTransaction sendRawTransaction  "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/cn/json-rpc-api/getrawtransaction/",
	"title": "getRawTransaction",
	"tags": [],
	"description": "",
	"content": "getRawTransaction get raw transaction by ID\nParameters  txid: (hex string) 256-bit transaction ID verbose: (bool , default=false) When the verbose flag isn\u0026rsquo;t set, simply return the serialized transaction as a hex-encoded string.  Returns verbose = true rawTx: (hex string)\nverbose = false Tx: (object)\nExample Request curl -s -k -u test:test -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;getRawTransaction\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;c259a4dfb7eaaae92ab246f14762541581671135cd6030ac29d8c34cf77e9f32\u0026#34;,true],\u0026#34;id\u0026#34;:1}\u0026#39; https://127.0.0.1:18131 Response { \u0026#34;hex\u0026#34;: \u0026#34;0100000001dc7d54db024a1ef06e38b85ab01af2d60043e3d36b5411691224c05dcf36f63c01000000ffffffff02659ca300000000001976a91406e2097d585337cdd10aefa09994b511127af0bb88acf0e8cd6f230200001976a914fe27c90d4ed4de3269c0bb9ae1d7639865e3bf2888ac00000000000000008015fc5e016b48304502210090910aa0190a6571319b0b638bfbb593582575703abdd4f1a7f0da2812cda7d102205dae6fee28396bfeb8f1b814884d8d03ab0dd9f30b171d906c24914ba2f85b1a012103cd4fa2ea2688ac9e0a62584635244f572d22c13730d5576722d6571aabfddca8\u0026#34;, \u0026#34;txid\u0026#34;: \u0026#34;c259a4dfb7eaaae92ab246f14762541581671135cd6030ac29d8c34cf77e9f32\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;9b603ba3b17fd8491749ac366a5064d8b7b70be02568e405406a9acd70e971a8\u0026#34;, \u0026#34;size\u0026#34;: 235, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;timestamp\u0026#34;: \u0026#34;2020-07-01T12:48:00+08:00\u0026#34;, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ { \u0026#34;txid\u0026#34;: \u0026#34;3cf636cf5dc024126911546bd3e34300d6f21ab05ab8386ef01e4a02db547ddc\u0026#34;, \u0026#34;vout\u0026#34;: 1, \u0026#34;sequence\u0026#34;: 4294967295, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;304502210090910aa0190a6571319b0b638bfbb593582575703abdd4f1a7f0da2812cda7d102205dae6fee28396bfeb8f1b814884d8d03ab0dd9f30b171d906c24914ba2f85b1a01 03cd4fa2ea2688ac9e0a62584635244f572d22c13730d5576722d6571aabfddca8\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;48304502210090910aa0190a6571319b0b638bfbb593582575703abdd4f1a7f0da2812cda7d102205dae6fee28396bfeb8f1b814884d8d03ab0dd9f30b171d906c24914ba2f85b1a012103cd4fa2ea2688ac9e0a62584635244f572d22c13730d5576722d6571aabfddca8\u0026#34; } } ], \u0026#34;vout\u0026#34;: [ { \u0026#34;amount\u0026#34;: 10722405, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 06e2097d585337cdd10aefa09994b511127af0bb OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a91406e2097d585337cdd10aefa09994b511127af0bb88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;TmPaUYQuUtfCysrYVHc4AdhpVHxw7EskHTP\u0026#34; ] } }, { \u0026#34;amount\u0026#34;: 2351222876400, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 fe27c90d4ed4de3269c0bb9ae1d7639865e3bf28 OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a914fe27c90d4ed4de3269c0bb9ae1d7639865e3bf2888ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;Tmn7vzzSrvAPNLtwpD5YjiWwVUBD74Hjdww\u0026#34; ] } } ], \u0026#34;confirmations\u0026#34;: 0 } "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/",
	"title": "Qitmeer 技术文档",
	"tags": [],
	"description": "",
	"content": "Qitmeer 技术文档  Qitmeer 文档，开发手册，指南以及教程\n文档列表  Qitmeer JSON RPC 说明 命令行参考  QX工具集    "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/cn/wallet-json-rpc-api/",
	"title": "Wallet JSON RPC APIs",
	"tags": [],
	"description": "",
	"content": ""
}]