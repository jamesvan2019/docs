[
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/txsign/address/",
	"title": "address",
	"tags": [],
	"description": "",
	"content": "ec-to-addr convert an EC public key to a paymant address. default is qx address.\n~ qx ec-to-addr --help Usage: qx ec-to-addr [ec_public_key] -v version base58check version [mainnet|testnet|privnet] (default testnet) creat testnet address ~ qx ec-to-addr 034d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70 TmPip5CkA4e3fBRp7eo9onDYfVnba547uts # be equivalent to ~ qx ec-to-public 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 | qx ec-to-addr creat mainnet address ~ qx ec-to-addr -v mainnet 034d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70 NmH2v9uqS9ZwwXvHf1K129pJSi5qTSpXAv6 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/encode_decode/qxbase58/",
	"title": "base58",
	"tags": [],
	"description": "",
	"content": "base58-encode encode a base16 string to a base58 string\nExample ~ qx base58-encode 1234567890abcdef # base58 string 43c9JGZmRvE  base58-decode decode a base58 string to a base16 string\nExample 1 ~ qx base58-decode RmCYoUMqKZopUkai2YhUFHR9UeqjeyjTAgW # base16 string 0df144d959afb6db4ad730a6e2c0daf46ceeb98c53a059cd6527 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/contribute-docs/",
	"title": "Contribute Docs",
	"tags": [],
	"description": "",
	"content": "Qitmeer is an Open-Source community and welcome everyone to give contribution with their own talent. In addition to coding, documentation is also an important work to share knowledge with the community. Here are the steps how we share our expererience of Qitmeer.\nInstall Hugo Qitmeer Docs is powered by Hugo static web generator, it could convert Markdown articles to HTML pages. Therefore, you could focus on content authoring and let Hugo handle website styling and management. Besides, the generated HTML pages are staic, which means they are secure and fast to load.\nYou may install Hugo by budiling from source code.\n$ mkdir $HOME/src $ cd $HOME/src $ git clone https://github.com/gohugoio/hugo.git $ cd hugo $ go install $ hugo version hugo v0.92.0-DEV darwin/amd64 BuildDate=unknown Or follow this tutorial to install a prebuilt version.\nhttps://gohugo.io/getting-started/installing\nDepoit Qitmeer Docs locally First, you need to fork Qitmeer Docs repo (\u0026quot;https://github.com/qitmeer/docs\u0026quot;) to your own github namespace, which is \u0026ldquo;https://github.com/forchain/docs\u0026rdquo; in this case.\nThen, download source code and launch web server:\n$ git clone https://github.com/forchain/docs ~/github.com/forchain/docs $ cd ~/github.com/forchain/docs/Document $ hugo serve ... Web Server is available at http://localhost:1313/docs/ (bind address 127.0.0.1) Press Ctrl+C to stop Open browser and test website is accesible. Address: http://localhost:1313/docs/\n Figure1. Launch Qitmeer Docs\n New document file We need to create a subfolder under the content folder and then new a file named _index.en.md inside it.\nYou may complete those steps by one Hugo command:\n# ensure you are under path ./Document $ hugo new content/tutorials/contribute-docs/_index.en.md Note  the name of the subfolder must be in hyphen-case style, in this case, \u0026ldquo;contribute-docs\u0026rdquo; the en part indicates the language, you may subsititue with other languages, for instance, cn stands for Chinese. Or you may drop this part to disable the multiple language support, then it would be like \u0026ldquo;_index.md\u0026rdquo; The parts of the path are in line with the sitemap in the the left panel, for this case, this article is placed under Tutorials category.   Figure 2. Doc category\n Add link in index page There is an index page include all the links under each category, it is located at the parent folder of the containing folder of document, which is content/tutorials/_index.en.md for this tutorial.\n- [Contribute Docs](./contribute-docs) Note  it is a relative link to the containing folder The link cannot contain whitespaces, that\u0026rsquo;s why the naming style of the containing folder must be hyper-case.  Edit document Front Matter From the file extension \u0026ldquo;.md\u0026rdquo;, we could infer that it is a markdown document. Actually, it is an extented markdown file. We need to add some annoation in the front of the file, we could this \u0026ldquo;Front Matter\u0026rdquo;.\nFor this tutorial, it would be:\n--- title: Contribute Qitmeer Docs # Represents the sorting position of the sidebar weight: 1 # According to the serial number pre: \u0026#34;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026#34; # When true, the page paragraph is displayed in the center chapter: true # This option needs to be set if the page has formula content mathjax: true --- The essential configuration item is \u0026ldquo;title\u0026rdquo;, which is \u0026ldquo;Contribute Qitmeer Docs\u0026rdquo; in this case. You may modify other config items if needed, such as \u0026ldquo;weight\u0026rdquo;, \u0026ldquo;chapter\u0026rdquo;, \u0026hellip;, the comments above.\nMarkdown Content Below the front matter separator \u0026lsquo;\u0026mdash;\u0026rsquo;, you may fill the content of articles with markdown format. For this tutorial as example, it would be:\n... mathjax: true --- Qitmeer is an Open-Source community and welcome everyone to give contribution with their own talent. In addition to coding, documentation is also an important work to share knowledge with the community. Here are the steps how we share our expererience of Qitmeer. ## Install Hugo ... Note Hugo will insert the title configured in Front Matter, so we should NOT add title in the content.\nImages The markdown is a text file and cannot embed images, therfore you should upload the images in a specified folder and add links to them.\nFor this tutorial, we already two figures. We make a folder under \u0026ldquo;Document/static/images\u0026rdquo;, let\u0026rsquo;s say \u0026ldquo;contribute-docs\u0026rdquo; for placing images dedicated to this tutorial, then move the images from their original folder to the newly created folder.\n$ mkdir -p Document/static/images/contribute-docs $ mv \u0026#34;/Users/Outlier/Library/Application Support/typora-user-images/image-20211218192001885.png\u0026#34; Document/static/images/contribute-docs/launch-website.png $ mv \u0026#34;/Users/Outlier/Library/Application Support/typora-user-images/image-20211220190939112.png\u0026#34; Document/static/images/contribute-docs/doc-category.png At last, replace the image links with new path. Note, the path should be a website absolute path rather than a local path, leading by \u0026ldquo;/image\u0026rdquo;.\nTherefore, find the two links in the file of this document:\n![Launch Docs](/Users/Outlier/Library/Application Support/typora-user-images/image-20211218192001885.png) ![Doc category](/Users/Outlier/Library/Application Support/typora-user-images/image-20211220190939112.png) Replace them with respectively:\n![Launch Docs](/images/contribute-docs/launch-website.png) ![Doc category](/images/contribute-docs/doc-category.png) Submit documents Qitmeer has a workflow to automate the tedious work of publishing in GitHub Pages, see:\nhttps://github.com/Qitmeer/docs/blob/master/.github/workflows/gh-pages.yml.\nTherfore, all you have to do is just submit the changes to Github and make pull request to the upstream branch.\n$ git add . $ git commit -m\u0026#34;contribute qitmeer docs\u0026#34; $ git push "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/development-environment/",
	"title": "Development Environment",
	"tags": [],
	"description": "",
	"content": "This tutorial covers most qitmeer applications, including qitmeer, qitmeer-cli, qitmeer-miner, etc.\nShell and package manager A uniform command style and a handy package manager will greatly increase efficiency.\nWindows Since windows commands are not in unix-like style, so it is strongly command to install Msys2, which presents a unix shell and a package manager (pacman). It would provide consistent experience as Mac or Ubuntu do.\n Download and install msys2 from http://repo.msys2.org/distrib/x86_64/msys2-x86_64-20190524.exe Find and run \u0026ldquo;MSYS2 MSYS\u0026rdquo; in Start Menu to MSYS2 shell Run following command to setup system environment variables  export PATH=/mingw64/bin:$PATH export LD_LIBRARY_PATH=/mingw64/lib:$LD_LIBRARY_PATH # update packages, it may ask you to re-open a terminal to process # repeat this instruction until no packages to update pacman -Syu Mac Mac is a Unix based OS, we just need to install the package manager.\n/usr/bin/ruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34; brew update brew upgrade Ubuntu Ubuntu has build-in package manager apt, just update to the latest state\nsudo apt update sudo apt upgrade Install Requisite Before install Qitmeer, we need install git and golang.\nWindows pacman -S git mingw64/mingw-w64-x86_64-go export GOROOT=/mingw64/lib/go export GOPATH=/mingw64 Mac brew install git go "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/encode_decode/",
	"title": "Encoding Commands",
	"tags": [],
	"description": "",
	"content": "Instructions encode and decode : base58-encode encode a base16 string to a base58 string base58-decode decode a base58 string to a base16 string base58check-encode encode a base58check string base58check-decode decode a base58check string base64-decode decode a base16 string to a base64 string base64-encode encode a base64 string to a base16 string rlp-encode encode a string to a rlp encoded base16 string rlp-decode decode a rlp base16 string to a human-readble representation "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/entropy/seed/",
	"title": "entropy",
	"tags": [],
	"description": "",
	"content": "entropy generate a cryptographically secure pseudorandom entropy (seed).\nWARNING: Pseudorandom seeding can introduce cryptographic weakness into your keys. This command is provided as a convenience.\n ~ qx entropy --help Usage: qx entropy [-s size] -s uint The length in bits for a seed (entropy) (default 256) Example 1 ~ qx entropy 492ac7d4d0eb37eda0a9f40a4dee41acb3df0260502a616ac0baa8838c75c0a6 Example 2 # 1024 bit seed ~ qx entropy -s 1024 819f7ad8b044aa076af96155eb85cd3581043065476530d1f4fc0e1ea812f42e484d34f976a726fe6e4cf6269a4f5c7b311407f3657cc33205f4170d5bf2b026708eefde3c64d02571d1de6193d3ac2c03888bed613e278713d72957613e3da34b60dec43bfdd475e460d53628b5ec3c9ecfc24fadf8486461a99e396bd5181d "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/exchange-lib/",
	"title": "Exchange API/SDK",
	"tags": [],
	"description": "",
	"content": "This tutorial explains how exchanges can use the Exchange service to send transactions.\nHow to use 1.Start a Qitmeer node  Docker\nFollow Qitmeer Installation to install docker Build from Source\nFollow Qitmeer_GetStart to build from Source  2.Start the Exchange service git clone https://github.com/Qitmeer/exchange-lib.git cd exchange-lib/exchange go build vim config.toml [api] # Configure the service listening port listen=\u0026#34;0.0.0.0:11360\u0026#34; # Qitmeer Node RPC [rpc] host=\u0026#34;127.0.0.1:8131\u0026#34; # If the node is configured with -notls, TLS = false tls=true admin=\u0026#34;test\u0026#34; password=\u0026#34;test\u0026#34; [sync] # Start sync from block order start=0 # How many confirmations UTXO are available confirmations=5 # The address to be synchronized address=[ \u0026#34;TnNbgxLpoPJCLTcsJbHCzpzcHUouTtfbP8c\u0026#34;, \u0026#34;TnU8gXq9xHFrfchwk2bjyGHR2HMswANsVU5\u0026#34;, ] [log] # console=12 | file=11 mode=12 # debug=0 | info=1 | warn=2 | fail=3 | error=4 | email=5 level=0 # Log directory path=\u0026#34;logs\u0026#34; ./exchange 3.Create qitmeer address  Create by exchange-lib, example  import ( \u0026#34;github.com/qitmeer/exchange-lib/address\u0026#34; ) func createAddress() (string, error){ ecPrivate, err := address.NewEcPrivateKey() if err != nil{ return \u0026#34;\u0026#34;, err } ecPublic, err := address.EcPrivateToPublic(ecPrivate) if err != nil{ return \u0026#34;\u0026#34;, err } return address.EcPublicToAddress(ecPublic, \u0026#34;mainnet\u0026#34;) }   Create by qitmeer-js\nFollow qitmeer-js to create address\n  Create by qx\nFollow qxtools to create address\n  4.Add an ADDRESS to the Exchange service curl --location --request POST \u0026#39;127.0.0.1:11360/api/v1/address\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;address\u0026#34;:\u0026#34;TnNbgxLpoPJCLTcsJbHCzpzcHUouTtfbP8c\u0026#34; }\u0026#39; 5.Query the UTXO of an address curl --location --request GET \u0026#39;127.0.0.1:11360/api/v1/utxo?address=TnNbgxLpoPJCLTcsJbHCzpzcHUouTtfbP8c\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; { \u0026#34;code\u0026#34;: 0, \u0026#34;msg\u0026#34;: \u0026#34;ok\u0026#34;, \u0026#34;rs\u0026#34;: { \u0026#34;balance\u0026#34;: 100000000000, \u0026#34;utxo\u0026#34;: [ { \u0026#34;txid\u0026#34;: \u0026#34;b9abd7a213b490f088370dbc0d6eef8cd39541ac305cfae782b0b75ccb148b5f\u0026#34;, \u0026#34;vout\u0026#34;: 0, \u0026#34;address\u0026#34;: \u0026#34;TnNbgxLpoPJCLTcsJbHCzpzcHUouTtfbP8c\u0026#34;, \u0026#34;coin\u0026#34;: \u0026#34;MEER\u0026#34;, \u0026#34;amount\u0026#34;: 50136986301, \u0026#34;spent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;height\u0026#34;: 0, \u0026#34;lock\u0026#34;: 0, \u0026#34;iscoinbase\u0026#34;: true, \u0026#34;pkhex\u0026#34;: \u0026#34;76a914785bfbf4ecad8b72f2582be83616c5d364a3244288ac\u0026#34; }, { \u0026#34;txid\u0026#34;: \u0026#34;b9abd7a213b490f088370dbc0d6eef8cd39541ac305cfae782b0b75ccb148b5f\u0026#34;, \u0026#34;vout\u0026#34;: 1, \u0026#34;address\u0026#34;: \u0026#34;TnNbgxLpoPJCLTcsJbHCzpzcHUouTtfbP8c\u0026#34;, \u0026#34;coin\u0026#34;: \u0026#34;MEER\u0026#34;, \u0026#34;amount\u0026#34;: 49863013699, \u0026#34;spent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;height\u0026#34;: 0, \u0026#34;lock\u0026#34;: 0, \u0026#34;iscoinbase\u0026#34;: true, \u0026#34;pkhex\u0026#34;: \u0026#34;02400bb17576a914785bfbf4ecad8b72f2582be83616c5d364a3244288ac\u0026#34; } } } 6.Create transaction example import ( \u0026#34;github.com/Qitmeer/qitmeer/qx\u0026#34; \u0026#34;github.com/qitmeer/exchange-lib/exchange/db\u0026#34; \u0026#34;time\u0026#34; ) func createTransaction(private string, utxos []db.UTXO, to string, amount int64) (string, error){ var inputs []qx.Input var privateList, pkHexList []string var vinAmount int64 = 0 var from string for _, utxo := range utxos{ from = utxo.Address vinAmount += int64(utxo.Amount) inputs = append(inputs, qx.Input{ TxID: utxo.TxId, OutIndex: uint32(utxo.Vout), }) privateList = append(privateList, private) pkHexList = append(pkHexList, utxo.PkHex) if vinAmount \u0026gt; amount{ break } } outputs := map[string]qx.Amount{ to: { TargetLockTime: 0, Value: amount, Id: 0, }, } txFees := (len(inputs) - 1 * 1600 + 2000 + (len(outputs) + 1) * 400) * 2 change := vinAmount - amount - int64(txFees) outputs[from] = qx.Amount{ TargetLockTime: 0, Value: change, Id: 0, } now := time.Now() txRaw, err := qx.TxEncode(1, 0, \u0026amp;now, inputs, outputs) if err != nil{ return \u0026#34;\u0026#34;, err } return qx.TxSign(privateList, txRaw, \u0026#34;mainnet\u0026#34;, pkHexList) } 7.Send transaction curl --location --request POST \u0026#39;127.0.0.1:11360/api/v2/transaction\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;raw\u0026#34;:\u0026#34;0100000001029bf740dc1ddb2147c55d779ff3f1b171e2fc94e0efc489d064d5fbf4cc61dc01000000ffffffff02000000e1f505000000001976a914caf0e6f1e0b174131b33bba3ffb3510027230ff588ac0000331e420f000000001976a914caf0e6f1e0b174131b33bba3ffb3510027230ff588ac751f0200000000007aaf9161016a47304402202aaeb8227533bcbc7a5cba30e8ffffeb247c16b55671e9085f74c3ada648db3802200388b7db48f17626746e6d2f9c9fe571d3de17567d8d9bffca1797df0998b7e50121026c3f92961caa80e0b6a9f534040ac32c3c084cbff71897ff59ed6ac550b15228\u0026#34; }\u0026#39; "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getbestblockhash/",
	"title": "getBestBlockHash",
	"tags": [],
	"description": "",
	"content": "getBestBlockHash Returns the hash of the of the best (most recent) block in the longest block chain.\nParameters None\nReturns (string) - best block hash Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBestBlockHash\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 Response \u0026#34;000005c905e232a3320c35e38ec2a7f8f9d03e3cc28faef007cc46f273835f4b\u0026#34; "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblock/",
	"title": "getBlock",
	"tags": [],
	"description": "",
	"content": "getBlock Returns information about a block given its hash.\nParameters  hash: (string) the hash of the block. verbose: (boolean, optional, default=false) specifies the block is returned as a JSON object instead of hex-encoded string. inclTx: (boolean, optional, default=true) whether or not include transactions. fullTx: (boolean, optional, default=true) specifies that each transaction is returned as a JSON object .  Returns (object,inclTx=false) not show   hash, confirmations, version, parentsroot, difficulty, pow\n reference getBlockHeader    weight: (numeric) the weight of the block.\n  height: (numeric) the height of the block in the block DAG.\n  order: (numeric) the global order of the block.\n  bits: (numeric) the bits which represent the block difficulty.\n  timestamp: (string) block created time (ISO 8601 format).\n  parents: (string) blocks that are referenced from this block\n  children: (string) blocks that reference to this block\n  (object, inclTx=true, fullTx=false) show hash list of transactions  all fields with inclTx=false transactions: (array of string) transaction hashes  (object, inclTx=true, fullTx=true) transaction details  all fields with inclTx=false transactions: (array of object) transaction object  hex: (string) hex-encoded transaction / hex-encoded bytes of the script. txid: (string) the hash of the transaction WITHOUT signature. txhash: (string) the hash of the transaction WITH signature. size: (numeric) transaction size. version: (enum) transaction version.  1 coinbase transaction 2 ordinary transaction   locktime: (numeric) the transaction lock time, cannot be spent before lock time. expire: (numeric) expired block height, tx cannot be spent after it. vin: (array of json objects) the transaction inputs as json objects.  coinbase: (string) the hex-encoded bytes of the signature script. sequence: (numeric) the script sequence number.   vout: (array of json objects) the transaction outputs as json objects.  amount: (numeric) the value in QIT. scriptPubKey: (json object) the public key script used to pay coins.  asm: (string) disassembly of the script. hex: (string) hex-encoded bytes of the script. reqSigs: (numeric) the number of required signatures. type: (string) the type of the script (e.g. \u0026lsquo;pubkeyhash\u0026rsquo;). addresses: (json array of string) the addresses associated with this output.        Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlock\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;11dbd3e6202f41eba102277bdb65adff82899219a870295ed8424b7c035af0f3\u0026#34;, true, true, false],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response { \u0026#34;hash\u0026#34;: \u0026#34;11dbd3e6202f41eba102277bdb65adff82899219a870295ed8424b7c035af0f3\u0026#34;, \u0026#34;txsvalid\u0026#34;: true, \u0026#34;confirmations\u0026#34;: 31785, \u0026#34;version\u0026#34;: 11, \u0026#34;weight\u0026#34;: 474, \u0026#34;height\u0026#34;: 1, \u0026#34;txRoot\u0026#34;: \u0026#34;7b73360b8099c1c4e91ab63ee71210202a802592491a90f0fd5c1275a5556d3d\u0026#34;, \u0026#34;order\u0026#34;: 1, \u0026#34;transactions\u0026#34;: [ { \u0026#34;hex\u0026#34;: \u0026#34;010000000152868a9025d93bfa3948f8396c4779f735dcae7940d9e648555349c854c85cf8ffffffffffffffff01007841cb020000001976a9143be2e1e7eaffe6ee4c90d5db043576df7f2e174b88ac00000000000000000144510852fdfc072182654d1430353537373030363739313934373737393431302465316438316561652d313263662d343932302d623735312d323833383336616333306265\u0026#34;, \u0026#34;txid\u0026#34;: \u0026#34;7b73360b8099c1c4e91ab63ee71210202a802592491a90f0fd5c1275a5556d3d\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;e67a6d03533120d6fb280620caadcf3a47dee028d8ede9dbb6eef91b06bb336d\u0026#34;, \u0026#34;size\u0026#34;: 158, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ { \u0026#34;coinbase\u0026#34;: \u0026#34;510852fdfc072182654d1430353537373030363739313934373737393431302465316438316561652d313263662d343932302d623735312d323833383336616333306265\u0026#34;, \u0026#34;sequence\u0026#34;: 4294967295 } ], \u0026#34;vout\u0026#34;: [ { \u0026#34;amount\u0026#34;: 12000000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 3be2e1e7eaffe6ee4c90d5db043576df7f2e174b OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a9143be2e1e7eaffe6ee4c90d5db043576df7f2e174b88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;TmUQjNKPA3dLBB6ZfcKd4YSDThQ9Cqzmk5S\u0026#34; ] } } ], \u0026#34;blockhash\u0026#34;: \u0026#34;11dbd3e6202f41eba102277bdb65adff82899219a870295ed8424b7c035af0f3\u0026#34;, \u0026#34;confirmations\u0026#34;: 31785 } ], \u0026#34;stateRoot\u0026#34;: \u0026#34;0000000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;bits\u0026#34;: \u0026#34;2018000\u0026#34;, \u0026#34;difficulty\u0026#34;: 33652736, \u0026#34;pow\u0026#34;: { \u0026#34;pow_name\u0026#34;: \u0026#34;cuckaroo\u0026#34;, \u0026#34;pow_type\u0026#34;: 1, \u0026#34;nonce\u0026#34;: 526, \u0026#34;proof_data\u0026#34;: { \u0026#34;edge_bits\u0026#34;: 24, \u0026#34;circle_nonces\u0026#34;: \u0026#34;7a8e09004e040a00f6850e00582a1200d96613006fc91a000ca11c00f78124001b613600c266370037ef430073915000bbf85500b0795600691e5d00c7b35f0048bc670048897c00c50a7d006f22820038029100f4819a005864a6000aa9a600b5f0aa008169b200d1b4bb004cbfc100a32ac3001d6ac70045a1c900a95ecc002e55d70077ffd800a451d9007b38db00ab79e100dc14e600c5b6e9000efff0006821fa007650fb00\u0026#34; } }, \u0026#34;timestamp\u0026#34;: \u0026#34;2019-12-30T15:55:42+08:00\u0026#34;, \u0026#34;parentroot\u0026#34;: \u0026#34;caf26cf7705c0917bfb157150ab29f196465daf83c8ac1c82553aa9f207bd584\u0026#34;, \u0026#34;parents\u0026#34;: [ \u0026#34;caf26cf7705c0917bfb157150ab29f196465daf83c8ac1c82553aa9f207bd584\u0026#34; ], \u0026#34;children\u0026#34;: [ \u0026#34;0ea57734fc4baeb7fb8669a7e52b948fb94277a3f0a08caaf25592c7fef7c965\u0026#34; ] } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblockbynum/",
	"title": "getBlockByNum",
	"tags": [],
	"description": "",
	"content": "getBlockByNum Returns information about a block given its local resource number.\nParameters  block Number: (numeric, required) the local resource number of the block, resource number doesn\u0026rsquo;t reach consensus on the network, it is generated by each node when accepting a new block. verbose: (boolean, optional, default=false) reference getBlock. inclTx: (boolean, optional, default=true) reference getBlock. fullTx: (boolean, optional, default=true) reference getBlock.  Returns reference getBlock\nExample Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlockByNum\u0026#34;,\u0026#34;params\u0026#34;:[2, true, true, false],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response reference getBlock\n"
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblockbyorder/",
	"title": "getBlockByOrder",
	"tags": [],
	"description": "",
	"content": "getBlockByOrder Returns information about a block given its global order.\nParameters  block ID: (numeric, required) the local resource ID of the block, resource ID doesn\u0026rsquo;t reach consensus on the network, it is generated by each node when accepting a new block. verbose: (boolean, optional, default=false) reference getBlock. inclTx: (boolean, optional, default=true) reference getBlock. fullTx: (boolean, optional, default=true) reference getBlock.  Returns reference getBlock\nExample Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlockByID\u0026#34;,\u0026#34;params\u0026#34;:[2, true, true, false],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response reference getBlock\n"
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblockcount/",
	"title": "getBlockCount",
	"tags": [],
	"description": "",
	"content": "getBlockCount Returns the number of stable blocks .\nParameters None\nReturns  (numeric) number of blocks, the network should have reached consensus on this number  Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlockCount\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response 34787\n"
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblockhash/",
	"title": "getBlockhash",
	"tags": [],
	"description": "",
	"content": "getBlockhash Returns hash of the block at the given order.\nParameters  block order (numeric, required)  Returns  (string) block hash  Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlockhash\u0026#34;,\u0026#34;params\u0026#34;:[2],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblockhashbyrange/",
	"title": "getBlockhashByRange",
	"tags": [],
	"description": "",
	"content": "getBlockhashByRange Returns hash of the block at the given order.\nParameters  start order (numeric, required) end order (numeric, required)  Returns  (array of string) list of block hashes  Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlockhashByRange\u0026#34;,\u0026#34;params\u0026#34;:[1, 9],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response [ \u0026#34;11dbd3e6202f41eba102277bdb65adff82899219a870295ed8424b7c035af0f3\u0026#34;, \u0026#34;0ea57734fc4baeb7fb8669a7e52b948fb94277a3f0a08caaf25592c7fef7c965\u0026#34;, \u0026#34;03879bf60c08cca7885790661e0e96147fc0012428d6b326eb5ffb2eb0f3b073\u0026#34;, \u0026#34;18917e39ec36a68843024b9212934a3a8b23d3f5629987d0565fb74c7683f13b\u0026#34;, \u0026#34;0385e16851b36983a1110e8cbf9885005e76a38be0983a2520e72c06da98f590\u0026#34;, \u0026#34;030fcf757bef879016095dd6ef40503418758632d4817ef5a20fd7ab87c427c7\u0026#34;, \u0026#34;1f876a43c630c3f0e065668ff12b88a0403bd8f9aa790b39f6982428c7c46272\u0026#34;, \u0026#34;1cdcbe73bfc539086296df62a92cd027b89d01d370826b2ac763fc3997dc7e8a\u0026#34; ] "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblockheader/",
	"title": "getBlockHeader",
	"tags": [],
	"description": "",
	"content": "GetBlockHeader Returns hex-encoded bytes of the serialized block header.\nParameters  block hash: (string) the hash of the block. verbose: (boolean) specifies the block header is returned as a JSON object instead of a hex-encoded string.  Returns (object) deserialized block data   hash: (string) the hash of the block (same as provided).\n  confirmations: (numeric) the number of confirmations.\n  version: (numeric) the block version.\n  parentsroot: (string) The merkle root of the previous parent blocks (the dag layer)\n  txRoot: (string) the root of the transaction trie of the block.\n  stateRoot: (string) the root of the final state trie of the block.\n  difficulty: (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\n  pow: (object) mining info\n  pow_name: (string) mining algorithm name.\n Options  blak2bd: double blak2b, CPU based cuckroo: ASIC proof, GPU based cucktoo: ASIC friendly, GPU based      pow_type: (numeric) mining algorithm type.\n Options  0: blake2bd 1: cuckroo 2: cucktoo      nonce: (numeric) - the block nonce.\n  proof_data: (object) - cuckroo algorithm proof\n \u0026ldquo;edge_bits\u0026rdquo;: (numeric) - number of edge bit, the bigger the harder \u0026ldquo;circle_nonces\u0026rdquo;: (string) - circle nonces, raw proof data    hash: (string) the hash of the block (same as provided).\n  confirmations: (numeric) the number of confirmations.\n  version: (numeric) the block version.\n  layer: (string) length of the longest path from genesis to this block\n  time: (string) the block time in seconds since 1 Jan 1970 GMT.\n  (string) hex-encoded bytes of the serialized block Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlockHeader\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;11dbd3e6202f41eba102277bdb65adff82899219a870295ed8424b7c035af0f3\u0026#34;, true],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response { \u0026#34;hash\u0026#34;: \u0026#34;11dbd3e6202f41eba102277bdb65adff82899219a870295ed8424b7c035af0f3\u0026#34;, \u0026#34;confirmations\u0026#34;: 32263, \u0026#34;version\u0026#34;: 11, \u0026#34;parentroot\u0026#34;: \u0026#34;caf26cf7705c0917bfb157150ab29f196465daf83c8ac1c82553aa9f207bd584\u0026#34;, \u0026#34;txRoot\u0026#34;: \u0026#34;7b73360b8099c1c4e91ab63ee71210202a802592491a90f0fd5c1275a5556d3d\u0026#34;, \u0026#34;stateRoot\u0026#34;: \u0026#34;0000000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;difficulty\u0026#34;: 33652736, \u0026#34;layer\u0026#34;: 1, \u0026#34;time\u0026#34;: 1577692542, \u0026#34;pow\u0026#34;: { \u0026#34;pow_name\u0026#34;: \u0026#34;cuckaroo\u0026#34;, \u0026#34;pow_type\u0026#34;: 1, \u0026#34;nonce\u0026#34;: 526, \u0026#34;proof_data\u0026#34;: { \u0026#34;edge_bits\u0026#34;: 24, \u0026#34;circle_nonces\u0026#34;: \u0026#34;7a8e09004e040a00f6850e00582a1200d96613006fc91a000ca11c00f78124001b613600c266370037ef430073915000bbf85500b0795600691e5d00c7b35f0048bc670048897c00c50a7d006f22820038029100f4819a005864a6000aa9a600b5f0aa008169b200d1b4bb004cbfc100a32ac3001d6ac70045a1c900a95ecc002e55d70077ffd800a451d9007b38db00ab79e100dc14e600c5b6e9000efff0006821fa007650fb00\u0026#34; } } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblocktemplate/",
	"title": "getBlockTemplate",
	"tags": [],
	"description": "",
	"content": "GetBlockTemplate Gets a block template for use with mining software.\nParameters  capabilities: (array of enum): client side supported feature. Note: coinbasetxn and coinbasevalue are mutually exclusive.  coinbasetxn information for coinbase transaction, miningaddr is required in node config. coinbasevalue maximum allowable input to coinbase transaction    Returns (object, capabilities=[\u0026quot;coinbasetxn\u0026quot;])  stateroot: (string) the root of the final state trie of the block. curtime: (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT). height: (numeric) the height of the block in the block DAG. blues: (numeric) blue set size of block\u0026rsquo;s past set, previousblockhash: (string) The merkle root of the previous parent blocks (the dag layer) sigoplimit: (numeric) limit of sigops in blocks sizelimit: (numeric) limit of block size weightlimit: (numeric) limit of block weight parents: (array of object) list of parent hashes  data: (string) parent hash encoded in hexadecimal (byte-for-byte) hash: (string) parent hash encoded in little-endian hexadecimal   transactions: (array of object) list of transaction  data: (string) transaction data encoded in hexadecimal (byte-for-byte) hash: (string) hash encoded in little-endian hexadecimal (including witness data) depends: (array of numeric) transactions before this one (by 1-based index in \u0026lsquo;transactions\u0026rsquo; list) that must be present in the final block if this one is fee: (numeric) difference in value between transaction inputs and outputs (in QITs); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn\u0026rsquo;t one sigops: (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero weight: (numeric) total transaction weight, as counted for purposes of block limits   version: (numeric) The preferred block version coinbaseaux: (object) data that should be included in the coinbase\u0026rsquo;s scriptSig content  flags: (string) key name is to be ignored, and value included in scriptSig   coinbasevalue: (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in QITs) longpollid: (string) template ID, the format is \u0026ldquo;parent root - generate time\u0026rdquo; pow_diff_reference: (object) - mining difficulty  blake2bd_bits: (string): double blake2b compressed target of next block, blake2bd_target: (string): double blake2b hash target of next block, cuckaroo_min_diff: (numeric): cuckaroo min difficulty cuckatoo_min_diff: (numeric): cuckatoo min difficulty   maxtime: (numeric) The maximum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT) mintime: (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT) mutable: (array of string) list of ways the block template may be changed, including \u0026lsquo;time\u0026rsquo;, \u0026lsquo;transactions/add\u0026rsquo;, \u0026lsquo;prevblock\u0026rsquo;, \u0026ldquo;coinbase/append\u0026rdquo; noncerange :(string) A range of valid nonces capabilities :(array of string) list of capabilities, not implemented yet, only \u0026lsquo;proposal\u0026rsquo; always listed  (object, capabilities=[\u0026quot;coinbasevalue\u0026quot;]) - best block hash almost identical to result of capabilities = coinbasevalue, just coinbasevalue and coinbaseaux substituted with coinbasetxn\n coinbasetxn: (object) information for coinbase transaction, data structure is identical to transactions field  Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBestBlockHash\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 Response { \u0026#34;stateroot\u0026#34;: \u0026#34;0000000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;curtime\u0026#34;: 1578717731, \u0026#34;height\u0026#34;: 34902, \u0026#34;blues\u0026#34;: 37478, \u0026#34;previousblockhash\u0026#34;: \u0026#34;000028f561e25022c4c0bbf1b08943da39ef1a134556c742a5b2c8accd3d3fd6\u0026#34;, \u0026#34;sigoplimit\u0026#34;: 80000, \u0026#34;sizelimit\u0026#34;: 1048576, \u0026#34;weightlimit\u0026#34;: 4000000, \u0026#34;parents\u0026#34;: [ { \u0026#34;data\u0026#34;: \u0026#34;d63f3dcdacc8b2a542c75645131aef39da4389b0f1bbc0c42250e261f5280000\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;000028f561e25022c4c0bbf1b08943da39ef1a134556c742a5b2c8accd3d3fd6\u0026#34; } ], \u0026#34;transactions\u0026#34;: [], \u0026#34;version\u0026#34;: 11, \u0026#34;coinbasetxn\u0026#34;: { \u0026#34;data\u0026#34;: \u0026#34;0100000001905e3ac0bc4050ce1ba4c4b4fc6cef8f2d6a8e1e3b49917ca65641b0feb21c20ffffffffffffffff01007841cb020000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac0000000000000000011703568800082ad99948a98c989f092f7169746d6565722f\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;fcb7e486a557dbe69b8bd0bf2f5602fb8c22ee2ddc6ad4a5070a8c261f182ede\u0026#34;, \u0026#34;depends\u0026#34;: [], \u0026#34;fee\u0026#34;: 0, \u0026#34;sigops\u0026#34;: 1, \u0026#34;weight\u0026#34;: 0 }, \u0026#34;longpollid\u0026#34;: \u0026#34;000028f561e25022c4c0bbf1b08943da39ef1a134556c742a5b2c8accd3d3fd6-1578717731\u0026#34;, \u0026#34;pow_diff_reference\u0026#34;: { \u0026#34;blake2bd_bits\u0026#34;: \u0026#34;1c1fffff\u0026#34;, \u0026#34;blake2bd_target\u0026#34;: \u0026#34;000000001fffff00000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;cuckaroo_min_diff\u0026#34;: 12718848, \u0026#34;cuckatoo_min_diff\u0026#34;: 1856 }, \u0026#34;maxtime\u0026#34;: 1578724931, \u0026#34;mintime\u0026#34;: 1578717707, \u0026#34;mutable\u0026#34;: [ \u0026#34;time\u0026#34;, \u0026#34;transactions/add\u0026#34;, \u0026#34;prevblock\u0026#34;, \u0026#34;coinbase/append\u0026#34; ], \u0026#34;noncerange\u0026#34;: \u0026#34;00000000ffffffff\u0026#34;, \u0026#34;capabilities\u0026#34;: [ \u0026#34;proposal\u0026#34; ] } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getblocktotal/",
	"title": "getBlockTotal",
	"tags": [],
	"description": "",
	"content": "GetBlockTotal Return the total number blocks that this dag currently owned\nParameters None\nReturns (numeric) total number Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getBlockTotal\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response 34970 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getcoinbase/",
	"title": "getCoinbase",
	"tags": [],
	"description": "",
	"content": "GetCoinbase Return the coin base data of given block\nParameters  block hash: (string) block hash verbose: (bool, default: false) whether or not show mining info  Returns (array of string, verbose=true)  (hex string) block height (hex string) nonce (hex string) custom data 1, filled by miner, ASCII string (hex string) custom data 2 \u0026hellip;  (array of string, verbose=false) total number  (hex string) custom data 1, filled by miner, ASCII string (hex string) custom data 2 \u0026hellip;  Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getCoinbase\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response [ \u0026#34;01\u0026#34;, \u0026#34;52fdfc072182654d\u0026#34;, \u0026#34;3035353737303036373931393437373739343130\u0026#34;, # \u0026#34;05577006791947779410\u0026#34; \u0026#34;65316438316561652d313263662d343932302d623735312d323833383336616333306265\u0026#34; # \u0026#34;e1d81eae-12cf-4920-b751-283836ac30be\u0026#34; ] "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getmainchainheight/",
	"title": "getMainChainHeight",
	"tags": [],
	"description": "",
	"content": "getMainChainHeight Return the current height of DAG main chain\nParameters None\nReturns (array of string, verbose=true)  (hex string) block height (hex string) nonce (hex string) custom data 1, filled by miner, ASCII string (hex string) custom data 2 \u0026hellip;  (array of string, verbose=false) total number  (hex string) custom data 1, filled by miner, ASCII string (hex string) custom data 2 \u0026hellip;  Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getMainChainHeight\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response 32522 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getnodeinfo/",
	"title": "getNodeInfo",
	"tags": [],
	"description": "",
	"content": "getNodeInfo Return info of requested node\nParameters None\nReturns  result: object  ID: (string) - mutipleaddress ID version: (numeric) - The version of the node as a numeric. buildversion: (string) - build version protocolversion: (numeric) - The protocol version of the node. totalsubsidy: (numeric) - total subsidy to be mined graphstate: (object) - graph state of DAG  tips: (array) - array of tips, no referenced blocks mainorder: (string) - order of main chain mainheight: (numeric) - height of main chain layer: (numeric) - max height of all blocks   timeoffset: (numeric) - The node clock offset in seconds connections: (numeric) - number of connections pow_diff: (object) - difficulty of POW  current_diff: (numeric) - current difficulty   confirmations: (numeric) - number of blocks to wait for safe confirmation coinbasematurity: (numeric) - number of blocks to wait for coinbase to be spent modules: (array) - loaded modules; qitmeer, miner, test by default network: (string) - current network connections: (numeric) - current connections    Example Request\ncurl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getNodeInfo\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; https://127.0.0.1:18131 | jq Response\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;ID\u0026#34;: \u0026#34;16Uiu2HAmJq8eGgj7aUE9DANQUssg6b4T1jRJDq4tvwKjnCZKk1cE\u0026#34;, \u0026#34;address\u0026#34;: [ \u0026#34;/ip4/10.0.0.6/tcp/18150/p2p/16Uiu2HAmJq8eGgj7aUE9DANQUssg6b4T1jRJDq4tvwKjnCZKk1cE\u0026#34;, ], \u0026#34;version\u0026#34;: 100300, \u0026#34;buildversion\u0026#34;: \u0026#34;0.10.3+dev-1742484\u0026#34;, \u0026#34;protocolversion\u0026#34;: 33, \u0026#34;totalsubsidy\u0026#34;: 991716000000000, \u0026#34;graphstate\u0026#34;: { \u0026#34;tips\u0026#34;: [ \u0026#34;e6787427f5f4704eed0651181c4f3341fb1acaf1cbc63b215865da22ea6442b6 main\u0026#34;, \u0026#34;3b7b986370bc4cf5d6c14102ef2c198ff23e1e5b8e883208a0c1c8440e9f04f9\u0026#34; ], \u0026#34;mainorder\u0026#34;: 114143, \u0026#34;mainheight\u0026#34;: 48694, \u0026#34;layer\u0026#34;: 49908 }, \u0026#34;timeoffset\u0026#34;: -1, \u0026#34;pow_diff\u0026#34;: { \u0026#34;current_diff\u0026#34;: 2933.93160025 }, \u0026#34;confirmations\u0026#34;: 10, \u0026#34;coinbasematurity\u0026#34;: 720, \u0026#34;modules\u0026#34;: [ \u0026#34;qitmeer\u0026#34;, \u0026#34;miner\u0026#34;, \u0026#34;test\u0026#34;, \u0026#34;log\u0026#34; ], \u0026#34;network\u0026#34;: \u0026#34;testnet\u0026#34;, \u0026#34;connections\u0026#34;: 21 } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getorphanstotal/",
	"title": "getOrphansTotal",
	"tags": [],
	"description": "",
	"content": "GetOrphansTotal Return the total of orphans. Orphans are blocks with parents missing.\nParameters None\nReturns (numeric) number of orphans Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getOrphansTotal\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response 0 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getpeerinfo/",
	"title": "getPeerInfo",
	"tags": [],
	"description": "",
	"content": "getPeerInfo Returns data about each connected network peer as an array of json objects.\nParameters None\nReturns  result: array  uuid: (string) - global peer ID id: (numeric) - local peer ID addr: (string) the ip address and port of the peer. addrlocal: (string) - local IP address and port bound to connect peer services: (string) the services supported by the peer. relaytxes: (bool) - if relay transactions lastsend: (numeric) - time the last message was sent in seconds since 1 Jan 1970 GMT. lastrecv: (numeric) - time the last message was received in seconds since 1 Jan 1970 GMT. bytessent: (numeric) - total bytes sent bytesrecv: (numeric) - total bytes received conntime: (numeric) - time the connection was made in seconds since 1 Jan 1970 GMT. pingtime: (numeric) number of microseconds the last ping took. version: (numeric) the protocol version of the peer. subver: (string) the user agent of the peer. inbound: (boolean) whether or not the peer is an inbound connection. syncnode: (boolean) whether or not the peer is the sync peer. graphstate: (object) - graph state of DAG  tips: (array) - array of tips, no referenced blocks mainorder: (string) - order of main chain mainheight: (numeric) - height of main chain layer: (numeric) - max height of all blocks      startingheight: (numeric) the latest block height the peer knew about when the connection was established. currentheight: (numeric) the latest block height the peer is known to have relayed since connected.\nExample Request\ncurl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;getPeerInfo\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 | jq Response\n[ { \u0026#34;uuid\u0026#34;: \u0026#34;3917cbb8-a910-4bf6-b82e-dd9f191f9c20\u0026#34;, \u0026#34;id\u0026#34;: 218, \u0026#34;addr\u0026#34;: \u0026#34;104.224.174.141:18130\u0026#34;, \u0026#34;addrlocal\u0026#34;: \u0026#34;192.168.50.170:58733\u0026#34;, \u0026#34;services\u0026#34;: \u0026#34;00000009\u0026#34;, \u0026#34;relaytxes\u0026#34;: true, \u0026#34;lastsend\u0026#34;: 1578465326, \u0026#34;lastrecv\u0026#34;: 1578465300, \u0026#34;bytessent\u0026#34;: 58077, \u0026#34;bytesrecv\u0026#34;: 39464, \u0026#34;conntime\u0026#34;: 1578462700, \u0026#34;timeoffset\u0026#34;: -291, \u0026#34;pingtime\u0026#34;: 218202, \u0026#34;version\u0026#34;: 19, \u0026#34;subver\u0026#34;: \u0026#34;qitmeer:0.8.5\u0026#34;, \u0026#34;inbound\u0026#34;: false, \u0026#34;banscore\u0026#34;: 0, \u0026#34;syncnode\u0026#34;: false, \u0026#34;graphstate\u0026#34;: { \u0026#34;tips\u0026#34;: [ \u0026#34;000060719d3b030a079daea3ae09f4317402df74af9a6520f9b54fa095cbd2fc main\u0026#34; ], \u0026#34;mainorder\u0026#34;: 28867, \u0026#34;mainheight\u0026#34;: 26478, \u0026#34;layer\u0026#34;: 26479 } } ] "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getutxo/",
	"title": "getUTXO",
	"tags": [],
	"description": "",
	"content": "getUTXO Returns information about an unspent transaction output\nParameters  txid (string, required) The hash of the transaction vout (numeric, required) The index of the output includemempool (boolean, optional, default=true) Include the mempool when true  Returns { \u0026#34;bestblock\u0026#34;: \u0026#34;value\u0026#34;, (string) The block hash that contains the transaction output \u0026#34;confirmations\u0026#34;: n, (numeric) The number of confirmations \u0026#34;amount\u0026#34;: n.nnn, (numeric) The transaction amount \u0026#34;scriptPubKey\u0026#34;: { (object) The public key script used to pay coins as a JSON object \u0026#34;asm\u0026#34;: \u0026#34;value\u0026#34;, (string) Disassembly of the script \u0026#34;hex\u0026#34;: \u0026#34;value\u0026#34;, (string) Hex-encoded bytes of the script \u0026#34;reqSigs\u0026#34;: n, (numeric) The number of required signatures \u0026#34;type\u0026#34;: \u0026#34;value\u0026#34;, (string) The type of the script (e.g. \u0026#39;pubkeyhash\u0026#39;) \u0026#34;addresses\u0026#34;: [\u0026#34;value\u0026#34;,...], (array of string) The qitmeer addresses associated with this script }, \u0026#34;coinbase\u0026#34;: true|false, (boolean) Whether or not the transaction is a coinbase } Example Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;getUtxo\u0026#34;,\u0026#34;params\u0026#34;: [\u0026#34;cfd933e4590a3cfbcf94e9220c77834fe8a869414c51e3bd0ce5af23592e80f9\u0026#34;, 0],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:18131 | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;bestblock\u0026#34;: \u0026#34;6161b884e8ceaab14f23906a6ad3b86598dfaecbd805507ae4af302b85a95b10\u0026#34;, \u0026#34;confirmations\u0026#34;: 143935, \u0026#34;amount\u0026#34;: 0.999326, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 844d0a82845bccd469afc5cb78d8ffaa3142edea OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a914844d0a82845bccd469afc5cb78d8ffaa3142edea88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;Tmb1dCAB8ixNC6d2VtdCYZuhXBVPbnRVi7y\u0026#34; ] }, \u0026#34;version\u0026#34;: 0, \u0026#34;coinbase\u0026#34;: false } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/instruction/",
	"title": "Instruction",
	"tags": [],
	"description": "",
	"content": "Build git clone https://github.com/qitmeer/qitmeer-wallet ~/github.com/qitmeer/qitmeer-wallet cd ~/github.com/qitmeer/qitmeer-wallet make build Config vi config.toml # make sure ui=false Run ./qitmeer-wallet web Call API Command # by cURL curl -k -u \u0026#34;${USER}:${PASSWORD}\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;${METHOD}\u0026#34;,\u0026#34;params\u0026#34;:[${PARAMS}],\u0026#34;id\u0026#34;:1}\u0026#39; ${API_URL} | jq Parameters  USER: (string) rpcUser in the config PASSWORD: (string) rpcPass in the config API_URL: (string) listeners in the config METHOD: (string) RPC call name PARAMS: (array) RPC call parameters  Example curl -k -u \u0026#34;user:password\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_createAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;account\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:38130/api | jq "
},
{
	"uri": "https://qitmeer.github.io/docs/en/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Bitcoin and Blockchain Bitcoin was born with revolution, and it opened a new world that currency issuance becomes open and fair by a cryptography-based decentralized payment network. With the arrival of 10-years birth of bitcoin, the blockchain infrastructure is facing various challenges from technical aspects. The underlying mechanism of Bitcoin, the blockchain, was found capable of playing a significant role in the financial field.\na blockchain is an immutable transaction database, which maintained by peer nodes which communicated with each other within a Peer-to-Peer distributed network. For each peer, which validate and apply transactions according to a consensus protocol. The transcations grouped into blocks that linked by a hash from one block to the preceding block, aka the chain of block which is the name of blockchain is comming from.\nQitmeer BlockDAG Qitmeer regards openness,fairness, fault tolerance, scalability as the core metrics to assess a promising blockchain paradigm, and a blockchain system achieved a desirable balance among these metrics is regarded as Classical Blockchain Setting.\nQitmeer use SPECTRE as its fundamental Consensus protocol. SPECTRE is a fast-confirmation and high-throughput BlockDAG protocol(Directed Acyclic Graph of blocks, a blockDAG), which guarantees high performance in a payment network. Additionally, Qitmeer introduces another high-throughput BlockDAG protocol GhostDAG, which is highlighted on unprecedentedly supporting transactions linearly ordering, to circumvent SPECTRE\u0026rsquo;s weak liveness and provide ordering service for the fair scheme of the reward system.\nQitmeer POW Qitmeer Consensus is compliant with Classical Blockchain Setting - it could enter and leave network freely by Proof-of-Work, and the collaboration model of DAG ledger guarantees that miners gain rewards consistent with their devotion, 50% faulty tolerance as secure as bitcoin, robust scalability that is only subject to physical network limit. The mining algorithm is also a vital source of fairness other than consensus algorithm per se. Cuckoo Ring is a graph theory based proof-of-work mining algorithm and is practically ASIC resistant due to memory-hard calculation.\nQitmeer token \u0026amp; Islamic financial ecosystem Qitmeer originates a UTXO-based unique token insurance scheme, which has effectively answered two main concerns: Intrinsic Value and Assets Authentication. Issuing a certain amount of assets must consume a certain amount of the native currency; moreover, entities must be warranted a license to issue assets.\nQitmeer devises a family of specifications and protocols to embrace the whole Islamic financial ecosystem, such as wallet and miners. As for interoperability, Qitmeer calls for utilizing cross-chain protocols to integrate various cryptocurrencies and offer reliable off-chain smart contract services.\nQitmeer mining difficulty adjustment "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/isblue/",
	"title": "isBlue",
	"tags": [],
	"description": "",
	"content": "isBlue Return the color of give block. Once block confirmed by main block, it is colored in line with consensus algorithm\nParameters  hash (string) block hash  Returns block color: (numeric)  Options  0  red: malfunctioning block, no block reward 1  blue: honest block, reward granted 2  cannot confirm: wait for confirmation by main block    Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;GetOrphansTotal\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response 0 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/iscurrent/",
	"title": "isCurrent",
	"tags": [],
	"description": "",
	"content": "isCurrent Returns if we are synced with our peers\nParameters None\nReturns (bool) whether or not synced Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;isCurrent\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response true "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/isonmainchain/",
	"title": "isOnMainChain",
	"tags": [],
	"description": "",
	"content": "isOnMainChain Query whether or not a given block is on the main chain.\nParameters  hash (string) block hash  Returns (bool) whether or not on the main chain Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;isOnMainChain\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;11dbd3e6202f41eba102277bdb65adff82899219a870295ed8424b7c035af0f3\u0026#34;],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response true "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/qitmeer-installation/",
	"title": "Qitmeer Installation",
	"tags": [],
	"description": "",
	"content": "Approach 1: Docker For most users, run Qitmeer with a docker is recommended since this would the easiest and fastest way to experience Qitmeer. No worry about the system requisite and no need to wait for compiling build.\nInstall docker Windows   Download and install package from: https://download.docker.com/win/stable/Docker%20Desktop%20Installer.exe\n  After installation, you need to logout and login again\n  Add current user to docker-users group\n open Local Users and Groups\nsearch \u0026ldquo;lusrmgr.msc\u0026rdquo; in Start Menu and Open it Follow the steps in Figure 1 to add current user to group, replace \u0026ldquo;Qitmeer\u0026rdquo; in step 3 with your account   Figure 1: Add current user to docker-users group\n  restart or re-login to make the new configuration take effect    Mac Download and install package from: https://download.docker.com/mac/stable/Docker.dmg\nUbuntu sudo apt-get install \\  apt-transport-https \\  ca-certificates \\  curl \\  software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\  \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs)\\ stable\u0026#34; sudo apt-get update sudo apt-get install docker-ce Run Qitmeer on Docker docker pull qitmeer/qitmeerd docker run -it -p 18130:18130 -p 18131:18131 qitmeer/qitmeerd --notls --rpcuser=test --rpcpass=test Approach 2: Build from source For developers or people with technical background, we also welcome you to build qitmeer from source\nSetup development environment Follow Development Environment\nInstall Qitmeer From this steps on, all the commands are consistent among all platforms\ngit clone https://github.com/Qitmeer/qitmeer ~//github.com/Qitmeer/qitmeer Run Qitmeer cd ~//github.com/Qitmeer/qitmeer git pull make Done building. qitmeer version 0.9.2+dev-7478571 (Go version go1.15.5)) Run \u0026#34;./build/bin/qitmeer\u0026#34; to launch. # once needs cleaning data or problems happened, please uncomment this line to clean data ./build/bin/qitmeer --testnet --notls --rpcuser=test --rpcpass=test "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/qitmeer-java-sdk/",
	"title": "Qitmeer Java SDK",
	"tags": [],
	"description": "",
	"content": "qitmeer-java-sdk  Connect RPC  private static Qitmeer q = new Qitmeer(\u0026#34;https://127.0.0.1:1234\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;); Get block count  ServiceResult result = q.getBlockCount(); if (result.code == 0) { System.out.println(\u0026#34;getBlockCount:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;getBlockCountFaild:\\r\\n\u0026#34; + result.msg); } Get block by order  ServiceResult result = q.getBlockByOrder(1, true); if (result.code == 0) { JSONObject recJson = JSON.parseObject(result.data.toString()); Block b = JSON.toJavaObject(recJson, Block.class); System.out.println(\u0026#34;getBlockByOrder:\\r\\n\u0026#34; + b.getHash()); } else { System.out.println(\u0026#34;getBlockByOrderFaild:\\r\\n\u0026#34; + result.msg); } Get block by hash  ServiceResult result = q.getBlockByHash(\u0026#34;\u0026#34;, true); if (result.code == 0) { JSONObject recJson = JSON.parseObject(result.data.toString()); Block b = JSON.toJavaObject(recJson, Block.class); System.out.println(\u0026#34;getBlockByhash:\\r\\n\u0026#34; + b.getHash()); } else { System.out.println(\u0026#34;getBlockByhashFaild:\\r\\n\u0026#34; + result.msg); } Get block header by hash  ServiceResult result = q.getBlockHeader(\u0026#34;\u0026#34;, true); if (result.code == 0) { JSONObject recJson = JSON.parseObject(result.data.toString()); BlockHeader b = JSON.toJavaObject(recJson, BlockHeader.class); System.out.println(\u0026#34;getBlockHeader:\\r\\n\u0026#34; + b.getHash()); } else { System.out.println(\u0026#34;getBlockHeaderFaild:\\r\\n\u0026#34; + result.msg); } Get block weight by hash  ServiceResult result = q.getBlockWeight(\u0026#34;\u0026#34;); if (result.code == 0) { System.out.println(\u0026#34;getBlockWeight:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;getBlockWeightFaild:\\r\\n\u0026#34; + result.msg); } Get block hash by order  ServiceResult result = q.getBlockHash(1); if (result.code == 0) { System.out.println(\u0026#34;getBlockHash:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;getBlockHashFaild:\\r\\n\u0026#34; + result.msg); } Get best block hash  ServiceResult result = q.getBestBlockHash(); if (result.code == 0) { System.out.println(\u0026#34;getBestBlockHash:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;getBestBlockHashFaild:\\r\\n\u0026#34; + result.msg); } Block is on main chain  ServiceResult result = q.isOnMainChain(\u0026#34;\u0026#34;]); if (result.code == 0) { System.out.println(\u0026#34;isOnMainChain:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;isOnMainChainFaild:\\r\\n\u0026#34; + result.msg); } Get utxo  ServiceResult result = q.getUtxo(\u0026#34;bae58ff3e0870938e241224fc8736998f5e8f6cf6423c383493bf13133e4d37d\u0026#34;, 0, true); if (result.code == 0) { JSONObject recJson = JSON.parseObject(result.data.toString()); Utxo b = JSON.toJavaObject(recJson, Utxo.class); System.out.println(\u0026#34;getUtxo:\\r\\n\u0026#34; + b.getCoinbase()); } else { System.out.println(\u0026#34;getUtxoFaild:\\r\\n\u0026#34; + result.msg); } Create Raw Transaction  FromTx u = new FromTx(); u.setTxid(\u0026#34;019edb774482a9f619ca02f949881c2c9616a48e014ad27668ee5e56b64182f9\u0026#34;); u.setVout(0); List\u0026lt;FromTx\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(u); ServiceResult result = q.createRawTransaction(list, \u0026#34;RmQb2VrPtd9nftMvKtRMxN297dzN5VydmMJ\u0026#34;, 10, 0); if (result.code == 0) { System.out.println(\u0026#34;createRawTransaction:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;createRawTransactionFaild:\\r\\n\u0026#34; + result.msg); } Decode Raw Transaction  ServiceResult result = q.decodeRawTransaction(\u0026#34;0100000001f98241b6565eee6876d24a018ea416962c1c8849f902ca19f6a9824477db9e0100000000ffffffff0100000a000000000000001976a9149887f352a02c4e60d99bcd2eab33c8b7b0198b0488ac00000000000000008214a3600100\u0026#34;); if (result.code == 0) { System.out.println(\u0026#34;decodeRawTransaction:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;decodeRawTransactionFaild:\\r\\n\u0026#34; + result.msg); } Get Raw Transaction By TxId  ServiceResult result = q.getRawTransaction(\u0026#34;bae58ff3e0870938e241224fc8736998f5e8f6cf6423c383493bf13133e4d37d\u0026#34;, true); if (result.code == 0) { JSONObject recJson = JSON.parseObject(result.data.toString()); TxRawResult b = JSON.toJavaObject(recJson, TxRawResult.class); System.out.println(\u0026#34;getRawTransaction:\\r\\n\u0026#34; + b.getTxid()); } else { System.out.println(\u0026#34;getRawTransactionFaild:\\r\\n\u0026#34; + result.msg); } Send Raw Transaction  ServiceResult result = q.sendRawTransaction(\u0026#34;0100000001f98241b6565eee6876d24a018ea416962c1c8849f902ca19f6a9824477db9e0100000000ffffffff0178000000000000001976a914bd4d1888cb054b2755d65d93c356573e4d283ead88ac00000000000000000100\u0026#34;, true); if (result.code == 0) { JSONObject recJson = JSON.parseObject(result.data.toString()); Utxo b = JSON.toJavaObject(recJson, Utxo.class); System.out.println(\u0026#34;sendRawTransaction:\\r\\n\u0026#34; + result.data.toString()); } else { System.out.println(\u0026#34;sendRawTransactionFaild:\\r\\n\u0026#34; + result.msg); } Get Peer Info  ServiceResult result = q.getPeerInfo(); if (result.code == 0) { List\u0026lt;PeerInfo\u0026gt; list = JSON.parseArray(result.data.toString(), PeerInfo.class); System.out.println(\u0026#34;getPeerInfo:\\r\\n\u0026#34; + list.size()); } else { System.out.println(\u0026#34;getPeerInfoFaild:\\r\\n\u0026#34; + result.msg); } Get Node Info  ServiceResult result = q.getNodeInfo(); if (result.code == 0) { JSONObject recJson = JSON.parseObject(result.data.toString()); NodeInfo b = JSON.toJavaObject(recJson, NodeInfo.class); System.out.println(\u0026#34;getNodeInfo:\\r\\n\u0026#34; + b.getUUID()); } else { System.out.println(\u0026#34;getNodeInfoFaild:\\r\\n\u0026#34; + result.msg); } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/qitmeer-js/",
	"title": "Qitmeer JS",
	"tags": [],
	"description": "",
	"content": "qitmeer-js 说明  安装  npm i qitmeer-js --save 导入  const qitmeer = require(\u0026#39;qitmeer-js\u0026#39;) 如何生成地址（随机数（助记词），私钥，公钥，地址）  const qitmeer = require(\u0026#39;qitmeer-js\u0026#39;) // 生成 随机数 npm i randombytes --save const randomBytes = require(\u0026#39;randombytes\u0026#39;) const secretKey = randomBytes(32) // \u0026lt;Buffer 3d 2b 7c e0 8b 12 be ed f3 12 88 2b bd fa 0d 58 22 ad 4c f2 b8 9a ad 84 24 2b 80 15 93 3d e6 16\u0026gt;  secretKey.toString(\u0026#39;hex\u0026#39;) // 3d2b7ce08b12beedf312882bbdfa0d5822ad4cf2b89aad84242b8015933de616  // 生成公钥 const keyPair = qitmeer.ec.fromPrivateKey( secretKey ) const publicKey = keyPair.publicKey // \u0026lt;Buffer 02 6c 21 c3 28 5b 26 be ed 8b 5c 8b f1 36 c4 9d fb bb 28 cf 6e b6 de a7 79 81 47 b8 98 93 8c 8f dc\u0026gt;  publicKey.toString(\u0026#39;hex\u0026#39;) // 026c21c3285b26beed8b5c8bf136c49dfbbb28cf6eb6dea7798147b898938c8fdc  // 生成地址 // 设置网络 mainnet【主网】, testnet【测试】, privnet【私有】 const network = qitmeer.networks.mainnet const hash160 = qitmeer.hash.hash160(keyPair.publicKey) const p2pkhAddress = qitmeer.address.toBase58Check(hash160, network.pubKeyHashAddrId) // NmcMJfyzyKbuD9Jy7ZPL6AGCUz5nfPaXBbx 如何签名一个交易（单个utxo，多个utxo）  const UTXO = { \u0026#34;vin\u0026#34;: [ { \u0026#34;txid\u0026#34;: \u0026#34;d46a58fced5a05b1dc1f4450e1bdf09696291348a7eccec069ed59343ec35b4d\u0026#34;, \u0026#34;vout\u0026#34;: 2, \u0026#34;sequence\u0026#34;: 4294967295, \u0026#34;amountin\u0026#34;: 45000000000, \u0026#34;blockheight\u0026#34;: 1, \u0026#34;txindex\u0026#34;: 0, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;3044022005422cf4f7a082fe931509b44aee54c3d3c80b1f0d43ed1483ffeb7248857fe402202b9c050ed0fbb9883c8ff98d8a48c33483b32ad776d6746365f9b8851e6dcda501 02abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;473044022005422cf4f7a082fe931509b44aee54c3d3c80b1f0d43ed1483ffeb7248857fe402202b9c050ed0fbb9883c8ff98d8a48c33483b32ad776d6746365f9b8851e6dcda5012102abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026#34; } }, { \u0026#34;txid\u0026#34;: \u0026#34;46a6d3d9e1ef552dc9b0eba147ea97e481654a2bccf59fd764652971cb4d9fdd\u0026#34;, \u0026#34;vout\u0026#34;: 2, \u0026#34;sequence\u0026#34;: 4294967295, \u0026#34;amountin\u0026#34;: 45000000000, \u0026#34;blockheight\u0026#34;: 2, \u0026#34;txindex\u0026#34;: 0, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;3045022100be434e16f4c83947b1a19fefbf319b7170b280c9a0d89c0786624a83bda337910220395753153ab55b21d7041705c75f42778d7846a41ca5cbb5b033f875d20a9f1501 02abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;483045022100be434e16f4c83947b1a19fefbf319b7170b280c9a0d89c0786624a83bda337910220395753153ab55b21d7041705c75f42778d7846a41ca5cbb5b033f875d20a9f15012102abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026#34; } } ], \u0026#34;vout\u0026#34;: [ { \u0026#34;amount\u0026#34;: 89000000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 69570a6c1fcb68db1b1c50b34960e714d42c7b9c OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a91469570a6c1fcb68db1b1c50b34960e714d42c7b9c88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34; } }, { \u0026#34;amount\u0026#34;: 990000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 c693f8fbfe6836f1fb55579b427cfc4fd2014953 OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a914c693f8fbfe6836f1fb55579b427cfc4fd201495388ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34; } } ], \u0026#34;blockheight\u0026#34;: 101, \u0026#34;confirmations\u0026#34;: 1 } const qitmeer = require(\u0026#39;qitmeer-js\u0026#39;) // 设置网络 mainnet【主网】, testnet【测试】, privnet【私有】 const network = qitmeer.networks.mainnet // 私钥 const secretKey = \u0026#39;3d2b7ce08b12beedf312882bbdfa0d5822ad4cf2b89aad84242b8015933de616\u0026#39; const keyPair = qitmeer.ec.fromPrivateKey( secretKey ) // 构造交易 const txb = qitmeer.txsign.newSigner( network ); // 设置打包时间，一般不用设置 txb.setLockTime(1573046495) UTXO.vin.map( {txid,txindex} =\u0026gt; { // txid: 交易id ， txindex: 交易序号  txb.addInput( txid,txindex); }) // 1 QIT = 100000000 MEER // 输入的 amount 总数减去输出总数等于手续费 txb.addOutput( \u0026#39;NmcMJfyzyKbuD9Jy7ZPL6AGCUz5nfPaXBbx\u0026#39;, 89900000000); txb.addOutput( \u0026#39;NmbiHCrN796d74wXccqzqYHBLawn7NHyRX6\u0026#39;, 80000000); utxo.map( (v,i) =\u0026gt; { txb.sign(i, keyPair); }) // 获取 交易体 const newTransaction = txb.build().toBuffer().toString(\u0026#39;hex\u0026#39;); // 计算收费 const BigNumber = require(\u0026#39;bignumber.js\u0026#39;) function getFee( tx, speed = \u0026#39;fast\u0026#39; ) { const size = tx.__tx.byteLength() const s = { fast: 2, normal: 1, slow: 0.6 } return BigNumber( size ).div(2).multipliedBy(5000).multipliedBy(s[speed]) } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/qitmeer-miner/",
	"title": "Qitmeer Miner",
	"tags": [],
	"description": "",
	"content": "Mining Tutorial Table of Contents  Prequisite  Common Linux  Ubuntu Centos   macOS Windows   Build  Windows-additional step [Linux-additional step](#Linux-additional step)   Usage  Run with config file Command line usage   FAQ  How to create Qitmeer adderss Which POW algorithm I should choose to mine ? Where I can find more documentation ?    Prequisite Common  Git Go version \u0026gt;= 1.12  Linux Ubuntu $ sudo apt-get install beignet-dev nvidia-cuda-dev nvidia-cuda-toolkit Centos $ sudo yum install opencl-headers $ sudo yum install ocl-icd $ sudo ln -s /usr/lib64/libOpenCL.so.1 /usr/lib/libOpenCL.so MacOS Windows Install Build Tools for Visual Studio\nBuild 1. Get Source code $ git clone git@github.com:Qitmeer/qitmeer-miner.git 2. Install the cuckoo and opencl library $ cd qitmeer-miner $ sh installLibrary.sh 3. Build qitmeer-miner //# mac $ go build //# linux apt install musl-tools g++ -y $ CGO_ENABLED=1 CC=musl-gcc CXX=g++ GOOS=linux //# windows $ CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -ldflags \u0026#39;-extldflags \u0026#34;-static\u0026#34;\u0026#39; -o win-miner.exe main.go 4. Verify Build OK $ ./qitmeer-miner --version Windows-additional step Before step 3, do following\n$ copy lib/cuckoo/target/release/x86_64-pc-windows-gnu/cuckoo.lib to C:/mingw64/lib $ copy lib/opencl/windows/libOpenCL.a to C:/mingw64/lib Linux-additional step Before step 3, do following\n$ sudo copy lib/cuckoo/target/x86_64-unknown-linux-musl/release/libcuckoo.a /usr/lib/x86_64-linux-musl $ sudo copy lib/opencl/linux/libOpenCL.a /usr/lib/x86_64-linux-musl Usage Run with config file  go to your create a new config file by copying from the example config file.  $ cp example.solo.conf qitmeer-miner.conf edit the config file which your create, you might need to change the mineraddress. you need to create a Qitmeer address if you don\u0026rsquo;t have it. Please see FAQ run miner with the config file  $ ./qitmeer-miner -C qitmeer-miner.conf Command line usage The qitmeer-miner is a command line program. This means you can also launch it by provided valid command line options. For a full list of available command optinos, please run:\n$ ./qitmeer-miner --help Debug Command: -l, --listdevices List number of devices. The Config File Options: -C, --configfile= Path to configuration file --minerlog= Write miner log file The Necessary Config Options: -P, --pow= blake2bd|cuckaroo|cuckatoo (blake2bd) -S, --symbol= Symbol (PMEER) -N, --network= network privnet|testnet|mainnet (mainnet) The Solo Config Option: -M, --mineraddress= Miner Address -s, --rpcserver= RPC server to connect to (127.0.0.1) -u, --rpcuser= RPC username -p, --rpcpass= RPC password --randstr= Rand String,Your Unique Marking. (Come from Qitmeer!) --notls Do not verify tls certificates (true) --rpccert= RPC server certificate chain for validation The pool Config Option: -o, --pool= Pool to connect to (e.g.stratum+tcp://pool:port) -m, --pooluser= Pool username -n, --poolpass= Pool password The Optional Config Option: --cpuminer CPUMiner (false) --proxy= Connect via SOCKS5 proxy (eg. 127.0.0.1:9050) --proxyuser= Username for proxy server --proxypass= Password for proxy server --trimmerTimes= the cuckaroo trimmer times (40) --intensity= Intensities (the work size is 2^intensity) per device. Single global value or a comma separated list. (24) --worksize= The explicitly declared sizes of the work to do per device (overrides intensity). Single global value or a comma separated list. (256) --timeout= rpc timeout. (60) --use_devices= all gpu devices,you can use ./qitmeer-miner -l to see. examples:0,1 use the #0 device and #1 device --max_tx_count= max pack tx count (1000) --max_sig_count= max sign tx count (5000) --log_level= info|debug|error|warn|trace (debug) --stats_server= stats web server (127.0.0.1:1235) --edge_bits= edge bits (24) --local_size= local size (4096) --group_size= work group size (256) Help Options: -h, --help Show this help message Please see Qitmeer-Miner User References for more details\nFAQ How to create Qitmeer adderss There are several ways to create a Qitmeer address. you can use qx command , qitmeer-wallet, etc. The most easy way to download the kafh wallet, which provide a more user friendly GUI to create your address/wallet step by step.\nWhich POW algorithm I should choose to mine ? Qitmeer test network support mixing minning, which means your can choice from Cuckaroo, Cuckatoo and Blake2bd anyone you like. But the start difficulty targets are quite different. For the most case you might use Cuckaroo as a safe choice at the beginning.\nWhere I can find more documentation ? Please find more documentation from the Qitmeer doc site at https://qitmeer.github.io\n"
},
{
	"uri": "https://qitmeer.github.io/docs/en/intro/qitmeer-difficulty-description/",
	"title": "Qitmeer mining difficulty adjustment",
	"tags": [],
	"description": "",
	"content": "Base step of difficulty adjustment  Pick a window of N latest blocks. Pick a reference target or difficulty. It can be the one for the last block (all DigiShields) or the average over the last N blocks (*GravityWave, Zcash). Take the elapsed time between the last block and the block that\u0026rsquo;s N blocks before. The block time can be taken as-is (*GravityWave), or as a median of the X previous blocks to prevent time warp attacks (Zcash, Digishield). Potentially apply some dampening factor (Zcash, Digishield). Calculate the new target as the reference target, time the calculated elapsed time, divided by the ideal elapsed time. Bound by how much the new target can change compared to the previous (16% down, 8% up for Digishield, 32% down, 16% up for Zcash and 1/2 and x2 for AntiGravityWave) Return the min target if the obtained target is higher.  Qitmeer difficulty adjustment process (testnet param)  How many blocks are selected from the current block forward as a unit of calculation A = 144 Choose how many units to weigh to get the average B = 20 Block target limit time T = 120 (seconds) Three basic initial difficulty Diff1 = 0x1e00ffff, Diff2 = 1000, Diff3 = 1000 ACTUAL_TIME= (last block out time (or theoretical next block out time) - the first block out time in a unit Target block time fixed value TARGET_TIME = T * A = 144 * 120 for each unit (144 blocks) Adjustment = ACTUAL_TIME / TARGET_TIME, a unit of difficulty adjustment index, enlarges 2 ^ 32 times for accurate calculation. Adjustment = ACTUAL_TIME / TARGET_TIME* 2 ^ 32 All 20 units can be calculated as Adjustment 1, Adjustment 2\u0026hellip; Adjustment 20 According to the principle that the latest block time can best improve the computing power of the whole network, 20 blocks are weighted averaged and the average difficulty adjustment index is obtained. AVERAGE (Adjustment) = (Adjustment 1 * 2 ^ 20 + Adjustment 1 * 2 ^ 19 +\u0026hellip; Adjustment 1 * 2 ^ 1) /(2 ^ 20 + 2 ^ 19 +\u0026hellip; 2 ^ 1) The difficulty of the last block is the reference object oldDiff, the initial difficulty oldDiff = the basic initial difficulty The current difficulty value should be curDiff = oldDiff * AVERGE (Adjustment) / 2^ 32 If the current difficulty value curDiff \u0026lt; oldDiff/4, curDiff = oldDiff/4 If the current difficulty value curDiff \u0026gt; oldDiff * 4, curDiff = oldDiff * 4  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/qitmeer-wallet-rpc/",
	"title": "Qitmeer-wallet RPC",
	"tags": [],
	"description": "",
	"content": "Qitmeer-wallet RPC Reference Download Qitmeer Wallet from github.com/Qitmeer/qitmeer-wallet\n# run rpc or ul model will support rpc interface ./qitmeer-wallet web Usage:\nRPC interface URL http://127.0.0.1:38130/api\ncurl -k -u \u0026#34;user:password\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_createAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;account\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:38130/api | jq API List 1. wallet_unlock {password} {second} info: 解锁钱包 args：  password 钱包密码 second 解锁时间,单位秒  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_unlock\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;password\u0026#34;,30],\u0026#34;id\u0026#34;:1} 2. wallet_lock info：锁定钱包 example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_lock\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;id\u0026#34;:1} 3. wallet_getAccountsAndBalance info: 获取所有的账号和余额 example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getAccountsAndBalance\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;id\u0026#34;:1} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;account\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 0, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 0, \u0026#34;ConfirmAmount\u0026#34;: 0 }, \u0026#34;default\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 280000000000, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 280000000000, \u0026#34;ConfirmAmount\u0026#34;: 0 }, \u0026#34;imported\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 11172999678800, \u0026#34;SpendAmount\u0026#34;: 325000000000, \u0026#34;UnspendAmount\u0026#34;: 8754999678800, \u0026#34;ConfirmAmount\u0026#34;: 2418000000000 } } } 4. wallet_createAccount {accountName} info: 添加账户 args：  accountName 新账户名  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_createAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;accountName\u0026#34;],\u0026#34;id\u0026#34;:1} 5. wallet_getAddressesByAccount {accountName} info: 获取账户所有的地址 args：  accountName 账户名  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getAddressesByAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;default\u0026#34;],\u0026#34;id\u0026#34;:1} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: [ \u0026#34;TmSbEJs3nDmy68Af7M4Rsuj4pyAwcAret5a\u0026#34;, \u0026#34;Tmbzp2af9Ereh2hRejcVH9mCQgYdY2GHCAa\u0026#34;, \u0026#34;TmZu8zU1i6xbZMpLQZLMAJsyWHanZXUZtiV\u0026#34; ] } 6. wallet_createAddress {accountName} info: 创建地址 args：  accountName 账户名  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_createAddress\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;default\u0026#34;],\u0026#34;id\u0026#34;:1} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;TmhMzHPCH6F2k3WYQkyvjhwAXoZt7q8TFv9\u0026#34; } 7. wallet_sendToAddressByAccount {fromAccount} {toAddr} {amount} {comment} {commentTo} info: 发送交易 args：  fromAccount from account toAddr send to address amount send amount coin comment commentTo  example: {\u0026#34;id\u0026#34;:1574828051839,\u0026#34;method\u0026#34;:\u0026#34;wallet_sendToAddressByAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;default\u0026#34;,\u0026#34;TmZu8zU1i6xbZMpLQZLMAJsyWHanZXUZtiV\u0026#34;,800,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;]} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1574828051839, \u0026#34;result\u0026#34;: \u0026#34;b1ff3645c374992313e66d504fdf4fd3f2006f9414b97a7e1f6382328cc74fb1\u0026#34; } 8. wallet_getTxListByAddr {addr} {type} {page} {pageSize} info: 获取地址相关交易列表 args：  addr type 0: in tx; 1: out tx; 2: all tx page pageSize  example: {\u0026#34;id\u0026#34;:1574750774018,\u0026#34;method\u0026#34;:\u0026#34;wallet_getTxListByAddr\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;TmhJcjphz3Y3jRysKT56JaH8m9pzAzsFMu7\u0026#34;,2,-1,100]} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1574750774018, \u0026#34;result\u0026#34;: { \u0026#34;Total\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1000000000, \u0026#34;transactions\u0026#34;: [ { \u0026#34;hex\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;txid\u0026#34;: \u0026#34;47879fb9dea684e4ce6f24f30812d3832d11fee34400754c6d8b34cd7d7eba8f\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;937de7e15ec48e9cd58d79c594e7395015d5c663924ab5af929a9ef5e5f2e446\u0026#34;, \u0026#34;size\u0026#34;: 377, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ ... ], \u0026#34;vout\u0026#34;: [ ... ], \u0026#34;blockhash\u0026#34;: \u0026#34;026c6c85a1ae0183fe2e8bfda3450b9990acf9b8c4af3e995f9e361c7bb3d4cd\u0026#34;, \u0026#34;confirmations\u0026#34;: 0 } ] } } 9. wallet_importWifPrivKey {accountName} {privKey} {rescan} info: 导入wif格式私钥 args：  accountName 导入账户,目前只支持imported privKey 私钥 rescan bool,是否重新扫描交易记录  example: {\u0026#34;id\u0026#34;:1574750774018,\u0026#34;method\u0026#34;:\u0026#34;wallet_importWifPrivKey\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;imported\u0026#34;,\u0026#34;xxxxx\u0026#34;,false]} 10. wallet_dumpPrivKey {addr} info: 导出地址wif格式私钥 args：  addr 地址  example: {\u0026#34;id\u0026#34;:1574829854509,\u0026#34;method\u0026#34;:\u0026#34;wallet_dumpPrivKey\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;Tmh3je9zbnHAvPfwwHhQsFSJmKkeRTtKqmV\u0026#34;]} 11. ui_openWallet {pass} info: 打开钱包 args：  pass 钱包密码  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;ui_openWallet\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;pass\u0026#34;],\u0026#34;id\u0026#34;:1} 12. wallet_syncStats info: 查看当前钱包同步高度 args： example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_syncStats\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;id\u0026#34;:1} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;Height\u0026#34;: 20460 } } 13. wallet_getUtxo {addr} info: 获取指定地址可用utxo args：  addr 地址  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getUtxo\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;TmgD1mu8zMMV9aWmJrXqQYnWRhR9SBfDZG6\u0026#34;],\u0026#34;id\u0026#34;:1} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: [{ \u0026#34;Txid\u0026#34;: \u0026#34;54c47af3a17201c64a8f3b27164d4e09e8e38e05501b16bfd4f001caeddfa86a\u0026#34;, \u0026#34;Index\u0026#34;: 1, \u0026#34;Amount\u0026#34;: 699925600 }] } 14. wallet_importPrivKey {accountName} {privKey} {rescan} info: 导入私钥 args：  accountName 导入账户,目前只支持imported privKey 私钥 rescan bool,是否重新扫描交易记录  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_importPrivKey\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;imported\u0026#34;,\u0026#34;xxxxxx\u0026#34;,true],\u0026#34;id\u0026#34;:1} 15. wallet_getBalanceByAddr {addr} info: 获取地址余额 args：  addr 地址  example: {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getBalanceByAddr\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;TmfDniZnvsjdH98GsH4aetL3XQKFUTWPp4e\u0026#34;,1],\u0026#34;id\u0026#34;:16} result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 16, \u0026#34;result\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 400000000, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 400000000, \u0026#34;ConfirmAmount\u0026#34;: 0 } } 15. wallet_sendToAddressBatch {addr:amount} info: 单地址批量交易 args：  addr 地址 amount 金额  example: { \u0026#34;id\u0026#34;: 1578639635748, \u0026#34;method\u0026#34;: \u0026#34;wallet_sendToAddressBatch\u0026#34;, \u0026#34;params\u0026#34;: [{ \u0026#34;TmeUg4pxc14y64J5BQj4M7jKEryeYfJ4APh\u0026#34;: 0.1, \u0026#34;TmU3Xwo1rnh4hTKBwifDYAccDrF3kxXaEFe\u0026#34;: 0.2, \u0026#34;TmjbGfbcMN1nVVHdcvzmPA4ksKqGq4eEkXu\u0026#34;: 0.3, \u0026#34;TmmWRCMcRZ1ZGdQEw2BwZ3ibsobATw4KTrw\u0026#34;: 0.4 }] } result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1578639635748, \u0026#34;result\u0026#34;: \u0026#34;d7a7d24d47bb66ad3d3185764808af730c9a9dbb5970686cf6e5a1d5f249923c\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/hash/sha256/",
	"title": "sha256",
	"tags": [],
	"description": "",
	"content": "Perform a SHA256 or SHA3 256 of Base16 data.\nSHA256 calculate SHA256 hash of a base16 data.\n~ qx sha256 --help Usage: qx sha256 [hexstring] Example ~ qx sha256 900df00d f0ebe3bd55115e573ba35c2b1b65a923ff64c7a548d0deab73f9314754a9149d  sha3-256 calculate SHA3 256 hash of a base16 data.\n~ qx sha3-256 --help Usage: qx sha3-256 [hexstring] Example 1 ~ qx sha3-256 900df00d e2c74fd95c71ec226e1b8bb5150aa43121ba0759b0977660a2e2b1d71830256e "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/submitblock/",
	"title": "submitBlock",
	"tags": [],
	"description": "",
	"content": "SubmitBlock Attempts to submit new block to network.\nParameters  hexBlock: (string) hex-encoded block data to submit. Refer to https://github.com/qitmeer/qitmeer-miner to investigate how to construct a block  Returns (string) submit message Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;submitBlock\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;0b0000009b324c447c093502bd2928251c7a76bd66fac662f4535130c512a52ff27c9ac291db77e47c8b7fb1199192e813698abd42ceae44c6f6cd7bb3bfee442b105079000000000000000000000000000000000000000000000000000000000000000000000000d998195eba6acfb00118539c0100c3b203006b871000627a170066122400e7a933007cfb3b00ed393d00b9a63e00fcad4d0083c954004b6c5c007ac77300db1b7a0025f27c00540e7d0015018300a40084000bc28900d0f38f002b8592007e759300195a9900a2529b002356a1004b86a2008affb300f5a3ba001b05bb00dc52bf006528c1008fa1c20058a4c8000ca3cc002ff1cc00e4e8d10052cfd400e063dd00612fdf007a7ee5001d93ea00c093fc00019b324c447c093502bd2928251c7a76bd66fac662f4535130c512a52ff27c9ac2010100000001b3e2498b9592e6871e1a02a23a32988495b0c3da449f1cb3f1389013d044713bffffffffffffffff01007841cb020000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac000000000000000001455a08ec92282d01baa3be153131333933333038383330373933383831353235322435633739303233612d653130642d343631622d613438662d356563343961316233353330\u0026#34;],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;test:test\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:38131 |jq . Response \u0026#34;Block submitted accepted hash fcd2fe6a284e46d4fb7893e84bbcc58ca96e020be1e57b5c1b2c45929cca8dee, height 10, order 10 amount 12000000000\u0026#34; "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/swap-memory/",
	"title": "Swap Memory",
	"tags": [],
	"description": "",
	"content": "This tutorial instructs qitmeer node maintainers to mount swap memory to solve the Out of Memory problem.\nProblem Description Qitmeer\u0026rsquo;s recommended memory perquisite is 2GB, 1 GB at minimum. Even though memory has satisfied the recommended requirement, it is still possible that Qitmeer gets killed by system due to peak usage of memory, called Out of Memory exception.\n2021-03-23|07:45:22.110 [INFO ] Processed 211 blocks in the last 10s (217 transactions, order 283091, 2020-09-27 15:05:08 +0800 CST) module=blkmanager [1] 196072 killed ./build/bin/qitmeer You may confirm this exception by the command:\n Note: assume OS is Ubuntu\n dmesg -T| grep -E -i -B100 \u0026#39;killed process\u0026#39; If you find similar output as follows, then that maybe the case\n[Tue Mar 9 11:34:26 2021] Out of memory: Killed process 140587 (qitmeer) total-vm:1403144kB, anon-rss:675828kB, file-rss:0kB, shmem-rss:0kB, UID:1001 pgtables:1532kB oom_score_adj:0 Solution What is Swap Memory OS could transfer inactive memory into hard disk to make room for active processes, called memory swapping. Although this mechanism would reduce the overall performance of machines due to high swapping cost between physical memory and virtual memory (hard disk), it brings stronger stability.\nHow to mount swap memory  Note: Ensure you have root permission\n  create folder for swap file  root@Qit:/home/tony$ cd / root@Qit:/$ mkdir swap root@Qit:/$ cd swap/ create a 2GB swap file  root@Qit:/swap$ dd if=/dev/zero of=SWAPFILE bs=1024 count=2097152 2097152+0 records in 2097152+0 records out 2147483648 bytes (2.1 GB, 2.0 GiB) copied, 14.838 s, 145 MB/s convert into swap format  root@Qit:/swap$ mkswap SWAPFILE 2097152 mkswap: SWAPFILE: insecure permissions 0644, 0600 suggested. Setting up swapspace version 1, size = 2 GiB (2147479552 bytes) no label, UUID=06ee7e99-ab8f-4378-b0d0-3f5477bd1090 format swap file  root@Qit:/swap$ swapon SWAPFILE swapon: /swap/SWAPFILE: insecure permissions 0644, 0600 suggested. check swap file usage\nroot@Qit:/swap$ free total used free shared buff/cache available Mem: 980192 271480 63400 2676 645312 545572 Swap: 2097148 0 2097148 auto mount swap file on booting  root@Qit:~$ echo \u0026#34;/swap/SWAPFILE swap swap defaults 0 0\u0026#34; \u0026gt;\u0026gt; /etc/fstab "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/tips/",
	"title": "tips",
	"tags": [],
	"description": "",
	"content": "tips None\nParameters Returns (array of string) list of tip hashes Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;tips\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;rpcuser:rpcpass\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:18131 |jq . Response [ \u0026#34;00001a78e4405cf0b1eeebf4c707bbbeea3fbad53dd60718092b08c6fb1cb95f\u0026#34; ] "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/txsign/",
	"title": "txSign",
	"tags": [],
	"description": "",
	"content": "test_txSign sign raw transactions\nPrerequisite test module enabled\nmodules=test Parameters  privkeyStr: (hex string) private key rawTxStr: (hex string) raw transaction  Returns (array of string) list of tip hashes Example Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;test_txSign\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\u0026#34;, \u0026#34;0100000001f9802e5923afe50cbde3514c4169a8e84f83770c22e994cffb3c0a59e433d9cf01000000ffffffff01804a5d05000000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac00000000000000001141cb5f0100\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:18131 | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;0100000001f9802e5923afe50cbde3514c4169a8e84f83770c22e994cffb3c0a59e433d9cf01000000ffffffff01804a5d05000000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac00000000000000001141cb5f016b483045022100b8ab0acf7f282e167669e3f20920c81b06554bc1fd5b41c4dd44ab4f3319a92f02200b664f920c77a7d8ac695380c22ec3131e2bd8f27617f84883fe9cf6d6bea0a1012102e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/",
	"title": "Wallet JSON PRC",
	"tags": [],
	"description": "",
	"content": " Instruction API List  Wallet UI QitmeerD    "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/encode_decode/qxbase58check/",
	"title": "base58check",
	"tags": [],
	"description": "",
	"content": "base58check-encode base16 string into Qitmeer or BTC address.\n~ qx base58check-encode Usage: qx base58check-encode [-v \u0026lt;ver\u0026gt;] [hexstring] -a string base58check hasher -c int base58check checksum size (default 4) -m string base58check encode mode : [qx|btc] (default \u0026#34;qx\u0026#34;) -v version base58check version [mainnet|testnet|privnet] (default testnet) Example 1 # create qitmeer privnet address by base16 ~ qx base58check-encode c1c3092d17c917c2799c041aeaeac18822772149 # base58 string TmgcbmHLHxEc9LQkpZaqvSD76uLviSJLxjG Example 2 # create qitmeer testnet address by base16 ~ qx base58check-encode -v privnet c1c3092d17c917c2799c041aeaeac18822772149 # base58 string RmPwHCuC2m6gvz9TnVLapHySk1ZU72FTSru Example 3 BTC type addresses can be created using -m and -v\nBTC Address version\n   network pubKeyHash scriptHash     mainnet 00 05   testnet 6f c4    # create btc address by base16 ~ qx base58check-encode -m btc -v 00 c1c3092d17c917c2799c041aeaeac18822772149 # base58 string 1JfX4MNnkEstCCrc91pMcV1xjCwVgyAHwT Example 4 Different address types can be created using different hashers, such as double sha256 hasher for BTC and double blake2b256 for Meer\n# create Meer address by base16 ~ qx base58check-encode -a dblake2b256 c1c3092d17c917c2799c041aeaeac18822772149 # base58 string TmgcbmHLHxEc9LQkpZaqvSD76uLviSJLxjG # equal to ~ qx base58check-encode c1c3092d17c917c2799c041aeaeac18822772149  base58check-decode decode a base58check string.\n~ qx base58check-decode Usage: qx base58check-decode [hexstring] -a hasher base58check hasher -cs size base58check checksum size (default 4) -d show decode details -m mode base58check decode mode: [qx|btc] (default \u0026#34;qx\u0026#34;) -vs size base58check version size (default 2) Example 5 # decode qitmeer privnet address by base58 ~ qx base58check-decode RmPwHCuC2m6gvz9TnVLapHySk1ZU72FTSru # base58 string c1c3092d17c917c2799c041aeaeac18822772149 Example 6 -b show decode details\n~ qx base58check-decode -d RmPwHCuC2m6gvz9TnVLapHySk1ZU72FTSru mode : qx version : 0df1 (hex) 3569 (BE) 61709 (LE) payload : c1c3092d17c917c2799c041aeaeac18822772149 checksum: b8769d62 (hex) 3094781282 (BE) 1654486712 (LE) Example 7 use -m btc decode BTC address\n# decode btc address by base58 ~ qx base58check-decode -d -m btc 1JfX4MNnkEstCCrc91pMcV1xjCwVgyAHwT mode : btc version : 0000 (hex) 0 (BE) 0 (LE) payload : c1c3092d17c917c2799c041aeaeac18822772149 checksum: a75521de (hex) 2807374302 (BE) 3726726567 (LE) "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/hash/blakehash/",
	"title": "blake hash",
	"tags": [],
	"description": "",
	"content": "Perform a blake2b256 or blake2b512 or blake256 of Base16 data.\nblake2b256 calculate Blake2b 256 hash of a base16 data.\n~ qx blake2b256 --help Usage: qx blak2b256 [hexstring] Example ~ qx blake2b256 900df00d c2cb5ef4138047b1ca42ce0bed2a2ce7d23768341ff52e6a9e2516257a1d2af9  blake2b512 calculate Blake2b 512 hash of a base16 data.\n~ qx blake2b512 --help Usage: qx blake2b512 [hexstring] Example 1 ~ qx blake2b512 900df00d 36b65c58935fcf08307da04ba74bef658958e16a864c6a1a7bcec8fe5a82322f7c06424b70a4f25efc7e6493395562e6bebbe90e41c372dfda948506c54e4cdc  blake256 calculate blake256 hash of a base16 data.\n~ qx blake256 --help Usage: qx blake256 [hexstring] Example 2 ~ qx blake256 900df00d bedb342806616f3866179dab458f5f8a29bac652142689bf59a34136bc8e6d69 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/getstart/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Prerequisites Introduction This tutorial gives a quick practice on how to use qitmeer to send a transaction from scratch. It covers 3 core roles in the network: qitmeer, miner, wallet. So, it would help you get a basic concept of qitmeer network in short time.\nIt includes four sections: first we launch a Qitmeer test node as server to provide the fundamental blockchain service; then we launch the qitmeer command line wallet to generate wallet for miner; in the next step, we run a miner node to win the mining reward from the network; lastly, we use wallet to send a transaction to an arbitrary recipient using our mining reward.\nNote: this tutorial is just targeted for beginners to experience the core functionality of Qitmeer network as soon as possible. So we tried to skip some steps which should have been best practice. Such as , TLS , strong password, saving important information, etc. So, after gone through this tutorial, please dive into the our documents of each project to get a better practice.\nDevelopment Environment Follow Development Environment\nRun Qitmeer Open a new terminal window\nInstall  Docker\nFollow Qitmeer Installation to install docker  alias qitmeer=\u0026#34;docker run -it -p 18130:18130 -p 18131:18131 qitmeer/qitmeerd\u0026#34;  Build from Source  export QITMEER_URI=github.com/Qitmeer/qitmeer git clone https://${QITMEER_URI} ~/${QITMEER_URI} cd ~/${QITMEER_URI} go build alias qitmeer=\u0026#34;~/${QITMEER_URI}/qitmeer\u0026#34; Run qitmeer --notls --rpcuser=test --rpcpass=test Run Wallet Open a new terminal window\nInstall export WALLET_URI=github.com/Qitmeer/qitmeer-wallet git clone https://${WALLET_URI} ~/${WALLET_URI} --depth=1 cd ~/${WALLET_URI} go build alias qc=\u0026#34;~/${WALLET_URI}/qitmeer-wallet --qserver=127.0.0.1:18131 --qpass=test --quser=test qc\u0026#34; alias qx=\u0026#34;~/${WALLET_URI}/qitmeer-wallet qx\u0026#34; create wallet $ wallet qc create Enter the private passphrase for your new wallet: [WALLET_PASSWORD] Confirm passphrase: [WALLET_PASSWORD] Do you want to add an additional layer of encryption for public data? (n/no/y/yes) [no]: pubPass: public Do you have an existing wallet seed you want to use? (n/no/y/yes) [no]: Your wallet generation seed is: [GENERATION_SEED] IMPORTANT: Keep the seed in a safe place as you will NOT be able to restore your wallet without it. Please keep in mind that anyone who has access to the seed can also restore your wallet thereby giving them access to all your funds, so it is imperative that you keep it in a secure location. Once you have stored the seed in a safe and secure location, enter \u0026#34;OK\u0026#34; to continue: OK Creating the wallet... pri:[PRIVATE_KEY] The wallet has been created successfully. createWallet succ get address export PRIVATE_KEY=[PRIVATE_KEY] export WALLET_PASSWORD=[WALLET_PASSWORD] qx pritoaddr $PRIVATE_KEY testnet This will return the corresponding address, assume it is [MINER_ADDRESS]\nupdate db This process will last a little bit long time, you may process the following steps\nqc updateblock Run Miner Open a new terminal window\nInstall Follow Qitmeer Miner to install dependencies of Miner\n# replace MINER_URI with your miner directory export MINER_URI=github.com/qitmeer/qitmeer-miner git clone https://${MINER_URI} ~/${MINER_URI} --depth=1 alias miner=\u0026#34;~/${MINER_URI}/qitmeer-miner\u0026#34; Run # replace MINER_ADDRESS with your miner address export MINER_ADDRESS=[MINER_ADDRESS] miner --mineraddress=${MINER_ADDRESS} --network=testnet --rpcuser=test --rpcpass=test --rpcserver=127.0.0.1:18131 Send Transaction Switch to wallet terminal\nexport RECIPIENT_MNEMONIC=$(qx generatemnemonic) export RECIPIENT_ADDRESS=$(qx mnemonictoaddr \u0026#34;${RECIPIENT_MNEMONIC}\u0026#34; testnet) # make sure your mining reward matured before executing this command qc sendtoaddress $RECIPIENT_ADDRESS 9 $WALLET_PASSWORD "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/hash/",
	"title": "Hash Commands",
	"tags": [],
	"description": "",
	"content": "hash : blake2b256 calculate Blake2b 256 hash of a base16 data. blake2b512 calculate Blake2b 512 hash of a base16 data. sha256 calculate SHA256 hash of a base16 data. sha3-256 calculate SHA3 256 hash of a base16 data. keccak-256 calculate legacy keccak 256 hash of a bash16 data. blake256 calculate blake256 hash of a base16 data. ripemd160 calculate ripemd160 hash of a base16 data. bitcoin160 calculate ripemd160(sha256(data)) hash160 calculate ripemd160(blake2b256(data)) "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/entropy/hd/",
	"title": "HD",
	"tags": [],
	"description": "",
	"content": "hd-new create a new HD(BIP32) private key from an entropy (seed).\n~ qx hd-new --help Usage: qx hd-new [-v version] [entropy] -v version The HD(BIP32) version [mainnet|testnet|privnet|bip32] (default testnet) default ~ qx hd-new 4ec6a3a135aba433b0d0ae5ec31d69c26eb3bd5ac532496529660f61c674d99e tprvZUo1ZuEfLLFWgE3tcS9LfwarRt5Pjy1xH4y3yfEarLtP8F7EL2ncFqvS4VW1yY2cUfmA94c9pg563PHGbzS8w96pzGJUu2pipGgckRgnvL7 use -v parameter ~ qx hd-new -v mainnet 4ec6a3a135aba433b0d0ae5ec31d69c26eb3bd5ac532496529660f61c674d99e nprvxSuUxcjDNFNkbPm9y9pMYE9yT4F3MrU8QdsGjgmLA7RLghzj4eKFRYskuqVtYUorJE4iUej8BwgXReSV6kTwNsZKP6iwT5iMCVqiMsUKJwz  hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key.\n~ qx hd-to-ec --help Usage: qx hd-to-ec [hd_private_key or hd_public_key] -v version The HD(BIP32) version [mainnet|testnet|privnet|bip32] (default testnet) private key ~ qx hd-to-ec tprvZUo1ZuEfLLFWgE3tcS9LfwarRt5Pjy1xH4y3yfEarLtP8F7EL2ncFqvS4VW1yY2cUfmA94c9pg563PHGbzS8w96pzGJUu2pipGgckRgnvL7 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 mainnet private key ~ qx hd-to-ec -v mainnet nprvxSuUxcjDNFNkbPm9y9pMYE9yT4F3MrU8QdsGjgmLA7RLghzj4eKFRYskuqVtYUorJE4iUej8BwgXReSV6kTwNsZKP6iwT5iMCVqiMsUKJwz 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 public key ~ qx hd-to-ec tpubVhnMyQmZAhooti8MiTgM35Xayuut9RjoeHten3eCQgRN13SNsa6roeEuunaefhqrpVPoxKTxpjuGpsWSTjFeoq9L3kgcwntCbHHBL4g2R69 034d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70 # equal to ~ qx ec-new 4ec6a3a135aba433b0d0ae5ec31d69c26eb3bd5ac532496529660f61c674d99e | qx ec-to-public  hd-to-public derive the HD (BIP32) public key from a HD private key.\n~ qx hd-new --help Usage: qx hd-to-public [hd_private_key] -v version The HD(BIP32) version [mainnet|testnet|privnet|bip32] (default testnet) Example need HD private key.\n~ qx hd-to-public tprvZUo1ZuEfLLFWgE3tcS9LfwarRt5Pjy1xH4y3yfEarLtP8F7EL2ncFqvS4VW1yY2cUfmA94c9pg563PHGbzS8w96pzGJUu2pipGgckRgnvL7 tpubVhnMyQmZAhooti8MiTgM35Xayuut9RjoeHten3eCQgRN13SNsa6roeEuunaefhqrpVPoxKTxpjuGpsWSTjFeoq9L3kgcwntCbHHBL4g2R69 Error ~ qx hd-to-public tpubVhnMyQmZAhooti8MiTgM35Xayuut9RjoeHten3eCQgRN13SNsa6roeEuunaefhqrpVPoxKTxpjuGpsWSTjFeoq9L3kgcwntCbHHBL4g2R69 Qx Error : \u0026#34;tpubVhnMyQmZAhooti8MiTgM35X...BL4g2R69 is not a HD (BIP32) private key\u0026#34;  hd-decode decode a HD (BIP32) private/public key serialization format.\n~ qx hd-decode --help Usage: qx hd-decode [hd_private_key or hd_public_key] Example 1 ~ qx hd-decode tpubVhnMyQmZAhooti8MiTgM35Xayuut9RjoeHten3eCQgRN13SNsa6roeEuunaefhqrpVPoxKTxpjuGpsWSTjFeoq9L3kgcwntCbHHBL4g2R69 version : 043587d1 (qx testnet) depth : 00 parent fp : 00000000 hardened : false child num : 0 (00000000) chain code : f1c00ea9eb51966589c10edc92036250b18141a0faffaa89cfcec91de12eaa9c pub key : [03][4d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70] y=odd checksum : 136734c2 hex : 043587d1000000000000000000f1c00ea9eb51966589c10edc92036250b18141a0faffaa89cfcec91de12eaa9c034d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70136734c2 base58 : tpubVhnMyQmZAhooti8MiTgM35Xayuut9RjoeHten3eCQgRN13SNsa6roeEuunaefhqrpVPoxKTxpjuGpsWSTjFeoq9L3kgcwntCbHHBL4g2R69 hd-derive Derive a child HD (BIP32) key from another HD public or private key.\n~ qx hd-derive --help Usage: qx hd-derive [hd_private_key or hd_public_key] -d create a hardened key -i index The HD index -p path hd derive path. ex: m/44\u0026#39;/0\u0026#39;/0\u0026#39;/0 -v version The HD(BIP32) version [mainnet|testnet|privnet|bip32] (default testnet) Example 2 ~ qx hd-derive tpubVhnMyQmZAhooti8MiTgM35Xayuut9RjoeHten3eCQgRN13SNsa6roeEuunaefhqrpVPoxKTxpjuGpsWSTjFeoq9L3kgcwntCbHHBL4g2R69 tpubVki4bHPyoZ3URwa1G8WHiB6rxsUVzQreGPF71dKvATNByoP7niivvY4TCsKV374kTas45z6G1ZygNBj1sJo8vRcsDogp7Fb1XnmQtwLAibU "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/qitmeer-atomicswap/",
	"title": "Qitmeer Atomic-swap",
	"tags": [],
	"description": "",
	"content": "Qitmeer Cross-chain Atomic-Swapping Through this tutorial, we demonstrate the QITMEER/BTC atomic-swapp by using qitmeer-cli and qx tool under the qitmeer TestNet.\nIntroduction What\u0026rsquo;s Atomic-swapping \u0026hellip;\nPrerequisites  golang qitmeer-cli qx tool  Step By Step QIMEER/BTC Atomicswap Demo Prepare Private Key \u0026amp; Address Create Secret Key \u0026amp; Secret Key Hash Create Qitmeer HTLC (Hash Time-Lock Contract) Broadcasting transaction Verify Create BTC HTLC Broadcasting transaction Unlock BTC/Qitmeer HTLC User get BTC/Qitmeer "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/qitmeerd/",
	"title": "QitmeerD API",
	"tags": [],
	"description": "",
	"content": "Overview API for qitmeer daemon\nQitmeerD  add del list reset status update  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/txsign/transaction/",
	"title": "transaction",
	"tags": [],
	"description": "",
	"content": "tx-encode encode a unsigned transaction.\n~ qx tx-encode --help Usage: qx tx-encode [ec_public_key] -i value The set of transaction input points encoded as TXHASH:INDEX:SEQUENCE. TXHASH is a Base16 transaction hash. INDEX is the 32 bit input index in the context of the transaction. SEQUENCE is the optional 32 bit input sequence and defaults to the maximum value. -l value the transaction lock time -o value The set of transaction output data encoded as TARGET:NOX. TARGET is an address (pay-to-pubkey-hash or pay-to-script-hash). NOX is the 64 bit spend amount in nox. -v value the transaction version (default 1) Example ~ qx tx-encode -i 1b99ad8f271124533bf49cd943124d65a24de3266078391a6e6e92bae42849c8:2 -l 0 -o RmCYoUMqKZopUkai2YhUFHR9UeqjeyjTAgW:1 -o RmRYWLhtA3dkgd3vF3bEqZvsriTufMFPBRK:30 0100010001c84928e4ba926e6e1a39786026e34da2654d1243d99cf43b532411278fad991b02000000ffffffff0200e1f505000000001976a91444d959afb6db4ad730a6e2c0daf46ceeb98c53a088ac005ed0b2000000001976a914d364af39e59cea1488a25e3cfcc48e20f31a7b1688ac0000000000000000 Set Locktime If nLocktime is not zero and is less than 500 million, it is interpreted as block height, which means that the trade is invalid and is not relayed or included in the block chain before the specified block height.\nIf it exceeds 500 million, it is interpreted as a Unix era timestamp (the number of seconds since jan-1-1970), and the transaction is not valid until the specified time. The nLocktime transaction that specifies the future block or time must be held by the originating system and sent to the qitmeer network only after it is valid. If the transaction is transmitted to the network before the specified nLocktime, the first node rejects the transaction and is not relayed to other nodes. Using nLocktime is equivalent to a deferred check.\n~ qx tx-encode -i 1b99ad8f271124533bf49cd943124d65a24de3266078391a6e6e92bae42849c8:2 -l 1562904504 -o RmCYoUMqKZopUkai2YhUFHR9UeqjeyjTAgW:1 -o RmRYWLhtA3dkgd3vF3bEqZvsriTufMFPBRK:30 0100010001c84928e4ba926e6e1a39786026e34da2654d1243d99cf43b532411278fad991b02000000feffffff0200e1f505000000001976a91444d959afb6db4ad730a6e2c0daf46ceeb98c53a088ac005ed0b2000000001976a914d364af39e59cea1488a25e3cfcc48e20f31a7b1688acb807285d00000000  tx-decode decode a transaction in base16 to json format.\n~ qx tx-decode --help Usage: qx tx-decode [base16_string] -n string decode rawtx for the target network. (mainnet, testnet, privnet) (default \u0026#34;privnet\u0026#34;) decode testnet rawtx ~ qx tx-decode -n testnet 0100010001c84928e4ba926e6e1a39786026e34da2654d1243d99cf43b532411278fad991b02000000feffffff0200e1f505000000001976a91444d959afb6db4ad730a6e2c0daf46ceeb98c53a088ac005ed0b2000000001976a914d364af39e59cea1488a25e3cfcc48e20f31a7b1688acb807285d00000000 { \u0026#34;txid\u0026#34;: \u0026#34;d0f1d098c2076c149a8bf3c650f56ce0b485c268e668aa7e79aea37454f3093d\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;f546294b0449f658596d93c7de02c769b6064e9b8b05f6b9b4060d396325dcf5\u0026#34;, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 1562904504, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [{ \u0026#34;txid\u0026#34;: \u0026#34;1b99ad8f271124533bf49cd943124d65a24de3266078391a6e6e92bae42849c8\u0026#34;, \u0026#34;vout\u0026#34;: 2, \u0026#34;sequence\u0026#34;: 4294967294, \u0026#34;amountin\u0026#34;: 0, \u0026#34;blockheight\u0026#34;: 0, \u0026#34;txindex\u0026#34;: 0, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;\u0026#34; } }], \u0026#34;vout\u0026#34;: [{ \u0026#34;amount\u0026#34;: 100000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 44d959afb6db4ad730a6e2c0daf46ceeb98c53a0 OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a91444d959afb6db4ad730a6e2c0daf46ceeb98c53a088ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [\u0026#34;TmVE82jyakwjh6r14cwjMReoqYdCGUZcxTC\u0026#34;] } }, { \u0026#34;amount\u0026#34;: 3000000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 d364af39e59cea1488a25e3cfcc48e20f31a7b16 OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a914d364af39e59cea1488a25e3cfcc48e20f31a7b1688ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [\u0026#34;TmiDpu62REmftyKDH7qVwiAYDcFNGkE5HQv\u0026#34;] } }] }  tx-sign sign a transactions using a private key.\n~ qx tx-sign --help Usage: qx tx-sign [raw_tx_base16_string] -k string the ec private key to sign the raw transaction Example The column rawtx is not send to the node and is used as an instance only.\n ~ qx tx-sign -k 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 0100010001c84928e4ba926e6e1a39786026e34da2654d1243d99cf43b532411278fad991b02000000feffffff0200e1f505000000001976a91444d959afb6db4ad730a6e2c0daf46ceeb98c53a088ac005ed0b2000000001976a914d364af39e59cea1488a25e3cfcc48e20f31a7b1688acb807285d00000000 0100000001c84928e4ba926e6e1a39786026e34da2654d1243d99cf43b532411278fad991b02000000feffffff0200e1f505000000001976a91444d959afb6db4ad730a6e2c0daf46ceeb98c53a088ac005ed0b2000000001976a914d364af39e59cea1488a25e3cfcc48e20f31a7b1688acb807285d0000000001000000000000000000000000000000006b483045022100bd22c1b3c92d3131440c8582222b123a7fca7bfec68738bbb7423ba93f483de1022079d8180e9a4d53bfd23d9286b17261f15e71336e82f2c1cef6cab2e1f0675eaf0121034d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/ui/",
	"title": "UI API",
	"tags": [],
	"description": "",
	"content": "Overview Web UI API\nNote required ui config enabled\nui=true UI  createWallet makeSeed walletStatus recoverWallet  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/",
	"title": "Wallet API",
	"tags": [],
	"description": "",
	"content": "Overview wallet services\nWallet   createAccount\n  createAddress\n  importPrivKey\n  importWIFPrivKey\n  dumpPrivKey\n  sendToAddress\n  sendToAddressByAccount\n  sendToMany\n  getAccountByAddress\n  getAccountsAndBalance\n  getAddressesByAccount\n  getBalanceByAccount\n  getBalanceByAddr\n  getBillByAddr\n  getTxListByAddr\n  getUTXO\n  lock\n  syncStats\n  unlock\n  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/qitmeerd/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "Add Parameters Returns Success Error Example Request Response "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/encode_decode/qxbase64/",
	"title": "base64",
	"tags": [],
	"description": "",
	"content": "base64-encode Convert a base16 string to a base64 string.\n~ qx base64-encode --help Usage: qx base64-encode [hexstring] Example 1 ~ qx base64-encode 1234567890abcdef # base64 string EjRWeJCrze8=  base64-decode Convert a base64 string to a base16 string.\n~ qx base64-decode --help Usage: qx base64-decode [hexstring] Example 2 ~ qx base64-decode EjRWeJCrze8= # base16 string 1234567890abcdef "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/createaccount/",
	"title": "createAccount",
	"tags": [],
	"description": "",
	"content": "wallet_createAccount creates the next account and returns its account number. The name must be unique to the account. In order to support automatic seed restoring, new accounts may not be created when all of the previous 100 accounts have no transaction history (this is a deviation from the BIP0044 spec, which allows no unused account gaps).\nParameters  name: (string) account name  Returns Success null\nError -32000 -13 Creating an account requires the wallet to be unlocked. Enter the wallet passphrase with walletpassphrase to unlock\nExample Request curl -k -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_createAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;test_account\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api Response {\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1,\u0026#34;result\u0026#34;:null} "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/createaddress/",
	"title": "createAddress",
	"tags": [],
	"description": "",
	"content": "wallet_createAddress returns the next external chained address for a wallet.\nParameters  accountName: (string) name of the account on which the address created  Returns Success new address (base58)\nError -32000 account name \u0026lsquo;test_account\u0026rsquo; not found\nExample Request curl -k -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_createAddress\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;test_account\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;Tmdy4W4FeDD2M8Tm8syZJmR2BPdug4Zeozj\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/createrawtransaction/",
	"title": "createRawTransaction",
	"tags": [],
	"description": "",
	"content": "createRawTransaction Returns a new transaction spending the provided inputs and sending to the provided addresses.The transaction inputs are not signed in the created transaction.\nParameters  inputs: (array of object) transaction inputs.  txid: (string) The transaction id vout: (numeric) The output number   amounts: (object) addresses as keys and output amounts as values. lockTime: (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs  Returns (string) hex-encoded bytes of the serialized transaction Example Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;createRawTransaction\u0026#34;,\u0026#34;params\u0026#34;:[ [{\u0026#34;Txid\u0026#34;:\u0026#34;cfd933e4590a3cfbcf94e9220c77834fe8a869414c51e3bd0ce5af23592e80f9\u0026#34;, \u0026#34;Vout\u0026#34;:1}], {\u0026#34;Tme9dVJ4GeWRninBygrA6oDwCAGYbBvNxY7\u0026#34;:90000000}],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:18131 | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;0100000001f9802e5923afe50cbde3514c4169a8e84f83770c22e994cffb3c0a59e433d9cf01000000ffffffff01804a5d05000000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac00000000000000001141cb5f0100\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/ui/createwallet/",
	"title": "createWallet",
	"tags": [],
	"description": "",
	"content": "ui_createWallet create wallet by seed\nParameters  seed: (string) seed walletPass: (string) wallet password unlockPass: (string) unlock password  Returns Success null\nError -32000 wallet exist\nExample Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;ui_createWallet\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;0d82f3214e900c039c8e05c04bef5f22bdf5804344e69e8f7426e90fabb0eb178a8c4f99850c77be09f609b7145799fb0772c1c0c1087acd55868240755a437a\u0026#34;, \u0026#34;walletPass\u0026#34;, \u0026#34;unlockPass\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: null } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/decoderawtransaction/",
	"title": "decodeRawTransaction",
	"tags": [],
	"description": "",
	"content": "decodeRawTransaction Returns a JSON object representing the provided serialized, hex-encoded transaction.\nParameters  hexTx: (string) serialized, hex-encoded transaction.  Returns (object)  txid: (string) the transaction id. txhash: (string) the hash of the transaction. locktime: (numeric) the transaction lock time. version: (numeric) the block version. vin: (array of objects, coinbase) the transaction inputs .  coinbase: (string) the hex-encoded bytes of the signature script. sequence: (numeric) the script sequence number.   vin (array of objects, coinbase, non-coinbase) (json object) {\u0026ldquo;coinbase\u0026rdquo;: \u0026ldquo;data\u0026rdquo;, \u0026ldquo;sequence\u0026rdquo;: n, \u0026hellip;} vout: (array of objects) the transaction outputs .  Example Request curl --data \u0026#39;{\u0026#34;method\u0026#34;:\u0026#34;decodeRawTransaction\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;01000000013376e251a4e058e8d70ecc27fbe02a1c4b17ed722294dc1d644dd24e009ef9dd00000000ffffffff0100e40b54020000001976a9146bd68046854813036fa042958e7f5ca29606e8d088ac00000000000000000100\u0026#34;],\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1}\u0026#39; -s -k -u \u0026#34;test:test\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; http://127.0.0.1:1234 |jq . Response { \u0026#34;txid\u0026#34;: \u0026#34;0d21c787536b02e3df82bd72c8dceb525049013cb249eee1d73090183c9a8965\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;b718e91241840992175195758628f3b6ec61019be0fa202d9b4b4652a6b96fd7\u0026#34;, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ { \u0026#34;txid\u0026#34;: \u0026#34;ddf99e004ed24d641ddc942272ed174b1c2ae0fb27cc0ed7e858e0a451e27633\u0026#34;, \u0026#34;vout\u0026#34;: 0, \u0026#34;sequence\u0026#34;: 4294967295, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;\u0026#34; } } ], \u0026#34;vout\u0026#34;: [ { \u0026#34;amount\u0026#34;: 10000000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 6bd68046854813036fa042958e7f5ca29606e8d0 OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a9146bd68046854813036fa042958e7f5ca29606e8d088ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;RmG6xQsV7gnS4JZmoq5FgmyEbmUQRenrTCo\u0026#34; ] } } ] } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/qitmeerd/del/",
	"title": "del",
	"tags": [],
	"description": "",
	"content": "Del Parameters Returns Success Error Example Request Response "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/dumpprivkey/",
	"title": "dumpPrivKey",
	"tags": [],
	"description": "",
	"content": "wallet_dumpPrivKey dump a single address private key\nParameters  addr: (string) address  Returns Example Request {\u0026#34;id\u0026#34;:1574829854509,\u0026#34;method\u0026#34;:\u0026#34;wallet_dumpPrivKey\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;Tmh3je9zbnHAvPfwwHhQsFSJmKkeRTtKqmV\u0026#34;]} Response "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/entropy/",
	"title": "Entropy and Mnemoic",
	"tags": [],
	"description": "",
	"content": "entropy (seed) \u0026amp; mnemoic \u0026amp; hd \u0026amp; ec entropy generate a cryptographically secure pseudorandom entropy (seed). hd-new create a new HD(BIP32) private key from an entropy (seed). hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key. hd-to-public derive the HD (BIP32) public key from a HD private key. hd-decode decode a HD (BIP32) private/public key serialization format. hd-derive Derive a child HD (BIP32) key from another HD public or private key. mnemonic-new create a mnemonic world-list (BIP39) from an entropy. mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39). mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed. ec-new create a new EC private key from an entropy (seed). ec-to-public derive the EC public key from an EC private key (the compressed format by default ). ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default. wif-to-ec convert a WIF private key to an EC private key. wif-to-public derive the EC public key from a WIF private key. "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/evmtomeer/",
	"title": "evmToMeer",
	"tags": [],
	"description": "",
	"content": "wallet_evmToMeer sends the passed amount to the given address.\nNOTE  This function requires to the wallet to be unlocked. See wallet_unlock The amount cannot exceed 21,000,000  Parameters  address: (hex string) the given address amount: (numeric) passed amount coinID: (numeric) 0 =\u0026gt; MEER 1=\u0026gt; MEER balance  Returns Success TxID: (hex string) the TxID for the created transaction\nError -32000 -13 Enter the wallet passphrase with walletpassphrase first\nExample Request Send EVM To MEER $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_evmToMeer\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;Tk6uJDaurxqPrg2bZqBa9XSpUcakebZ6EU1u9qqHNDcNW2MyeTtbX\u0026#34;, 10 , 0],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;86140f1fa1e7d95707ec7e61748b91838e24a00ca8803f299c7caca591ff1af4\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/getaccountbyaddress/",
	"title": "getAccountByAddress",
	"tags": [],
	"description": "",
	"content": "wallet_getAccountByAddress Get owner account name of address\nParameters  addr: (string) address  Returns  account name: (string) owner account name  Example Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getAccountByAddress\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;TmbC1Fx1UXNt7D6zpaj83UrAEW7MbcUWuQz\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;test\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/getaccountsandbalance/",
	"title": "getAccountsAndBalance",
	"tags": [],
	"description": "",
	"content": "wallet_getAccountsAndBalance list balance of all accounts\nParameters None\nReturns [account name]:(account)\naccount\n TotalAmount: (numeric) Total amount, spend amount+ spendable amount + frozen amount SpendAmount: (numeric) spent amount, already confirmed UnspendAmount: (numeric) spendable amount, not including frozen amount ConfirmAmount: (numeric) frozen amount, waiting for conformation LockAmount: (numeric) locked amount, waiting for unlock .  Example Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getAccountsAndBalance\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;MEER\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 0, \u0026#34;LockAmount\u0026#34;: 0, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 0, \u0026#34;ConfirmAmount\u0026#34;: 0 }, \u0026#34;imported\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 676444792042, \u0026#34;LockAmount\u0026#34;: 0, \u0026#34;SpendAmount\u0026#34;: 1366909827084, \u0026#34;UnspendAmount\u0026#34;: 676444792042, \u0026#34;ConfirmAmount\u0026#34;: 0 }, \u0026#34;test\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 900000000, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 900000000, \u0026#34;ConfirmAmount\u0026#34;: 0 }, \u0026#34;test_account\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 0, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 0, \u0026#34;ConfirmAmount\u0026#34;: 0 } } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/getaddressesbyaccount/",
	"title": "getAddressesByAccount",
	"tags": [],
	"description": "",
	"content": "wallet_getAddressesByAccount 获取账户所有的地址\nParameters  accountName: (string) 账户名  Returns Example Request {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getAddressesByAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;default\u0026#34;],\u0026#34;id\u0026#34;:1} Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: [ \u0026#34;TmSbEJs3nDmy68Af7M4Rsuj4pyAwcAret5a\u0026#34;, \u0026#34;Tmbzp2af9Ereh2hRejcVH9mCQgYdY2GHCAa\u0026#34;, \u0026#34;TmZu8zU1i6xbZMpLQZLMAJsyWHanZXUZtiV\u0026#34; ] } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/getbalancebyaccount/",
	"title": "getBalanceByAccount",
	"tags": [],
	"description": "",
	"content": "wallet_getBalanceByAccount Get balance by account\nParameters  account: (string) account name  Returns  TotalAmount: (numeric) Total amount, spend amount+ spendable amount + frozen amount SpendAmount: (numeric) spent amount, already confirmed UnspendAmount: (numeric) spendable amount, not including frozen amount ConfirmAmount: (numeric) frozen amount, waiting for conformation LockAmount: (numeric) locked amount, waiting for unlock  Example Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getBalanceByAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;test\u0026#34;, \u0026#34;MEER\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 900000000, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;LockAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 900000000, \u0026#34;ConfirmAmount\u0026#34;: 0 } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/getbalancebyaddr/",
	"title": "getBalanceByAddr",
	"tags": [],
	"description": "",
	"content": "wallet_getBalanceByAddr Get balance by address\nParameters  addr: (string) address  Returns  TotalAmount: (numeric) Total amount, spend amount+ spendable amount + frozen amount SpendAmount: (numeric) spent amount, already confirmed UnspendAmount: (numeric) spendable amount, not including frozen amount ConfirmAmount: (numeric) frozen amount, waiting for conformation LockAmount: (numeric) locked amount, waiting for unlock  Example Request $ curl -k -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getBalanceByAddr\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;TmbC1Fx1UXNt7D6zpaj83UrAEW7MbcUWuQz\u0026#34;, \u0026#34;MEER\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;TotalAmount\u0026#34;: 900000000, \u0026#34;SpendAmount\u0026#34;: 0, \u0026#34;LockAmount\u0026#34;: 0, \u0026#34;UnspendAmount\u0026#34;: 900000000, \u0026#34;ConfirmAmount\u0026#34;: 0 } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/getbillbyaddr/",
	"title": "getBillByAddr",
	"tags": [],
	"description": "",
	"content": "wallet_getBillByAddr request the bill of a specific address, a bill is the log of payments, which are the effects that a transaction makes on a specific address a payment can affect only ONE address\nParameters  addr: (string) address filter: (numeric) filter  0 received payments 1 sent payments 2 all payments   page: (numeric) page number  0 all pages   page size: (numeric, 10) page size  0 use default page size 10    Returns transactions: (array of TRANSACTION)\nTRANSACTION hex: (hex string) raw transaction txid: (hex string) transaction ID txhash: (hex string) transaction hash (differs from txid for witness transactions) size: (numeric) size in byte version: (numeric) version, used to check if protocol matches\nExample Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getTxListByAddr\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;TmbC1Fx1UXNt7D6zpaj83UrAEW7MbcUWuQz\u0026#34;, 2, 0, 0 ],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;total\u0026#34;: 1, \u0026#34;page\u0026#34;: 0, \u0026#34;page_size\u0026#34;: 0, \u0026#34;transactions\u0026#34;: [ { \u0026#34;hex\u0026#34;: \u0026#34;0100000001b5c641e5b4d91a235a61aebe2417b2d9c57283a65517f5b764ce4ff03b086c0683010000ffffffff0200e9a435000000001976a91486439eb19afe8c091a01cbb3813b052f7fa3a08b88acdadf42069f0000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac0000000000000000e33ffd5e016a473044022057ec222a8f2f1c7b0cc44d8c375a73bd0bab7816bfe263a527a0cce22c6e2aa8022078c4dfc7fd715732f2b54f7c2a3928bc247bdc2cf65537983c6cc5eaf1827185012103dc8928f91de8af790e7845d30b3b12871f4db39f35ffecfe3f10a1e3e648dc19\u0026#34;, \u0026#34;txid\u0026#34;: \u0026#34;7a927f4c349e5c304e70febd0e6b31dde6037912513cdc22e20a5d3a9f68bb49\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;6a6dd7bcbd472912654a794ba46c82ce775271a40621fc91ad176069ae638c43\u0026#34;, \u0026#34;size\u0026#34;: 234, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;timestamp\u0026#34;: \u0026#34;2020-07-02T06:01:07+04:00\u0026#34;, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ { \u0026#34;txid\u0026#34;: \u0026#34;066c083bf04fce64b7f51755a68372c5d9b21724beae615a231ad9b4e541c6b5\u0026#34;, \u0026#34;vout\u0026#34;: 387, \u0026#34;sequence\u0026#34;: 4294967295, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;3044022057ec222a8f2f1c7b0cc44d8c375a73bd0bab7816bfe263a527a0cce22c6e2aa8022078c4dfc7fd715732f2b54f7c2a3928bc247bdc2cf65537983c6cc5eaf182718501 03dc8928f91de8af790e7845d30b3b12871f4db39f35ffecfe3f10a1e3e648dc19\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;473044022057ec222a8f2f1c7b0cc44d8c375a73bd0bab7816bfe263a527a0cce22c6e2aa8022078c4dfc7fd715732f2b54f7c2a3928bc247bdc2cf65537983c6cc5eaf1827185012103dc8928f91de8af790e7845d30b3b12871f4db39f35ffecfe3f10a1e3e648dc19\u0026#34; } } ], \u0026#34;vout\u0026#34;: [ { \u0026#34;amount\u0026#34;: 900000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 86439eb19afe8c091a01cbb3813b052f7fa3a08b OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a91486439eb19afe8c091a01cbb3813b052f7fa3a08b88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;TmbC1Fx1UXNt7D6zpaj83UrAEW7MbcUWuQz\u0026#34; ] } }, { \u0026#34;amount\u0026#34;: 683004846042, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a0 OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;Tme9dVJ4GeWRninBygrA6oDwCAGYbBvNxY7\u0026#34; ] } } ], \u0026#34;blockhash\u0026#34;: \u0026#34;e2ec97db55cff510e30f104e27c9fb687ef7c846fb025dcc1e08b671ee1a2f34\u0026#34;, \u0026#34;confirmations\u0026#34;: 1141 } ] } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/gettx/",
	"title": "getTx",
	"tags": [],
	"description": "",
	"content": "wallet_getTx get transaction by ID\nParameters  txID: (hex string) transaction ID  Returns Example Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getTx\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;86140f1fa1e7d95707ec7e61748b91838e24a00ca8803f299c7caca591ff1af4\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;hex\u0026#34;: \u0026#34;010000000149bb689f3a5d0ae222dc3c51127903e6dd316b0ebdfe704e305c9e344c7f927a00000000ffffffff0200e1f505000000001976a914a0e30372347bc1e945f5086b7bbeaa38d912dcfe88aca888ae2f000000001976a91486439eb19afe8c091a01cbb3813b052f7fa3a08b88ac00000000000000008215895f016a473044022038fc5c5fef1a7a3bb0117b53556137c75dd9f4970387f2fc2c28c65d30655cea022077eeb7f1a105d9b9353517dc19c6af9ae953a875986bbbe7f5e69cfb3f8a78b2012102e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92\u0026#34;, \u0026#34;txid\u0026#34;: \u0026#34;86140f1fa1e7d95707ec7e61748b91838e24a00ca8803f299c7caca591ff1af4\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;9f3b9d8bf6f893c3b66ef5cd09d73ef3551b93c87d706bedda6ba4a104d469e0\u0026#34;, \u0026#34;size\u0026#34;: 234, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;timestamp\u0026#34;: \u0026#34;2020-10-16T11:37:38+08:00\u0026#34;, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ { \u0026#34;txid\u0026#34;: \u0026#34;7a927f4c349e5c304e70febd0e6b31dde6037912513cdc22e20a5d3a9f68bb49\u0026#34;, \u0026#34;vout\u0026#34;: 0, \u0026#34;sequence\u0026#34;: 4294967295, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;3044022038fc5c5fef1a7a3bb0117b53556137c75dd9f4970387f2fc2c28c65d30655cea022077eeb7f1a105d9b9353517dc19c6af9ae953a875986bbbe7f5e69cfb3f8a78b201 02e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;473044022038fc5c5fef1a7a3bb0117b53556137c75dd9f4970387f2fc2c28c65d30655cea022077eeb7f1a105d9b9353517dc19c6af9ae953a875986bbbe7f5e69cfb3f8a78b2012102e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92\u0026#34; } } ], \u0026#34;vout\u0026#34;: [ { \u0026#34;amount\u0026#34;: 100000000, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 a0e30372347bc1e945f5086b7bbeaa38d912dcfe OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a914a0e30372347bc1e945f5086b7bbeaa38d912dcfe88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;Tmdcmmo7JqxxwHy6r46Sx2ZRbVF2dSjG9mm\u0026#34; ] } }, { \u0026#34;amount\u0026#34;: 799967400, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 86439eb19afe8c091a01cbb3813b052f7fa3a08b OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a91486439eb19afe8c091a01cbb3813b052f7fa3a08b88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;TmbC1Fx1UXNt7D6zpaj83UrAEW7MbcUWuQz\u0026#34; ] } } ], \u0026#34;blockhash\u0026#34;: \u0026#34;2a215f23d2d4269ee235d730049cbdd18721de11b58e56fe29859f77f64ef82c\u0026#34;, \u0026#34;confirmations\u0026#34;: 12 } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/gettxlistbyaddr/",
	"title": "getTxListByAddr",
	"tags": [],
	"description": "",
	"content": "wallet_getTxListByAddr get transactions affecting specific address, one transaction could affect MULTIPLE addresses\nParameters  addr: (string) address filter: (numeric) filter  0 received payments 1 sent payments 2 all payments   page: (numeric) page number  0 all pages   page size: (numeric, 10) page size  0 use default page size 10    Returns Example Request {\u0026#34;id\u0026#34;:1574750774018,\u0026#34;method\u0026#34;:\u0026#34;wallet_getTxListByAddr\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;TmhJcjphz3Y3jRysKT56JaH8m9pzAzsFMu7\u0026#34;,2,-1,100]} Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1574750774018, \u0026#34;result\u0026#34;: { \u0026#34;Total\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1000000000, \u0026#34;transactions\u0026#34;: [ { \u0026#34;hex\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;txid\u0026#34;: \u0026#34;47879fb9dea684e4ce6f24f30812d3832d11fee34400754c6d8b34cd7d7eba8f\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;937de7e15ec48e9cd58d79c594e7395015d5c663924ab5af929a9ef5e5f2e446\u0026#34;, \u0026#34;size\u0026#34;: 377, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ ... ], \u0026#34;vout\u0026#34;: [ ... ], \u0026#34;blockhash\u0026#34;: \u0026#34;026c6c85a1ae0183fe2e8bfda3450b9990acf9b8c4af3e995f9e361c7bb3d4cd\u0026#34;, \u0026#34;confirmations\u0026#34;: 0 } ] } }"
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/getutxo/",
	"title": "getUtxo",
	"tags": [],
	"description": "",
	"content": "wallet_getUtxo get UTXOs of specific address\nParameters  addr: (string) address  Returns Example Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_getUTxo\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;Tme9dVJ4GeWRninBygrA6oDwCAGYbBvNxY7\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: [ { \u0026#34;TxId\u0026#34;: \u0026#34;6838ccafe8747007e9dcb918852833d5867ca4cdf5e48e2c419c0ff61927403b\u0026#34;, \u0026#34;Index\u0026#34;: 0, \u0026#34;Amount\u0026#34;: 100000000 }, { \u0026#34;TxId\u0026#34;: \u0026#34;83f481422d30ad3587afa78c36e1a2d29a28813528ad24f347c5845c32148ade\u0026#34;, \u0026#34;Index\u0026#34;: 1, \u0026#34;Amount\u0026#34;: 676344792042 } ] } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/importprivkey/",
	"title": "importPrivKey",
	"tags": [],
	"description": "",
	"content": "ui_importPrivKey imports a private key to the wallet and writes the new wallet to disk.\nNote: this private key is in a hex string and you may generate it with qx wiftopriv tool from a WIF key, which should be compatible with BTC network (in contrast to dumpPrivKey and importWIFPrivKey, both are incompatible). You may export this WIF key from any wallet service that follows this rule, such as KAHF\nParameters  accountName: (string) name of the imported account. MUST be: \u0026ldquo;imported\u0026rdquo; privKey: (hex string) private key.  Returns Success null\nError -32000 -4 imported addresses must belong to the imported account\nExample Request curl --location --request POST \u0026#39;http://127.0.0.1:8130/api/\u0026#39; -u test:test -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;id\u0026#34;:1, \u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_importPrivKey\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;imported\u0026#34;, \u0026#34;9999999999999999999999999999999999999999999999999999999999999999\u0026#34;]}\u0026#39; Response {\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1,\u0026#34;result\u0026#34;:null} "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/importwifprivkey/",
	"title": "importWifPrivKey",
	"tags": [],
	"description": "",
	"content": "wallet_importWifPrivKey info: 导入wif格式私钥 args：  accountName 导入账户,目前只支持imported privKey 私钥 rescan bool,是否重新扫描交易记录  example: {\u0026#34;id\u0026#34;:1574750774018,\u0026#34;method\u0026#34;:\u0026#34;wallet_importWifPrivKey\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;imported\u0026#34;,\u0026#34;xxxxx\u0026#34;,false]} "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/hash/keccak256/",
	"title": "keccak256",
	"tags": [],
	"description": "",
	"content": "Perform a keccak256 of Base16 data.\nkeccak256 calculate legacy keccak 256 hash of a bash16 data.\n~ qx keccak-256 --help Usage: qx keccak-256 [hexstring] Example ~ qx keccak-256 900df00d 4ceee8dafd892f10425a56dfde748a49fdc1b6ff85822170a059ad9080c2b3f3 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/qitmeerd/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "List Parameters Returns Success Error Example Request Response "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/lock/",
	"title": "lock",
	"tags": [],
	"description": "",
	"content": "ui_lock lock wallet\nParameters  password: (string) wallet password second: (numeric) unlock duration, unit second  Returns Example Request {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_lock\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;id\u0026#34;:1} Response "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/ui/makeseed/",
	"title": "makeSeed",
	"tags": [],
	"description": "",
	"content": "ui_makeSeed make wallet HD seed and mnemonic\nParameters Returns Success  seed: (hex string) a cryptographically secure random seed mnemonic: (array of string) the mnemonic words for the given seed  Example Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;ui_makeSeed\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;seed\u0026#34;: \u0026#34;0d82f3214e900c039c8e05c04bef5f22bdf5804344e69e8f7426e90fabb0eb178a8c4f99850c77be09f609b7145799fb0772c1c0c1087acd55868240755a437a\u0026#34;, \u0026#34;mnemonic\u0026#34;: \u0026#34;river immense robust crucial patrol kingdom trick enter jacket similar feed pitch juice focus ramp merry occur blast pepper case gentle left sea margin\u0026#34; } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/entropy/mnemonic/",
	"title": "mnemonic",
	"tags": [],
	"description": "",
	"content": "mnemonic-new create a mnemonic world-list (BIP39) from an entropy.\n~ qx mnemonic-new --help Usage: qx mnemonic-new [entropy] Example ~ qx mnemonic-new 4ec6a3a135aba433b0d0ae5ec31d69c26eb3bd5ac532496529660f61c674d99e excite crush tribe hero ripple border select beyond gain body foil luggage twenty team help play enact citizen flower burst broccoli denial grid spike  mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39).\n~ qx mnemonic-to-entropy --help Usage: qx mnemonic-to-entropy [mnemonic] Example 1 ~ qx mnemonic-to-entropy \u0026#39;excite crush tribe hero ripple border select beyond gain body foil luggage twenty team help play enact citizen flower burst broccoli denial grid spike\u0026#39; 4ec6a3a135aba433b0d0ae5ec31d69c26eb3bd5ac532496529660f61c674d99e  mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed.\n~ qx mnemonic-to-seed --help Usage: qx mnemonic-to-seed [mnemonic] -p string An optional passphrase for converting the mnemonic to a seed Example 2 ~ qx mnemonic-to-seed \u0026#39;excite crush tribe hero ripple border select beyond gain body foil luggage twenty team help play enact citizen flower burst broccoli denial grid spike\u0026#39; 5ccb173392641a7e5edc8d5f30e5ce314aada7f0b8e1169c2b67f81e80b5d95504629aabcd108264e0a16f03a9146f75552f37ed33cce16b9b4bf279b5df96a0 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/ui/recoverwallet/",
	"title": "recoverWallet",
	"tags": [],
	"description": "",
	"content": "ui_recoverWallet Recover Wallet wallet by mnemonic\nParameters  mnemonic: (hex string) the mnemonic words walletPass: (string) wallet password unlockPass: (string) unlock password  Returns Success null\nError -32000\n seed hex err: Invalid menomic wallet exist  Example Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;ui_recoverWallet\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;river immense robust crucial patrol kingdom trick enter jacket similar feed pitch juice focus ramp merry occur blast pepper case gentle left sea margin\u0026#34;, \u0026#34;walletPass\u0026#34;, \u0026#34;unlockPass\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: null } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/qitmeerd/reset/",
	"title": "reset",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/sendrawtransaction/",
	"title": "sendRawTransaction",
	"tags": [],
	"description": "",
	"content": "sendRawTransaction send raw transactions\nParameters  hexTx: (hex string) hex string of signed transaction allowHighFees: (bool, default=false) if allows high fee  Returns (hex string) Errors  Signature failed  Example    { \u0026#34;code\u0026#34;: -32000, \u0026#34;message\u0026#34;: \u0026#34;Rule Error : Rejected transaction c69ea9d7457379984d5a0af0568f296289ec791bbd522d2f6057924ed12b8089: failed to validate input c69ea9d7457379984d5a0af0568f296289ec791bbd522d2f6057924ed12b8089:0 which references output {cfd933e4590a3cfbcf94e9220c77834fe8a869414c51e3bd0ce5af23592e80f9 0} - verify failed (input script bytes 47304402203aa2f8bcfac55e76b84320a119dcd73955e2c644abe590b8ce99abaf7bf51f5902205e973da66669d80009d6f5d848dd0bed50abf1b69acd43eda02bdb6cfdd0157f012102e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92, prev output script bytes 76a914844d0a82845bccd469afc5cb78d8ffaa3142edea88ac)\u0026#34; } exceed high fee  example    { \u0026#34;code\u0026#34;: -32000, \u0026#34;message\u0026#34;: \u0026#34;Deserialization Error : rejected: failed to process transaction 0766b6dfd578952f52842cc4fb72f95f40258ee8aadff41897567a82c2b92e71: transaction 0766b6dfd578952f52842cc4fb72f95f40258ee8aadff41897567a82c2b92e71 has 420995400 fee which is above the allowHighFee check threshold amount of 20100000 (= 201 byte * 10000 AtomMEER/kB * 10000)\u0026#34; } Example Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;sendRawTransaction\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;0100000001f9802e5923afe50cbde3514c4169a8e84f83770c22e994cffb3c0a59e433d9cf01000000ffffffff01804a5d05000000001976a914a6b8fe2348fad076b7fd1b34b7e5b35db96dc2a088ac00000000000000001141cb5f016b483045022100b8ab0acf7f282e167669e3f20920c81b06554bc1fd5b41c4dd44ab4f3319a92f02200b664f920c77a7d8ac695380c22ec3131e2bd8f27617f84883fe9cf6d6bea0a1012102e8d120c3c729e636fe2909b02c65c025cb7f3f57d9891f4f566dd4724e82eb92\u0026#34;, true],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:18131 | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;0766b6dfd578952f52842cc4fb72f95f40258ee8aadff41897567a82c2b92e71\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/sendtoaddress/",
	"title": "sendToAddress",
	"tags": [],
	"description": "",
	"content": "wallet_sendToAddress sends the passed amount to the given address.\nNOTE  This function requires to the wallet to be unlocked. See wallet_unlock The amount cannot exceed 21,000,000  Parameters  address: (hex string) the given address amount: (numeric) passed amount coinID: (numeric) 0 =\u0026gt; MEER 1=\u0026gt; MEER balance  Returns Success TxID: (hex string) the TxID for the created transaction\nError -32000 -13 Enter the wallet passphrase with walletpassphrase first\nExample Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_sendToAddress\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;Tmdcmmo7JqxxwHy6r46Sx2ZRbVF2dSjG9mm\u0026#34;, 1 , 0],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;86140f1fa1e7d95707ec7e61748b91838e24a00ca8803f299c7caca591ff1af4\u0026#34; } Request Send MEER To EVM $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_sendToAddress\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;Tk6uJDaurxqPrg2bZqBa9XSpUcakebZ6EU1u9qqHNDcNW2MyeTtbX\u0026#34;, 10 , 1],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;86140f1fa1e7d95707ec7e61748b91838e24a00ca8803f299c7caca591ff1af4\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/sendtoaddressbyaccount/",
	"title": "sendToAddressByAccount",
	"tags": [],
	"description": "",
	"content": "wallet_sendToAddressByAccount send passed amount using specific account\nNOTE  This function requires to the wallet to be unlocked. See wallet_unlock The amount cannot exceed 21,000,000  Parameters  accountName: (string) from account addressStr: (string) to address amount: (numeric) send amount coin comment: (string) not used, reserved for future use commentTo: (string) not used, reserved for future use  Returns Success TxID: (hex string) the TxID for the created transaction\nError -32000\n -13 Enter the wallet passphrase with walletpassphrase first -32603 transaction output amount exceeds maximum value -32603 balance is not enough,please deduct the service charge  Example Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_sendToAddressByAccount\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;test\u0026#34;, \u0026#34;Tmb1dCAB8ixNC6d2VtdCYZuhXBVPbnRVi7y\u0026#34;, 0.999, \u0026#34;MEER\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;cfd933e4590a3cfbcf94e9220c77834fe8a869414c51e3bd0ce5af23592e80f9\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/sendtomany/",
	"title": "sendToMany",
	"tags": [],
	"description": "",
	"content": "wallet_sendToMany sends multiple amounts to multiple addresses using the provided account as a source of funds in a single transaction. Only funds with the default number of minimum confirmations will be used.\nNOTE  This function requires to the wallet to be unlocked. See wallet_unlock The amount cannot exceed 21,000,000  Parameters addAmounts: (map[address:string]amount:numeric) address to amount pairs\nReturns Success TxID: (hex string) the TxID for the created transaction\nError -32000 -13 Enter the wallet passphrase with walletpassphrase first\nExample Request $ curl -sk -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_sendToMany\u0026#34;,\u0026#34;params\u0026#34;:[{\u0026#34;TmVLfSPy3NZY1uDjJka92hqpPJR9k2XztQb\u0026#34;:0.9, \u0026#34;TmR1kwdfb6pyQRNoJJMU2M62qEqJzqXPNBw\u0026#34;:0.99}, \u0026#34;MEER\u0026#34; ],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api |jq . Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;75ea0ca21e7626941574df0d0d64e69793e806216d34cfd8400ef09249fc44c7\u0026#34; } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/txsign/sign_verify/",
	"title": "sign and verify",
	"tags": [],
	"description": "",
	"content": " Do not use the private key used in this column. It is dangerous.\n msg-sign create a message signature.\n~ qx msg-sign --help Usage: msg-sign [wif] [message] -d show signature details -m string the msg signature mode (default \u0026#34;qx\u0026#34;) Example ~ qx msg-sign KyLSXswbDdBfrJoN6nPc8kPZJHEF5cBYey7f77dfnTFwGVEw1XGQ 'hello word' ILKbIq3qp9zI6fTD6U4PKWe/MGIywzuejFCyVpze29LPDSFSPeDiHqoJdYzfKPMVD62T49c0TfjamCRSpjHhoeg= show signature details ~ qx msg-sign -d KyLSXswbDdBfrJoN6nPc8kPZJHEF5cBYey7f77dfnTFwGVEw1XGQ \u0026#39;hello word\u0026#39; mode: qx hash: 1ec592f0228c98f7b9beedc73b8ea91e71b34f3c11cd1064d01b54b7f060beb4 signature: 3045022100b29b22adeaa7dcc8e9f4c3e94e0f2967bf306232c33b9e8c50b2569cdedbd2cf02200d21523de0e21eaa09758cdf28f3150fad93e3d7344df8da982452a631e1a1e8 (base64): MEUCIQCymyKt6qfcyOn0w+lODylnvzBiMsM7noxQslac3tvSzwIgDSFSPeDiHqoJdYzfKPMVD62T49c0TfjamCRSpjHhoeg= R: b29b22adeaa7dcc8e9f4c3e94e0f2967bf306232c33b9e8c50b2569cdedbd2cf S: d21523de0e21eaa09758cdf28f3150fad93e3d7344df8da982452a631e1a1e8 compactsign: 20b29b22adeaa7dcc8e9f4c3e94e0f2967bf306232c33b9e8c50b2569cdedbd2cf0d21523de0e21eaa09758cdf28f3150fad93e3d7344df8da982452a631e1a1e8 (base64): ILKbIq3qp9zI6fTD6U4PKWe/MGIywzuejFCyVpze29LPDSFSPeDiHqoJdYzfKPMVD62T49c0TfjamCRSpjHhoeg= compressed: true  msg-verify validate a message signature.\n~ qx msg-verify --help Usage: msg-verify [addr] [signature] [message] -m string the msg signature mode (default \u0026#34;qx\u0026#34;) Example 1 The TmPip5CkA4e3fBRp7eo9onDYfVnba547uts is generated by KyLSXswbDdBfrJoN6nPc8kPZJHEF5cBYey7f77dfnTFwGVEw1XGQ private key.\n ~ qx msg-verify TmPip5CkA4e3fBRp7eo9onDYfVnba547uts ILKbIq3qp9zI6fTD6U4PKWe/MGIywzuejFCyVpze29LPDSFSPeDiHqoJdYzfKPMVD62T49c0TfjamCRSpjHhoeg= \u0026#39;hello word\u0026#39; true "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/qitmeerd/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "Status Parameters Returns Success Error Example Request Response "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/syncstats/",
	"title": "syncStats",
	"tags": [],
	"description": "",
	"content": "wallet_syncStats 查看当前钱包同步高度\nParameters Returns Example Request {\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_syncStats\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;id\u0026#34;:1} Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;Height\u0026#34;: 20460 } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": "Qitmeer Tutorials List  Development Environment Qitmeer Installation Qitmeer Cross-chain Atomic-swapping Qitmeer Miner Guide Qitmeer Rpc Guide Qitmeer Wallet Rpc Guide Qitmeer JS Guide Qitmeer Java Sdk Mount Swap Memory Exchange Guide Contribute Docs  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/wallet/unlock/",
	"title": "unlock",
	"tags": [],
	"description": "",
	"content": "wallet_unlock unlocks the wallet\u0026rsquo;s address manager and relocks it after timeout has expired. If the wallet is already unlocked and the new passphrase is correct, the current timeout is replaced with the new one. The wallet will be locked if the passphrase is incorrect or any other error occurs during the unlock.\nParameters  passphrase: (string) wallet private password timeout: (numeric)   negative unlock indefinitely postive unlock duration, unit second  Returns Success null Error -32000 invalid passphrase for master private key\nExample Request curl -k -u \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;wallet_unlock\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;password\u0026#34;, 999999999],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api Response {\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;id\u0026#34;:1,\u0026#34;result\u0026#34;:null} "
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/qitmeerd/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/en/wallet-json-rpc-api/ui/walletstatus/",
	"title": "walletStatus",
	"tags": [],
	"description": "",
	"content": "ui_walletStatus wallet info\nParameters Returns Success  status: (string)  err - error happened nil - wallet not exists closed - wallet closed lock - wallet locked unlock - wallet unlocked    Example Request curl -sku \u0026#34;test:test\u0026#34; -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;ui_walletStatus\u0026#34;,\u0026#34;params\u0026#34;:[],\u0026#34;id\u0026#34;:1}\u0026#39; http://127.0.0.1:8130/api | jq Response { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;result\u0026#34;: { \u0026#34;stats\u0026#34;: \u0026#34;lock\u0026#34; } } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/",
	"title": "Commands References",
	"tags": [],
	"description": "",
	"content": " Qx Tools Qitmeer-cli Qitmeer-Miner  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/txsign/",
	"title": "Addr Tx Sign",
	"tags": [],
	"description": "",
	"content": "addr \u0026amp; tx \u0026amp; sign ec-to-addr convert an EC public key to a paymant address. default is qx address. tx-encode encode a unsigned transaction. tx-decode decode a transaction in base16 to json format. tx-sign sign a transactions using a private key. msg-sign create a message signature. msg-verify validate a message signature. "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/entropy/ec/",
	"title": "EC",
	"tags": [],
	"description": "",
	"content": "ec-new create a new EC private key from an entropy (seed).\n~ qx ec-new --help Usage: qx ec-new [entropy] -c string the elliptic curve is using (default \u0026#34;secp256k1\u0026#34;) use secp256k1 ~ qx ec-new 4ec6a3a135aba433b0d0ae5ec31d69c26eb3bd5ac532496529660f61c674d99e 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239  Currently only secp256k1 is supported.\n  ec-to-public derive the EC public key from an EC private key (the compressed format by default ).\n~ qx ec-to-public --help Usage: qx ec-to-public [ec_private_key] -u using the uncompressed public key format compressed ~ qx ec-to-public 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 034d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70 uncompressed ~ qx ec-to-public -u 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 044d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d701df9f31658a5578a8ded7ef2c681033ce0037823f3ed308c06ae7b1b06ce070f  ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default.\n~ qx ec-to-wif --help Usage: qx ec-to-wif [ec_private_key] -u using the uncompressed public key format wif compressed ~ qx ec-to-wif 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 KyLSXswbDdBfrJoN6nPc8kPZJHEF5cBYey7f77dfnTFwGVEw1XGQ wif uncompressed ~ qx ec-to-wif -u 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239 5JJ6LEMXQhpjLKzBDe23XJXwSfZuafnSJDG6v3QiQtiStcHbZYA "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/",
	"title": "Qx Tools",
	"tags": [],
	"description": "",
	"content": "Qx user guide Qx is a command-line tool that provides a variety of commands for key management and transaction construction, such as random \u0026ldquo;seed\u0026rdquo; generation, public/private key encoding etc. qx cab be built and distributed as a single file binary, which works like the swiss army knife of qitmeer.\nPlease see more details at https://github.com/Qitmeer/qx\nPrerequisites Update Go to version at least 1.12 (required \u0026gt;= 1.12)\nCheck your golang version\n~ go version go version go1.12 darwin/amd64 How to build ~ mkdir -p /tmp/work ~ cd /tmp/work ~ git clone https://github.com/Qitmeer/qx.git ~ cd qx ~ go build ~ ./qx --version Qx Version : \u0026#34;0.0.1\u0026#34; qx Commands ~ qx Usage: qx [--version] [--help] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] encode and decode : base58-encode encode a base16 string to a base58 string base58-decode decode a base58 string to a base16 string base58check-encode encode a base58check string base58check-decode decode a base58check string base64-encode encode a base16 string to a base64 string base64-decode decode a base64 string to a base16 string rlp-encode encode a string to a rlp encoded base16 string rlp-decode decode a rlp base16 string to a human-readble representation hash : blake2b256 calculate Blake2b 256 hash of a base16 data. blake2b512 calculate Blake2b 512 hash of a base16 data. sha256 calculate SHA256 hash of a base16 data. sha3-256 calculate SHA3 256 hash of a base16 data. keccak-256 calculate legacy keccak 256 hash of a bash16 data. blake256 calculate blake256 hash of a base16 data. ripemd160 calculate ripemd160 hash of a base16 data. bitcion160 calculate ripemd160(sha256(data)) hash160 calculate ripemd160(blake2b256(data)) entropy (seed) \u0026amp; mnemoic \u0026amp; hd \u0026amp; ec entropy generate a cryptographically secure pseudorandom entropy (seed) hd-new create a new HD(BIP32) private key from an entropy (seed) hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key hd-to-public derive the HD (BIP32) public key from a HD private key hd-decode decode a HD (BIP32) private/public key serialization format hd-derive Derive a child HD (BIP32) key from another HD public or private key. mnemonic-new create a mnemonic world-list (BIP39) from an entropy mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39) mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed. ec-new create a new EC private key from an entropy (seed). ec-to-public derive the EC public key from an EC private key (the compressed format by default ) ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default. wif-to-ec convert a WIF private key to an EC private key. wif-to-public derive the EC public key from a WIF private key. addr \u0026amp; tx \u0026amp; sign ec-to-addr convert an EC public key to a paymant address. default is qx address tx-encode encode a unsigned transaction. tx-decode decode a transaction in base16 to json format. tx-sign sign a transactions using a private key. msg-sign create a message signature msg-verify validate a message signature Qx Generate address by mnemonic # create qitmeer mainnet address by mnemonic ~ echo \u0026#34;dune school cash fancy post theory sense again earth divide balcony always\u0026#34;|qx mnemonic-to-seed | qx ec-new |qx ec-to-public|qx ec-to-addr # qng address MmVipyQydGr6xN3qNkwBS48fzENUAYmnTZh KAHF Generate qng address by mnemonic # import new wallet with mnemonic ~ dune school cash fancy post theory sense again earth divide balcony always Qx Generate evm bip44 address by mnemonic # create qitmeer mainnet address by mnemonic ~ echo \u0026#34;dune school cash fancy post theory sense again earth divide balcony always\u0026#34;|qx mnemonic-to-seed|qx hd-new -v bip32|qx hd-derive -v bip32 -p \u0026#34;m/44\u0026#39;/60\u0026#39;/0\u0026#39;/0/0\u0026#34;|qx hd-to-ec -v bip32|qx ec-to-public|qx ec-to-ethaddr # qng evm | eth | bsc address 0x2cb3aD95bE524F9d34E17Da37a901F63fa12Ba35 KAHF Generate evm bip44 address by mnemonic # import new wallet with mnemonic ~ dune school cash fancy post theory sense again earth divide balcony always "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/hash/ripemd160/",
	"title": "ripemd160",
	"tags": [],
	"description": "",
	"content": "Perform a ripemd160 of Base16 data.\nripemd160 calculate ripemd160 hash of a base16 data.\n~ qx ripemd160 --help Usage: qx ripemd160 [hexstring] Example ~ qx ripemd160 900df00d 31589998e7e92e769bfd5d453d12fbfa17c86297 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-miner/",
	"title": "Qitmeer-Miner",
	"tags": [],
	"description": "",
	"content": "Qitmeer-Miner user guide qitmeer-miner is the miner tool for qitmeer network , it can get reward by generate block.\nPrerequisites Update Go to version at least 1.12 (required \u0026gt;= 1.12)\nCheck your golang version\n$ go version \u0026gt;= 1.12 $ cargo \u0026gt;= 1.36.0 (c4fcfb725 2019-05-15) Compile $ git clone git@github.com:Qitmeer/qitmeer-miner.git $ cd lib/cuckoo $ cargo build --release  Ubuntu ENV  $ sudo apt-get install beignet-dev nvidia-cuda-dev nvidia-cuda-toolkit $ go build  Centos ENV  $ sudo yum install opencl-headers $ sudo yum install ocl-icd $ sudo ln -s /usr/lib64/libOpenCL.so.1 /usr/lib/libOpenCL.so $ go build  MAC  go build  Windows ENV  Prequisite:  Install Build Tools for Visual Studio:\nhttps://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools\u0026amp;rel=16 Build  $ go build Any questions can see issues or can create Run $ cp qitmeer.conf.example qitmeer.conf  1.run with the config file qitmeer.conf 2.run with command  - 1.run with the config file `qitmeer.conf` - 2.run with command $ ./qitmeer-miner -h Usage: qitmeer-miner [OPTIONS] Debug Command: -l, --listdevices List number of devices. The Config File Options: -C, --configfile= Path to configuration file --minerlog= Write miner log file The Necessary Config Options: -P, --pow= blake2bd|cuckaroo|cuckatoo (blake2bd) -S, --symbol= Symbol (PMEER) -N, --network= network privnet|testnet|mainnet (mainnet) The Solo Config Option: -M, --mineraddress= Miner Address -s, --rpcserver= RPC server to connect to (127.0.0.1) -u, --rpcuser= RPC username -p, --rpcpass= RPC password --randstr= Rand String,Your Unique Marking. (Come from Qitmeer!) --notls Do not verify tls certificates (true) --rpccert= RPC server certificate chain for validation The pool Config Option: -o, --pool= Pool to connect to (e.g.stratum+tcp://pool:port) -m, --pooluser= Pool username -n, --poolpass= Pool password The Optional Config Option: --cpuminer CPUMiner (false) --proxy= Connect via SOCKS5 proxy (eg. 127.0.0.1:9050) --proxyuser= Username for proxy server --proxypass= Password for proxy server --trimmerTimes= the cuckaroo trimmer times (40) --intensity= Intensities (the work size is 2^intensity) per device. Single global value or a comma separated list. (24) --worksize= The explicitly declared sizes of the work to do per device (overrides intensity). Single global value or a comma separated list. (256) --timeout= rpc timeout. (60) --use_devices= all gpu devices,you can use ./qitmeer-miner -l to see. examples:0,1 use the #0 device and #1 device --max_tx_count= max pack tx count (1000) --max_sig_count= max sign tx count (5000) --log_level= info|debug|error|warn|trace (debug) --stats_server= stats web server (127.0.0.1:1235) --edge_bits= edge bits (24) --local_size= local size (4096) --group_size= work group size (256) Help Options: -h, --help Show this help message Stats Web Server  add param stats_server=127.0.0.1:1235 in qitmeer.conf brower explorer http://127.0.0.1:1235\n  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/hash/bitcion160/",
	"title": "bitcoin160",
	"tags": [],
	"description": "",
	"content": "calculate ripemd160( sha256( data ) )\n~ qx bitcoin160 --help Usage: qx bitcoin160 [hexstring] Example ~ qx bitcoin160 900df00d 49f180cdaa4c6564f74a0b0321633bbcba4ef9c5 Is equivalent to the following example\n~ qx sha256 900df00d | qx ripemd160 49f180cdaa4c6564f74a0b0321633bbcba4ef9c5 "
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/qitmeer-block-dag/",
	"title": "Block DAG",
	"tags": [],
	"description": "",
	"content": "Q: relationship between blockchain and blockDAG.\nA: Through the evolving history from BlockChain to BlockDAG, it may indicate that BlockChain is a particular case of BlockDAG in the event of low throughput, which means both are the same in essence. As a result, it is the scaling approach whose paradigm is the closest to the bitcoin network. BlockDAG is robust since it inherits all the long-time-proved stable features of bitcoin. Furthermore, it could scale infinitely in terms of protocol, unless it is limited physically, such as network bandwidth and propagation delay. A robust public chain is an optimal basis for incorporating further scaling solutions, such as sharding and state-channels; thus, BlockDAG is the preferred scaling solution of Qitmeer.\nQ: how does SPECTRE work with GHOSTDAG.\nA: SPECTRE works perfectly for the payment network. Its stateless voting consensus algorithms brings extreme fast confirmation time; in other words, users wait merely a few seconds to accept a transaction. However, the trade-off is that it does not support the total ordering of transactions that GhostDAG could offer, which will bring two problems.\nFirstly, it would make double-spending transactions delayed indefinitely. This weakness will merely affect malicious users since only they have the capability. Nevertheless, Qitmeer hopes that the protocol is robust enough to make sure every case behaving consistently. Therefore, once such incident happens, GhostDAG will solve the conflict by their global order.\nSecondly, the rewards mechanism requires an ordered block list to prioritize mining rewards. Although GhostDAG rewarding confirmation is not as fast as SPECTRE, the mining rewards demands a long time maturity to spend, which is quite enough for GhostDAG to reach confirmation.\nQ: Qitmeer innovation on BlockDAG.\nA: Qitmeer consensus protocol mainly originates from 3 BlockDAG papers published by DAGlabs - SPECTRE, GHOSTDAG and Inclusive.\nSPECTRE\u0026rsquo;s matches the high liquidity demands of Qitmeer due to its fast confirmation, high throughput and bitcoin equivalent security. GHOSTDAG solves SPECTRE\u0026rsquo;s weak liveness and provides total ordering service for rewards mechanism.\nQitmeer utilizes Inclusive to design its rewards mechanism, which has provided a weighted algorithm to balance the priority service in terms of transaction fee and transaction collision.\nQitmeer is grateful for DAGlabs work and has contributed power to DAGlabs community as a return. However, as we all believe, there is a long distance from research to implementation.\nFirst, integration has excellent value. Bitcoin\u0026rsquo;s most significant innovation is that it has integrated various existing technologies rather than invented them. As far as we know by now, there are some proof-of-concept projects, even complete projects, implemented an individual protocol, but none of them has integrated all. As I just analyzed, the three papers are solving different problems and should work with each other as a whole system.\nSecond, optimization is critical to practice. The paper provides theory support for core problems but inevitably skips details. For instance, the reference algorithms for SPECTRE and GHOSTDAG are intensive in computation, whereas Qitmeer has optimized both consensus algorithms by totally independent work. Moreover, the high throughput will bring high pressure on ledger storage, Qitmeer has proposed a compact storage solution to alleviate this problem. Also, Qitmeer will give a proposal on how to improve the bandwidth efficiency to increase scalability.\nQ: why choose SPECTRE as core consensus protocol\nA: SPECTRE is a secure BlockDAG protocol with fast confirmation and high throughput. GHOSTDAG supports total ordering of transactions, which is the foundation of on-chain smart contract but sacrifices fast confirmation. So there is a trade-off between fast confirmation and on-chain smart contract.\nQitmeer is dedicated to serving Islamic finance, which requires massive liquidity support, so high throughput and fast confirmation are the most top priority. Qitmeer never planned to implement on-chain smart contract because it is still too intensive in computation even though BlockDAG is scalable. We believe you still have an impression on the CryptoCat incident, which caused ethereum denial of service. Another consideration is that SPECTRE has a more straightforward design and two years maturity. We don\u0026rsquo;t find any security risks feedback so far, so Qitmeer tends to trust it is desirably robust.\n"
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/qitmeer-mining/",
	"title": "Mining",
	"tags": [],
	"description": "",
	"content": "Q: Why choose Cuckoo Cycle POW?\nA: Proof-of-Work(PoW) is used to confirm transactions and produces new blocks, therefore it is a very important engine in PoW cryptocurrencies. PoW must not enable a participant to have a significant advantage over another participant. That is why Satoshi said: \u0026ldquo;Proof-of-work is essentially one-CPU-one-vote.\u0026rdquo; However, most widely used proof-of-work algorithms, such as SHA-256, Blake2b, Scrypt, are more efficient on ASIC devices when compared to CPUs and GPUs. This can lead to ASIC owners posses a much larger voting power than CPU and GPU owners. It violates the “one-CPU-one-vote” principle.\nCuckoo-Cycle-PoW ,a graph-theoretic proof-of-work algorithm. It is ASIC resistant. This algorithm focuses more on memory use, meaning the solution time is bound to memory bandwidth rather than the raw processor or GPU speed.\nThe Cuckoo-Cycle algorithm is designed to find certain subgraphs in large pseudo-random graphs. In particular, Search for cycles of specified length L in a bipartite graph with M edges of N nodes. If a cycle is found and the hash difficulty is less than the target difficulty, the cuckoo cycle PoW is completed.\n"
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/qitmeer-pool-stratum/",
	"title": "Pool Stratum Protocol V1.0",
	"tags": [],
	"description": "",
	"content": "Q: POW HASH\nA: POW Hash GOlang HashMeerXKeccakV1\nC CODE HashMeerXKeccakV1\nQ: Pool Stratum Protocol\nA: stateRoot can get from GetBlockTemplate RPC\n{\u0026quot;id\u0026quot;: null,\u0026quot;method\u0026quot;: \u0026quot;mining.notify\u0026quot;,\u0026quot;params\u0026quot;: [ \u0026quot;job_id\u0026quot;, \u0026quot;prev_hash\u0026quot;, \u0026quot;cb1\u0026quot;, \u0026quot;cb2\u0026quot;, \u0026quot;cb3\u0026quot;, \u0026quot;cb4\u0026quot;, \u0026quot;txs\u0026quot;, \u0026quot;version\u0026quot;, \u0026quot;nBits\u0026quot;, \u0026quot;nTime\u0026quot;, \u0026quot;stateRoot\u0026quot;, // \u0026quot;cleanJobs\u0026quot;, ]}  Q: Pow Header\nA: POW_HEADER\nheader = s.Version + prevHash + merkleRootStr2 + stateRoot + s.Nbits + hex.EncodeToString(ntime) + hex.EncodeToString([]byte{uint8(s.PowType)}) + nonceStr  Q: Change Of CoinBase\nA: 1. [Coinbase amount struct] https://github.com/Qitmeer/qitmeer-miner/blob/master/symbols/qitmeer/coinbase/common.go#L104-L108\nexample old : amount : 12000000000 new : amount { Type : 0, Value: 12000000000}  CoinbaseFee Coinbase add extra output  Q: Change Of Miner\nA: Submit Data\n {PoolUser, jobID, ExtraNonce2, timestampStr,nonceStr}  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/",
	"title": "Qitmeer JSON RPC",
	"tags": [],
	"description": "",
	"content": "JSON-RPC API Reference Block  getBestBlockHash getBlock getBlockByNum getBlockByOrder getBlockCount getBlockhash getBlockhashByRange getBlockHeader getBlockTotal getCoinbase getMainChainHeight getOrphansTotal isBlue isCurrent isOnMainChain tips  Chain  getNodeInfo getPeerInfo  Miner  getBlockTemplate submitBlock  Transaction  createRawTransaction decodeRawTransaction getRawTransaction getUtxo sendRawTransaction txSign  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/qitmeer-tech-architecture/",
	"title": "Qitmeer Tech Architecture",
	"tags": [],
	"description": "",
	"content": "Qitmeer Tech Architecture Architecture Chart Architecture Expained  Qitmeer empowers BlockDAG as its underlying ledger data structure, working with Proof-of-Work based consensus protocol, such as SPECTRE, to provide an open, fair, secure and scalable payment network. Qitmeer assets issurance componet, OP_TOKEN, is based on UTXO transaction model, to support massive token liquidity. OP_TOKEN is backed by native currency and requires authority-owned licenses to publish, which is able to avoid scammer tokens. Qitmeer offers off-chain payment and smart contract protocols to combine various crypto ecomoic scenarios into a unified ecosystem. VM compatiple smart contract platforms, state-channel platforms, crypto assets can converge into Qitmeer through cross-chain interoperbility.  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/qitmeer-tech-highlights/",
	"title": "Qitmeer Tech Highlights",
	"tags": [],
	"description": "",
	"content": " Security  50% fault tolerent, fully decentralized   Scalability  Fast confirmation to seconds order, high throughput to thousands order   Fairness  Not obliged to join mining pools, contribute more mining power, gain more return.   Inclusion  Multiple cross-chain solutions to incorprate various decentralized financal scenarios.   Intrisic Value Guarantee  Tokens are backed by native currency, which is mined by Proof-of-work   Assets Authentication Measure  Require a license warranted by renowned organizations to issue Assets    "
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/qitmeer-tech-roadmap/",
	"title": "Qitmeer Tech Roadmap",
	"tags": [],
	"description": "",
	"content": "recent plan  2019.6.30, Qitmeer Lib and whitepaper open source 2019.8.1, miner open source 2019.9.1, Business whitepaper,Economy Model whitepaper of test net ready, all Qitmeer Project projects open souce 2019.10.1, Qitmeer Token Issurance ready 2019.11.1, Qitmeer Block DAG ready 2019.12.1, Qitmeer OffChain protocol ready 2020.1.1, Qitmeer main chain ready  future plan  Privacy: ZeroKnowledge proof Scalability: Mirco Payment Channel, Sharding solution Interoperability: universal cross-chain protocol, off-chain smart contract  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/qitmeer-token-issuance/",
	"title": "Qitmeer Token Issuance",
	"tags": [],
	"description": "",
	"content": "Qitmeer assets issuance component, OP_TOKEN, is based on UTXO (Unspent Transaction Output) transaction model, to support massive islamic economic liquidity. OP_TOKEN ensures assets backed by native currency and requires authority-owned licenses to publish assets, prevented from scammer assets.\n"
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/entropy/wif/",
	"title": "WIF",
	"tags": [],
	"description": "",
	"content": "wif-to-ec convert a WIF private key to an EC private key.\n~ qx wif-to-ec --help Usage: qx wif-to-ec [WIF] Example ~ qx wif-to-ec KyLSXswbDdBfrJoN6nPc8kPZJHEF5cBYey7f77dfnTFwGVEw1XGQ 3f2314d615696244ea14e46e43322842b3e09333e62c59c4160220a52bdf6239  wif-to-public derive the EC public key from a WIF private key.\n~ qx wif-to-public --help Usage: qx wif-to-public [WIF] -u using the uncompressed public key format compressed ~ qx wif-to-public KyLSXswbDdBfrJoN6nPc8kPZJHEF5cBYey7f77dfnTFwGVEw1XGQ 034d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d70 uncompressed ~ qx wif-to-public -u KyLSXswbDdBfrJoN6nPc8kPZJHEF5cBYey7f77dfnTFwGVEw1XGQ 044d09a78b756b80e02200a94d2e24762432518fb29a4a3fd0adf0414e71554d701df9f31658a5578a8ded7ef2c681033ce0037823f3ed308c06ae7b1b06ce070f "
},
{
	"uri": "https://qitmeer.github.io/docs/en/getstartqng/",
	"title": "Getting Started QNG",
	"tags": [],
	"description": "",
	"content": "Prerequisites Introduction The Qitmeer network implementation with the plug-able VMs under the MeerDAG consensus.\nRun QNG Install  Build from source  ~ git clone https://github.com/Qitmeer/qng.git ~ make or\n Install the latest qng available here: https://github.com/Qitmeer/qng/releases  or\n Build with Docker:  ~ docker build -t qng . Run  We take the construction of network nodes as an example:  ~ cd ./build/bin ~ ./qng or ~ docker run --rm -it --name qng qng:latest ./build/bin/qng --acceptnonstd --modules=qitmeer --modules=p2p MeerEVM  If you want to use our MeerEVM function, the required interface information can be queried in this RPC:  ~ cd ./script ~ ./cli.sh vmsinfo  If you don\u0026rsquo;t need the default configuration, we provide an environment configuration parameter to meet your custom configuration for MeerEVM:  ~ ./qng --evmenv=\u0026quot;--http\u0026quot; or ~ ./qng --evmenv=\u0026quot;--http --http.port=8545 --ws --ws.port=8546\u0026quot; or ~ ./qng --evmenv=\u0026quot;--syncmode=full --gcmode=archive --http --http.addr=0.0.0.0 --http.port=8545 --ws --ws.port=8546 --ws.addr=0.0.0.0 --http.api=eth,web3,net,debug,txpool --ws.api=eth,web3,net,debug,txpool\u0026quot; "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qxtools/hash/hash160/",
	"title": "hash160",
	"tags": [],
	"description": "",
	"content": "calculate ripemd160( blake2b256( data ) )\n~ qx hash160 --help Usage: qx hash160 [hexstring] Example ~ qx hash160 900df00d a7a99d5c4c2b55f876010dd12f6733c99f1e9c1a Is equivalent to the following example\n~ qx blake2b256 900df00d | qx ripemd160 a7a99d5c4c2b55f876010dd12f6733c99f1e9c1a "
},
{
	"uri": "https://qitmeer.github.io/docs/en/faqs/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "FAQ List  Qitmeer Token Issurance Qitmeer Tech Architecture Qitmeer Tech Roadmap Qitmeer Tech Highlights Qitmeer BlockDAG Qitmeer Mining  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/glossary/",
	"title": "Glossary",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/en/",
	"title": "Qitmeer docs",
	"tags": [],
	"description": "",
	"content": "Qitmeer docs  The Qitmeer/Meer documentation \u0026amp; guides and tutorials.\nDocument List  Introduction Getting Started Getting Started QNG Tutorials User Guide \u0026amp; Commands Reference  Qx Tools Qitmeer-cli Qitmeer-Miner   Frequently Asked Questions Glossary  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/",
	"title": "block",
	"tags": [],
	"description": "",
	"content": "block Usage See list Command Usage\nOptions  -h, --help help for block SEE ALSO  qitmeer-cli getBestBlockHash getBlock getBlockByOrder getBlockCount getBlockHash getBlockHashByRange getBlockHeader getBlockWeight getMainChainHeight isOnMainChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/",
	"title": "blockChain",
	"tags": [],
	"description": "",
	"content": "blockChain Usage See list Command Usage\nOptions  -h, --help help for blockChain SEE ALSO  qitmeer-cli createRawTransaction decodeRawTransaction getNodeInfo getPeerInfo getRawTransaction getUtxo sendRawTransaction txSign  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/createrawtransaction/",
	"title": "createRawTransaction",
	"tags": [],
	"description": "",
	"content": "createRawTransaction createRawTx {inTxid:vout}\u0026hellip; {toAddr:amount}\u0026hellip; {lockTime},crate raw transaction\nUsage qitmeer-cli createRawTransaction [flags] Alias   createrawtransaction\n  CreateRawTransaction\n  createRawTx\n  createrawtx\n  CreateRawTx\n  Examples  createRawTransaction b203ff6ba4f39ecf846a103c17f15e35afcbd229f72ad1a9f0a90f07a7535dff:2 RmFFQV5FsuKFU5b4sBjGvpDd6P183iMZRcT:20.3 Options  -h, --help help for createRawTransaction SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/decoderawtransaction/",
	"title": "decodeRawTransaction",
	"tags": [],
	"description": "",
	"content": "decodeRawTransaction decodeRawTransaction {raw_tx}\nUsage qitmeer-cli decodeRawTransaction [flags] Alias   decoderawtransaction\n  DecodeRawTransaction\n  decoderawtx\n  DecodeRawTx\n  decodeRawTx\n  Examples  decodeRawTransaction 0100000002ecca2b71379753f64cd57ac611835272f0381142b4f290affbbf21a4544b4f3c000000006b483045022100c042dfc287ca6aa02fac67dd291b6e0df67af7e1328ba0c932e7bf21b5b2b050022030d8e528d62412085b1f3d9bd1887a80b277b5d6e0d31d9efddf91e5ca207016012103eb2609d195f15b5976d50b119796e9448afd5503f051aaf085aadd46b29ec6a0ffffffff08aa3d2bdfec7da453f1b61cd0f991bc5c2bdd6e5d471f092029581ca8bc1d53000000006a4730440220778d685685d65d3866863a009dd4c62fc7f799825ef9835987dcd08453a401e1022023cf2073d3bb9552871d7fee777785f28c6693e4c0bfa4db1ebd870c57a58546012103fb7863f5d5c8ade2d1dfb1e2171765c5ffeb79012cf034d79d7fe6bb90b32f12ffffffff0400562183000000001976a91420db62bb6e4907083a524df9620bf37922d4c29a88ac005c995a000000001976a914f0ab9022524a632e55beb282a3b766923702367d88ac00f15365000000001976a91459534ae5dde9008b4b53ee38a24baceafef2c8ac88ac3ea4186a000000001976a9142b35121f5554181ec0e7c2a84cb6fa6fe115ac6788ac00000000 Options  -h, --help help for decodeRawTransaction SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/miner/generate/",
	"title": "generate",
	"tags": [],
	"description": "",
	"content": "generate generate {number}, cpu mine {number} blocks\nUsage qitmeer-cli generate [flags] cpu mine block\nAlias  Generate  Examples  generate // generate latest generate 1 Options  -h, --help help for generate SEE ALSO  qitmeer-cli miner  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getbestblockhash/",
	"title": "getBestBlockHash",
	"tags": [],
	"description": "",
	"content": "getBestBlockHash getBestBlockHash\nUsage qitmeer-cli getBestBlockHash [flags] Alias   getbestblockhash\n  GetBestBlockHash\n  Examples  getBestBlockHash Options  -h, --help help for getBestBlockHash SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getblock/",
	"title": "getBlock",
	"tags": [],
	"description": "",
	"content": "getBlock getBlock {number|hash} [verbose]; verbose: defalut true,show block detail,get block by number or hash\nUsage qitmeer-cli getBlock [flags] Alias   getblock\n  GetBlock\n  Examples  getBlock 100 false getBlock 100 getBlock 000000e4c6b7f5b89827711d412957bfff5c51730df05c2eedd1352468313eca getBlock 000000e4c6b7f5b89827711d412957bfff5c51730df05c2eedd1352468313eca true Options  -h, --help help for getBlock SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getblockbyorder/",
	"title": "getBlockByOrder",
	"tags": [],
	"description": "",
	"content": "getBlockByOrder getBlockByOrder {order} {fullTx}\nUsage qitmeer-cli getBlockByOrder [flags] Alias   getblockbyorder\n  GetBlockByOrder\n  Examples  getBlockByOrder 10 true Options  -h, --help help for getBlockByOrder SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getblockcount/",
	"title": "getBlockCount",
	"tags": [],
	"description": "",
	"content": "getBlockCount getBlockCount; count all synchronous blocks\nUsage qitmeer-cli getBlockCount [flags] Alias   getblockcount\n  GetBlockCount\n  Examples  getBlockCount Options  -h, --help help for getBlockCount SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getblockhash/",
	"title": "getBlockHash",
	"tags": [],
	"description": "",
	"content": "getBlockHash getBlockHash {number}; get block hash by number\nUsage qitmeer-cli getBlockHash [flags] Alias   getblockhash\n  GetBlockHash\n  getBlockhash\n  Examples  getBlockHash 100 Options  -h, --help help for getBlockHash SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getblockhashbyrange/",
	"title": "getBlockHashByRange",
	"tags": [],
	"description": "",
	"content": "getBlockHashByRange getBlockHashByRange {start} {end};Return the hash range of block from \u0026lsquo;start\u0026rsquo; to \u0026lsquo;end\u0026rsquo;(exclude self)\nUsage qitmeer-cli getBlockHashByRange [flags] getBlockHashByRange {start} {end};Return the hash range of block from 'start' to 'end'(exclude self) if 'end' is equal to zero, 'start' is the number that from the last block to the Gen if 'start' is greater than or equal to 'end', it will just return the hash of 'start'  Alias   getblockhashbyrange\n  GetBlockHashByRange\n  getBlockhashByRange\n  gethash\n  Examples  getBlockHashByRange 5 22 Options  -h, --help help for getBlockHashByRange SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getblockheader/",
	"title": "getBlockHeader",
	"tags": [],
	"description": "",
	"content": "getBlockHeader getBlockHeader {number|hash} [verbose];verbose:bool,show detail,defalut true; get block by number or hash\nUsage qitmeer-cli getBlockHeader [flags] Alias   getblockheader\n  GetBlockHeader\n  Examples  getBlockHeader 100 false getBlockHeader 100 getBlockHeader 000000e4c6b7f5b89827711d412957bfff5c51730df05c2eedd1352468313eca getBlockHeader 000000e4c6b7f5b89827711d412957bfff5c51730df05c2eedd1352468313eca true Options  -h, --help help for getBlockHeader SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/miner/getblocktemplate/",
	"title": "getBlockTemplate",
	"tags": [],
	"description": "",
	"content": "getBlockTemplate getBlockTemplate; get new block work to mine\nUsage qitmeer-cli getBlockTemplate [flags] get best block template to mine work\nAlias   getblocktemplate\n  GetBlockTemplate\n  Examples  getBlockTemplate Options  -h, --help help for getBlockTemplate SEE ALSO  qitmeer-cli miner  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getblockweight/",
	"title": "getBlockWeight",
	"tags": [],
	"description": "",
	"content": "getBlockWeight getBlockWeight\nUsage qitmeer-cli getBlockWeight [flags] Alias   getBlockWeight\n  getblockweight\n  Examples  getBlockWeight 0000006c77a308846e0e0759bef5ebe0dbf4d49f345b08bdda24642efcc0cb91 Options  -h, --help help for getBlockWeight SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/getmainchainheight/",
	"title": "getMainChainHeight",
	"tags": [],
	"description": "",
	"content": "getMainChainHeight getMainChainHeight\nUsage qitmeer-cli getMainChainHeight [flags] Alias   getMainChainHeight\n  getmainchainheight\n  Examples  GetMainChainHeight Options  -h, --help help for getMainChainHeight SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/mempool/getmempool/",
	"title": "getMempool",
	"tags": [],
	"description": "",
	"content": "getMempool getMempool [type] [verbose]; type: defalut regular; verbose: bool ; get mempool info\nUsage qitmeer-cli getMempool [flags] Alias   getmempool\n  GetMempool\n  Examples  getMempool getMempool regular false getMempool false Options  -h, --help help for getMempool SEE ALSO  qitmeer-cli mempool  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/getnodeinfo/",
	"title": "getNodeInfo",
	"tags": [],
	"description": "",
	"content": "getNodeInfo getNodeInfo\nUsage qitmeer-cli getNodeInfo [flags] Alias  getnodeinfo  Examples  getNodeInfo Options  -h, --help help for getNodeInfo SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/getpeerinfo/",
	"title": "getPeerInfo",
	"tags": [],
	"description": "",
	"content": "getPeerInfo getPeerInfo\nUsage qitmeer-cli getPeerInfo [flags] Alias  getpeerinfo  Examples  getPeerInfo Options  -h, --help help for getPeerInfo SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/getrawtransaction/",
	"title": "getRawTransaction",
	"tags": [],
	"description": "",
	"content": "getRawTransaction getRawTransaction {tx_hash} [verbose]; verbose: bool,show detail,defalut true\nUsage qitmeer-cli getRawTransaction [flags] Alias   getrawtransaction\n  GetRawTransaction\n  getRawTx\n  getrawtx\n  GetRawTx\n  Examples  getRawTransaction 000000e4c6b7f5b89827711d412957bfff5c51730df05c2eedd1352468313eca getRawTransaction 000000e4c6b7f5b89827711d412957bfff5c51730df05c2eedd1352468313eca true Options  -h, --help help for getRawTransaction SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/getutxo/",
	"title": "getUtxo",
	"tags": [],
	"description": "",
	"content": "getUtxo getUtxo {tx_hash} {vout} [include_mempool]; vout:index of the output; include_mempool: default=true,include the mempool , get information about an unspent transaction output\nUsage qitmeer-cli getUtxo [flags] Alias   getutxo\n  GetUtxo\n  Examples  getutxo a97cf4d67bbe5ce57d1d2f4fc18ae2ee19e1048cbb1a14d8d94273bfef83f371 0 true Options  -h, --help help for getUtxo SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/block/isonmainchain/",
	"title": "isOnMainChain",
	"tags": [],
	"description": "",
	"content": "isOnMainChain isOnMainChain {hash}; query whether a given block is on the main chain\nUsage qitmeer-cli isOnMainChain [flags] Alias   isOnMainChain\n  isonmainchain\n  Examples  isOnMainChain 0000006c77a308846e0e0759bef5ebe0dbf4d49f345b08bdda24642efcc0cb91 Options  -h, --help help for isOnMainChain SEE ALSO  qitmeer-cli block  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/mempool/",
	"title": "mempool",
	"tags": [],
	"description": "",
	"content": "mempool Usage See list Command Usage\nOptions  -h, --help help for mempool SEE ALSO  qitmeer-cli getMempool  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/miner/",
	"title": "miner",
	"tags": [],
	"description": "",
	"content": "miner Usage See list Command Usage\nOptions  -h, --help help for miner SEE ALSO  qitmeer-cli generate getBlockTemplate submitBlock  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/",
	"title": "qitmeer-cli",
	"tags": [],
	"description": "",
	"content": "qitmeer-cli Usage The command line utility of Qitmeer and Qitmeer-wallet.\nConfiguration file config.toml will be made automatically\ndownload or build you can download the compiled binary version.\ndownload\nif you have go environment,you can also build it by yourself.\ngit clone https://github.com/Qitmeer/qitmeer-cli.git cd qitmeer-cli go build Command list  Usage: qitmeer-cli [command] block Commands: getBlockCount getBlockCount; count all synchronous blocks getBlockHash getBlockHash {number}; get block hash by number getBlock getBlock {number|hash} [verbose]; verbose: defalut true,show block detail,get block by number or hash getBlockHashByRange getBlockHashByRange {start} {end};Return the hash range of block from 'start' to 'end'(exclude self) getBlockByOrder getBlockByOrder {order} {fullTx} getBestBlockHash getBestBlockHash getBlockHeader getBlockHeader {number|hash} [verbose];verbose:bool,show detail,defalut true; get block by number or hash isOnMainChain isOnMainChain {hash}; query whether a given block is on the main chain getMainChainHeight getMainChainHeight getBlockWeight getBlockWeight blockChain Commands: createRawTransaction createRawTx {inTxid:vout}... {toAddr:amount}... {lockTime},crate raw transaction getRawTransaction getRawTransaction {tx_hash} [verbose]; verbose: bool,show detail,defalut true decodeRawTransaction decodeRawTransaction {raw_tx} sendRawTransaction sendRawTransaction {sign_raw_tx} {allow_high_fee}; allow_high_fee: default false; send sing_raw_tx to network txSign txSign {private_key} {raw_tx}; sign rawTx getUtxo getUtxo {tx_hash} {vout} [include_mempool]; vout:index of the output; include_mempool: default=true,include the mempool , get information about an unspent transaction output getNodeInfo getNodeInfo getPeerInfo getPeerInfo mempool Commands: getMempool getMempool [type] [verbose]; type: defalut regular; verbose: bool ; get mempool info miner Commands: generate generate {number}, cpu mine {number} blocks getBlockTemplate getBlockTemplate; get new block work to mine submitBlock submitBlock {blockHex}; broadcast mine block to network Flags: --cert string RPC server certificate file path -c, --config string config file path (default \u0026quot;cli.toml\u0026quot;) --debug debug print log --format print json format -h, --help help for qitmeer-cli --notls Do not verify tls certificates (not recommended!) (default true) -P, --password string RPC password --proxy string Connect via SOCKS5 proxy (eg. 127.0.0.1:9050) --proxypass string Password for proxy server --proxyuser string Username for proxy server -s, --server string RPC server to connect to (default \u0026quot;127.0.0.1:18131\u0026quot;) --skipverify Do not verify tls certificates (not recommended!) (default true) --timeout string rpc timeout,s:second h:hour m:minute (default \u0026quot;30s\u0026quot;) -u, --user string RPC username Use \u0026quot;qitmeer-cli [command] --help\u0026quot; for more information about a command. Options  -h, --help help for qitmeer-cli SEE ALSO  block blockChain mempool miner  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/sendrawtransaction/",
	"title": "sendRawTransaction",
	"tags": [],
	"description": "",
	"content": "sendRawTransaction sendRawTransaction {sign_raw_tx} {allow_high_fee}; allow_high_fee: default false; send sing_raw_tx to network\nUsage qitmeer-cli sendRawTransaction [flags] Alias   sendrawtransaction\n  SendRawTransaction\n  sendRawTx\n  sendrawtx\n  SendRawTx\n  Examples  sendRawTransaction 0100000001ff5d53a7070fa9f0a9d12af729d2cbaf355ef1173c106a84cf9ef3a46bff03b202000000ffffffff01005504790a0000001976a914627777996288556166614462639988446255776688ac000000000000000001000000000000000000000000ffffffff6b483045022100dced4d67dd74647d0036077ee5b435838934377b1d296dd9da852772911e3be2022063dd346bd812a894968b8acacead7e7beff48947657a82f1e8f9c38876d4c905012103aba0a09f5b44138a46a2e5d26b8659923d84c4ba9437e22c3828cac43d0edb49 sendRawTransaction 0100000001ff5d53a7070fa9f0a9d12af729d2cbaf355ef1173c106a84cf9ef3a46bff03b202000000ffffffff01005504790a0000001976a914627777996288556166614462639988446255776688ac000000000000000001000000000000000000000000ffffffff6b483045022100dced4d67dd74647d0036077ee5b435838934377b1d296dd9da852772911e3be2022063dd346bd812a894968b8acacead7e7beff48947657a82f1e8f9c38876d4c905012103aba0a09f5b44138a46a2e5d26b8659923d84c4ba9437e22c3828cac43d0edb49 true Options  -h, --help help for sendRawTransaction SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/miner/submitblock/",
	"title": "submitBlock",
	"tags": [],
	"description": "",
	"content": "submitBlock submitBlock {blockHex}; broadcast mine block to network\nUsage qitmeer-cli submitBlock [flags] broadcast mine block to network\n{blockHex}: block hex data\nAlias   submitblock\n  Submitblock\n  Examples  //submitBlock {blockHex} submitBlock 01000000c76bc4356cf83757de0173e07696d602350fe38b5e9262843ee267a48389976c6f8fbaeee50332b3e8f7e78542a685fefac0c070bf7574997447578b3397ed560000000000000000000000000000000000000000000000000000000000000000ffff001e000000000000000057e51e5d00000000b24b19010000000001c76bc4356cf83757de0173e07696d602350fe38b5e9262843ee267a48389976c0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff0380b2e60e000000000000000000000000000e6a0c01000000524715a54582568580461c86000000001976a914c1777151516afe2b9f59bbd1479231aa2f250d2888ac00000000000000000100f902950000000000000000ffffffff0700002f6e6f782f Options  -h, --help help for submitBlock SEE ALSO  qitmeer-cli miner  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/reference/qitmeer-cli/blockchain/txsign/",
	"title": "txSign",
	"tags": [],
	"description": "",
	"content": "txSign txSign {private_key} {raw_tx}; sign rawTx\nUsage qitmeer-cli txSign [flags] Alias   txsign\n  TxSign\n  signRawTx\n  signrawtx\n  SignRawTx\n  Examples  //txSign {private_key} {raw_tx} txSign 2ad045c0df865c8f84479ea06adf00cbbfec705fb9402ea117ce2ef242a9d260 0100000001ff5d53a7070fa9f0a9d12af729d2cbaf355ef1173c106a84cf9ef3a46bff03b202000000ffffffff01005504790a0000001976a914627777996288556166614462639988446255776688ac000000000000000001000000000000000000000000ffffffff00 Options  -h, --help help for txSign SEE ALSO  qitmeer-cli blockChain  "
},
{
	"uri": "https://qitmeer.github.io/docs/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/en/json-rpc-api/getrawtransaction/",
	"title": "getRawTransaction",
	"tags": [],
	"description": "",
	"content": "getRawTransaction get raw transaction by ID\nParameters  txid: (hex string) 256-bit transaction ID verbose: (bool , default=false) When the verbose flag isn\u0026rsquo;t set, simply return the serialized transaction as a hex-encoded string.  Returns verbose = true rawTx: (hex string)\nverbose = false Tx: (object)\nExample Request curl -s -k -u test:test -X POST -H \u0026#39;Content-Type: application/json\u0026#39; --data \u0026#39;{\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;getRawTransaction\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;c259a4dfb7eaaae92ab246f14762541581671135cd6030ac29d8c34cf77e9f32\u0026#34;,true],\u0026#34;id\u0026#34;:1}\u0026#39; https://127.0.0.1:18131 Response { \u0026#34;hex\u0026#34;: \u0026#34;0100000001dc7d54db024a1ef06e38b85ab01af2d60043e3d36b5411691224c05dcf36f63c01000000ffffffff02659ca300000000001976a91406e2097d585337cdd10aefa09994b511127af0bb88acf0e8cd6f230200001976a914fe27c90d4ed4de3269c0bb9ae1d7639865e3bf2888ac00000000000000008015fc5e016b48304502210090910aa0190a6571319b0b638bfbb593582575703abdd4f1a7f0da2812cda7d102205dae6fee28396bfeb8f1b814884d8d03ab0dd9f30b171d906c24914ba2f85b1a012103cd4fa2ea2688ac9e0a62584635244f572d22c13730d5576722d6571aabfddca8\u0026#34;, \u0026#34;txid\u0026#34;: \u0026#34;c259a4dfb7eaaae92ab246f14762541581671135cd6030ac29d8c34cf77e9f32\u0026#34;, \u0026#34;txhash\u0026#34;: \u0026#34;9b603ba3b17fd8491749ac366a5064d8b7b70be02568e405406a9acd70e971a8\u0026#34;, \u0026#34;size\u0026#34;: 235, \u0026#34;version\u0026#34;: 1, \u0026#34;locktime\u0026#34;: 0, \u0026#34;timestamp\u0026#34;: \u0026#34;2020-07-01T12:48:00+08:00\u0026#34;, \u0026#34;expire\u0026#34;: 0, \u0026#34;vin\u0026#34;: [ { \u0026#34;txid\u0026#34;: \u0026#34;3cf636cf5dc024126911546bd3e34300d6f21ab05ab8386ef01e4a02db547ddc\u0026#34;, \u0026#34;vout\u0026#34;: 1, \u0026#34;sequence\u0026#34;: 4294967295, \u0026#34;scriptSig\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;304502210090910aa0190a6571319b0b638bfbb593582575703abdd4f1a7f0da2812cda7d102205dae6fee28396bfeb8f1b814884d8d03ab0dd9f30b171d906c24914ba2f85b1a01 03cd4fa2ea2688ac9e0a62584635244f572d22c13730d5576722d6571aabfddca8\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;48304502210090910aa0190a6571319b0b638bfbb593582575703abdd4f1a7f0da2812cda7d102205dae6fee28396bfeb8f1b814884d8d03ab0dd9f30b171d906c24914ba2f85b1a012103cd4fa2ea2688ac9e0a62584635244f572d22c13730d5576722d6571aabfddca8\u0026#34; } } ], \u0026#34;vout\u0026#34;: [ { \u0026#34;amount\u0026#34;: 10722405, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 06e2097d585337cdd10aefa09994b511127af0bb OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a91406e2097d585337cdd10aefa09994b511127af0bb88ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;TmPaUYQuUtfCysrYVHc4AdhpVHxw7EskHTP\u0026#34; ] } }, { \u0026#34;amount\u0026#34;: 2351222876400, \u0026#34;scriptPubKey\u0026#34;: { \u0026#34;asm\u0026#34;: \u0026#34;OP_DUP OP_HASH160 fe27c90d4ed4de3269c0bb9ae1d7639865e3bf28 OP_EQUALVERIFY OP_CHECKSIG\u0026#34;, \u0026#34;hex\u0026#34;: \u0026#34;76a914fe27c90d4ed4de3269c0bb9ae1d7639865e3bf2888ac\u0026#34;, \u0026#34;reqSigs\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;pubkeyhash\u0026#34;, \u0026#34;addresses\u0026#34;: [ \u0026#34;Tmn7vzzSrvAPNLtwpD5YjiWwVUBD74Hjdww\u0026#34; ] } } ], \u0026#34;confirmations\u0026#34;: 0 } "
},
{
	"uri": "https://qitmeer.github.io/docs/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]